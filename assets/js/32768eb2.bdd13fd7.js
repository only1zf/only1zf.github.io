"use strict";(globalThis.webpackChunkpub=globalThis.webpackChunkpub||[]).push([[1202],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},47703:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"excerpts/AI/gpt4-1_prompting_guide","title":"GPT-4.1 Prompting Guide","description":"GPT-4.1 \u7cfb\u5217\u6a21\u578b\u5728\u7f16\u7801\u80fd\u529b\u3001\u6307\u4ee4\u9075\u5faa\u6027\u4ee5\u53ca\u957f\u4e0a\u4e0b\u6587\u5904\u7406\u65b9\u9762\uff0c\u76f8\u6bd4 GPT-4o \u5b9e\u73b0\u4e86\u663e\u8457\u5347\u7ea7\u3002\u5728\u672c\u63d0\u793a\u8bcd\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u6c47\u603b\u4e86\u5927\u91cf\u5185\u90e8\u6d4b\u8bd5\u4e2d\u603b\u7ed3\u51fa\u7684\u91cd\u8981\u63d0\u793a\u8bcd\u6280\u5de7\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u6700\u5927\u5316\u5229\u7528\u8fd9\u4e00\u5168\u65b0\u6a21\u578b\u5bb6\u65cf\u7684\u589e\u5f3a\u80fd\u529b\u3002","source":"@site/docs/excerpts/AI/gpt4-1_prompting_guide.md","sourceDirName":"excerpts/AI","slug":"/excerpts/AI/gpt4-1_prompting_guide","permalink":"/docs/excerpts/AI/gpt4-1_prompting_guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"aliases":[null]},"sidebar":"excerptsSidebar","previous":{"title":"GPT \u65e0\u6cd5\u7ffb\u8bd1\u8d85\u957f\u5185\u5bb9\u7684\u63d0\u793a\u8bcd\u4f18\u5316\u5c1d\u8bd5","permalink":"/docs/excerpts/AI/gpt-translation-long-content-optimization"},"next":{"title":"\u5728\u6784\u5efa Prompt \u65f6\uff0c\u5982\u4f55\u907f\u514d\u628a\u7ffb\u8bd1\u5185\u5bb9\u5f53\u6210\u5bf9\u8bdd\u5185\u5bb9\uff1f","permalink":"/docs/excerpts/AI/how-to-avoid-translated-content-being-treated-as-dialog"}}');var s=t(74848),o=t(28453);const r={aliases:[null]},a="GPT-4.1 Prompting Guide",l={},c=[{value:"<strong>\u7cfb\u7edf\u63d0\u793a\u8bcd\u63d0\u9192</strong>",id:"\u7cfb\u7edf\u63d0\u793a\u8bcd\u63d0\u9192",level:2},{value:"<strong>\u5de5\u5177\u8c03\u7528</strong>",id:"\u5de5\u5177\u8c03\u7528",level:2},{value:"<strong>\u63d0\u793a\u8bcd\u5f15\u5bfc\u7684\u89c4\u5212\u4e0e\u601d\u7ef4\u94fe\uff08chain-of-thought\uff09</strong>",id:"\u63d0\u793a\u8bcd\u5f15\u5bfc\u7684\u89c4\u5212\u4e0e\u601d\u7ef4\u94fechain-of-thought",level:2},{value:"<strong>SWE-bench Verified \u63d0\u793a\u8bcd\u793a\u4f8b</strong>",id:"swe-bench-verified-\u63d0\u793a\u8bcd\u793a\u4f8b",level:2},{value:"<strong>\u6700\u4f73\u4e0a\u4e0b\u6587\u5bb9\u91cf</strong>",id:"\u6700\u4f73\u4e0a\u4e0b\u6587\u5bb9\u91cf",level:2},{value:"<strong>\u8c03\u8282\u5bf9\u4e0a\u4e0b\u6587\u7684\u4f9d\u8d56</strong>",id:"\u8c03\u8282\u5bf9\u4e0a\u4e0b\u6587\u7684\u4f9d\u8d56",level:2},{value:"<strong>\u63d0\u793a\u8bcd\u7ec4\u7ec7\u5efa\u8bae</strong>",id:"\u63d0\u793a\u8bcd\u7ec4\u7ec7\u5efa\u8bae",level:2},{value:"<strong>\u63a8\u8350\u5de5\u4f5c\u6d41\u7a0b</strong>",id:"\u63a8\u8350\u5de5\u4f5c\u6d41\u7a0b",level:2},{value:"<strong>\u5e38\u89c1\u6545\u969c\u6a21\u5f0f</strong>",id:"\u5e38\u89c1\u6545\u969c\u6a21\u5f0f",level:2},{value:"<strong>\u793a\u4f8b\u63d0\u793a\u8bcd\uff1a\u5ba2\u6237\u670d\u52a1</strong>",id:"\u793a\u4f8b\u63d0\u793a\u8bcd\u5ba2\u6237\u670d\u52a1",level:2},{value:"<strong>\u63a8\u8350\u63d0\u793a\u8bcd\u7ed3\u6784</strong>",id:"\u63a8\u8350\u63d0\u793a\u8bcd\u7ed3\u6784",level:2},{value:"<strong>\u5206\u9694\u7b26\uff08Delimiter\uff09</strong>",id:"\u5206\u9694\u7b26delimiter",level:2},{value:"<strong>\u6ce8\u610f\u4e8b\u9879</strong>",id:"\u6ce8\u610f\u4e8b\u9879",level:2},{value:"<strong>\u5e94\u7528\u8865\u4e01</strong>",id:"\u5e94\u7528\u8865\u4e01",level:2},{value:"<strong>\u53c2\u8003\u5b9e\u73b0\uff1aapply_patch.py</strong>",id:"\u53c2\u8003\u5b9e\u73b0apply_patchpy",level:2},{value:"<strong>\u5176\u4ed6\u6709\u6548\u7684 diff \u683c\u5f0f</strong>",id:"\u5176\u4ed6\u6709\u6548\u7684-diff-\u683c\u5f0f",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"gpt-41-prompting-guide",children:"GPT-4.1 Prompting Guide"})}),"\n",(0,s.jsx)(n.p,{children:"GPT-4.1 \u7cfb\u5217\u6a21\u578b\u5728\u7f16\u7801\u80fd\u529b\u3001\u6307\u4ee4\u9075\u5faa\u6027\u4ee5\u53ca\u957f\u4e0a\u4e0b\u6587\u5904\u7406\u65b9\u9762\uff0c\u76f8\u6bd4 GPT-4o \u5b9e\u73b0\u4e86\u663e\u8457\u5347\u7ea7\u3002\u5728\u672c\u63d0\u793a\u8bcd\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u6c47\u603b\u4e86\u5927\u91cf\u5185\u90e8\u6d4b\u8bd5\u4e2d\u603b\u7ed3\u51fa\u7684\u91cd\u8981\u63d0\u793a\u8bcd\u6280\u5de7\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u6700\u5927\u5316\u5229\u7528\u8fd9\u4e00\u5168\u65b0\u6a21\u578b\u5bb6\u65cf\u7684\u589e\u5f3a\u80fd\u529b\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u8bb8\u591a\u5e38\u89c1\u7684\u6700\u4f73\u5b9e\u8df5\u4f9d\u7136\u9002\u7528\u4e8e GPT-4.1\uff0c\u4f8b\u5982\u63d0\u4f9b\u4e0a\u4e0b\u6587\u793a\u4f8b\u3001\u4f7f\u6307\u4ee4\u5c3d\u53ef\u80fd\u5177\u4f53\u6e05\u6670\uff0c\u4ee5\u53ca\u901a\u8fc7\u63d0\u793a\u8bcd\u5f15\u5bfc\u6a21\u578b\u8fdb\u884c\u89c4\u5212\uff0c\u4ee5\u6700\u5927\u5316\u6a21\u578b\u667a\u80fd\u3002\u4e0d\u8fc7\uff0c\u82e5\u60f3\u771f\u6b63\u53d1\u6325\u8fd9\u4e00\u6a21\u578b\u7684\u6f5c\u529b\uff0c\u5efa\u8bae\u4f60\u5bf9\u539f\u6709\u63d0\u793a\u8bcd\u8fdb\u884c\u9002\u5e94\u6027\u8fc1\u79fb\u3002GPT-4.1 \u7684\u8bad\u7ec3\u76ee\u6807\u662f\u66f4\u7d27\u5bc6\u3001\u66f4\u5b57\u9762\u5730\u9075\u5faa\u6307\u4ee4\uff0c\u533a\u522b\u4e8e\u4ee5\u5f80\u66f4\u503e\u5411\u4e8e\u81ea\u7531\u63a8\u6d4b\u610f\u56fe\u7684\u524d\u4ee3\u6a21\u578b\u3002\u8fd9\u540c\u6837\u610f\u5473\u7740\uff0c\u53ea\u8981\u4f60\u7684\u63d0\u793a\u8bcd\u89c4\u8303\u4e14\u660e\u786e\uff0cGPT-4.1 \u5bf9\u884c\u4e3a\u5f15\u5bfc\u7684\u54cd\u5e94\u4f1a\u975e\u5e38\u7075\u654f\u2014\u2014\u5982\u679c\u6a21\u578b\u53cd\u5e94\u4e0e\u9884\u671f\u4e0d\u76f8\u7b26\uff0c\u4ec5\u9700\u8865\u5145\u4e00\u53e5\u660e\u786e\u3001\u575a\u51b3\u7684\u8bf4\u660e\uff0c\u51e0\u4e4e\u603b\u80fd\u8ba9\u5b83\u56de\u5f52\u4f60\u671f\u671b\u7684\u8f68\u9053\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u8bf7\u7ee7\u7eed\u9605\u8bfb\u4e0b\u6587\uff0c\u67e5\u9605\u53ef\u4f9b\u53c2\u8003\u7684\u63d0\u793a\u8bcd\u8303\u4f8b\u3002\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u4e9b\u6307\u5357\u867d\u7136\u5177\u6709\u5f3a\u901a\u7528\u6027\uff0c\u4f46\u6ca1\u6709\u4e00\u5957\u5efa\u8bae\u80fd\u9002\u7528\u4e8e\u6240\u6709\u573a\u666f\u3002AI \u5de5\u7a0b\u672c\u8d28\u662f\u5b9e\u8bc1\u79d1\u5b66\uff0c\u5927\u8bed\u8a00\u6a21\u578b\u4e5f\u5929\u7136\u5177\u6709\u4e0d\u786e\u5b9a\u6027\uff1b\u6240\u4ee5\uff0c\u9664\u4e86\u9075\u5faa\u672c\u6307\u5357\uff0c\u4e5f\u5f3a\u70c8\u5efa\u8bae\u4f60\u5efa\u7acb\u6709\u6548\u7684\u8bc4\u6d4b\u4f53\u7cfb\uff0c\u5e76\u4e0d\u65ad\u8fed\u4ee3\u4f18\u5316\uff0c\u4ee5\u786e\u4fdd\u4f60\u7684\u63d0\u793a\u8bcd\u5de5\u7a0b\u771f\u6b63\u5e26\u6765\u5b9e\u9645\u6210\u6548\u3002"}),"\n",(0,s.jsx)(n.h1,{id:"1-\u667a\u80fd\u4f53\u5de5\u4f5c\u6d41agentic-workflows",children:(0,s.jsx)(n.strong,{children:"1. \u667a\u80fd\u4f53\u5de5\u4f5c\u6d41\uff08Agentic Workflows\uff09"})}),"\n",(0,s.jsx)(n.p,{children:"GPT-4.1 \u7279\u522b\u9002\u5408\u6784\u5efa\u667a\u80fd\u4f53\u5de5\u4f5c\u6d41\u3002\u5728\u6a21\u578b\u8bad\u7ec3\u65f6\uff0c\u6211\u4eec\u5f3a\u8c03\u4e3a\u5176\u63d0\u4f9b\u4e30\u5bcc\u591a\u6837\u7684\u667a\u80fd\u4f53\u95ee\u9898\u6c42\u89e3\u8f68\u8ff9\u3002\u6211\u4eec\u4e3a\u6a21\u578b\u8bbe\u8ba1\u7684\u667a\u80fd\u4f53\u67b6\u6784\u5728 SWE-bench Verified \u8fd9\u4e00\u57fa\u51c6\u7684\u975e\u63a8\u7406\u6a21\u578b\u4e2d\u53d6\u5f97\u4e86\u4e1a\u754c\u9886\u5148\u7684\u8868\u73b0\uff0c\u6210\u529f\u89e3\u51b3\u4e86 55% \u7684\u95ee\u9898\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u7cfb\u7edf\u63d0\u793a\u8bcd\u63d0\u9192",children:(0,s.jsx)(n.strong,{children:"\u7cfb\u7edf\u63d0\u793a\u8bcd\u63d0\u9192"})}),"\n",(0,s.jsx)(n.p,{children:"\u4e3a\u5145\u5206\u53d1\u6325 GPT-4.1 \u7684\u667a\u80fd\u4f53\u80fd\u529b\uff0c\u5efa\u8bae\u5728\u6240\u6709\u667a\u80fd\u4f53\u63d0\u793a\u8bcd\u4e2d\u5305\u542b\u4e09\u7c7b\u5173\u952e\u63d0\u9192\u3002\u4ee5\u4e0b\u793a\u4f8b\u9488\u5bf9\u667a\u80fd\u4f53\u7f16\u7801\u573a\u666f\u4f18\u5316\uff0c\u540c\u65f6\u4e5f\u5f88\u5bb9\u6613\u6269\u5c55\u5230\u901a\u7528\u667a\u80fd\u4f53\u6848\u4f8b\u3002"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Persistence\uff08\u6301\u7eed\u6027\uff09"}),"\uff1a\u786e\u4fdd\u6a21\u578b\u610f\u8bc6\u5230\u5b83\u5373\u5c06\u8fdb\u5165\u591a\u8f6e\u5bf9\u8bdd\uff0c\u907f\u514d\u8fc7\u65e9\u5730\u628a\u63a7\u5236\u6743\u4ea4\u8fd8\u7528\u6237\u3002\u6bd4\u5982\uff1a"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"You are an agent - please keep going until the user\u2019s query is completely resolved, before ending your turn and yielding back to the user. Only terminate your turn when you are sure that the problem is solved.\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tool-calling\uff08\u5de5\u5177\u8c03\u7528\uff09"}),"\uff1a\u9f13\u52b1\u6a21\u578b\u5145\u5206\u5229\u7528\u53ef\u7528\u5de5\u5177\uff0c\u51cf\u5c11\u51ed\u7a7a\u731c\u6d4b\u3002\u6bd4\u5982\uff1a"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"If you are not sure about file content or codebase structure pertaining to the user\u2019s request, use your tools to read files and gather the relevant information: do NOT guess or make up an answer.\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Planning\uff08\u89c4\u5212\uff0c\u53ef\u9009\uff09"}),"\uff1a\u5982\u6709\u9700\u8981\uff0c\u786e\u4fdd\u6a21\u578b\u5728\u6bcf\u6b21\u8c03\u7528\u5de5\u5177\u524d\u540e\u90fd\u4ee5\u6587\u672c\u5f62\u5f0f\u8fdb\u884c\u89c4\u5212\u548c\u53cd\u601d\uff0c\u800c\u4e0d\u662f\u5355\u7eaf\u4e32\u8054\u5de5\u5177\u8c03\u7528\u3002\u6bd4\u5982\uff1a"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"You MUST plan extensively before each function call, and reflect extensively on the outcomes of the previous function calls. DO NOT do this entire process by making function calls only, as this can impair your ability to solve the problem and think insightfully.\n"})}),"\n",(0,s.jsx)(n.p,{children:"GPT-4.1 \u5728\u667a\u80fd\u4f53\u573a\u666f\u4e0b\u5bf9\u7528\u6237\u6307\u4ee4\u4e0e\u7cfb\u7edf\u63d0\u793a\u54cd\u5e94\u5c24\u4e3a\u654f\u611f\u3002\u6a21\u578b\u4e25\u683c\u9075\u5faa\u8fd9\u4e09\u6761\u7b80\u5355\u63d0\u793a\u540e\uff0c\u6211\u4eec\u5728 SWE-bench Verified \u7684\u5f97\u5206\u63d0\u5347\u4e86\u8fd1 20%\u2014\u2014\u56e0\u6b64\u975e\u5e38\u5efa\u8bae\u4f60\u5728\u6240\u6709\u667a\u80fd\u4f53\u63d0\u793a\u8bcd\u5f00\u5934\u660e\u786e\u6db5\u76d6\u8fd9\u4e09\u5927\u7c7b\u63d0\u9192\u3002\u603b\u4f53\u800c\u8a00\uff0c\u8fd9\u4e09\u6761\u6307\u5f15\u80fd\u8ba9\u6a21\u578b\u4ece\u201c\u804a\u5929\u673a\u5668\u4eba\u201d\u53d8\u4e3a\u771f\u6b63\u201c\u4e3b\u52a8\u8fdb\u53d6\u201d\u3001\u81ea\u4e3b\u63a8\u8fdb\u4ea4\u4e92\u7684\u667a\u80fd\u4f53\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u5de5\u5177\u8c03\u7528",children:(0,s.jsx)(n.strong,{children:"\u5de5\u5177\u8c03\u7528"})}),"\n",(0,s.jsxs)(n.p,{children:["\u76f8\u8f83\u4ee5\u5f80\u6a21\u578b\uff0cGPT-4.1 \u9488\u5bf9 OpenAI API \u8bf7\u6c42\u53c2\u6570\uff08",(0,s.jsx)(n.code,{children:"tools"})," \u5b57\u6bb5\uff09\u4e2d\u7684\u5de5\u5177\u6709\u6548\u5229\u7528\u80fd\u529b\u8fdb\u884c\u8fc7\u66f4\u591a\u8bad\u7ec3\u3002\u6211\u4eec\u5efa\u8bae\u5f00\u53d1\u8005\u53ea\u901a\u8fc7 ",(0,s.jsx)(n.code,{children:"tools"})," \u5b57\u6bb5\u63d0\u4f9b\u5de5\u5177\uff0c\u800c\u4e0d\u8981\u50cf\u8fc7\u53bb\u67d0\u4e9b\u7528\u6cd5\u90a3\u6837\u624b\u52a8\u5c06\u5de5\u5177\u63cf\u8ff0\u5199\u8fdb prompt \u5185\u518d\u81ea\u5efa\u89e3\u6790\u5668\u3002\u8fd9\u6837\u66f4\u80fd\u51cf\u5c11\u51fa\u9519\u3001\u786e\u4fdd\u6a21\u578b\u5728\u5de5\u5177\u8c03\u7528\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u7a33\u5b9a\u5206\u5e03\u2014\u2014\u6211\u4eec\u7684\u5b9e\u9a8c\u663e\u793a\uff0c\u4ec5\u7528 API \u65b9\u5f0f\u89e3\u6790\u5de5\u5177\u63cf\u8ff0\u53ef\u4ee4 SWE-bench Verified \u7684\u901a\u8fc7\u7387\u63d0\u5347\u7ea6 2%\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:["\u5f00\u53d1\u8005\u5e94\u4e3a\u5de5\u5177\u5408\u7406\u547d\u540d\uff0c\u4ee5\u51c6\u786e\u8868\u8fbe\u529f\u80fd\uff0c\u5e76\u4e3a\u5de5\u5177\u7684 ",(0,s.jsx)(n.strong,{children:"description"})," \u5b57\u6bb5\u5199\u660e\u6e05\u6670\u8be6\u7ec6\u7684\u7528\u9014\u8bf4\u660e\uff1b\u5de5\u5177\u7684\u6bcf\u4e2a\u53c2\u6570\uff08param\uff09\u4e5f\u5e94\u91c7\u7528\u6613\u61c2\u547d\u540d\u548c\u9ad8\u8d28\u91cf\u63cf\u8ff0\uff0c\u4fdd\u969c\u5408\u7406\u8c03\u7528\u3002\u5982\u679c\u4f60\u7684\u5de5\u5177\u8f83\u590d\u6742\u4e14\u9700\u8981\u4f7f\u7528\u793a\u4f8b\uff0c\u5efa\u8bae\u5728\u7cfb\u7edf\u63d0\u793a\u8bcd\u5185\u521b\u5efa ",(0,s.jsx)(n.code,{children:"# Examples"})," \u533a\u5757\uff0c\u5c06\u7528\u4f8b\u653e\u5165\u6b64\u5904\uff0c\u800c\u4e0d\u8981\u4ecd\u65e7\u585e\u8fdb ",(0,s.jsx)(n.strong,{children:"description"})," \u5b57\u6bb5\u2014\u2014\u540e\u8005\u5c3d\u91cf\u4fdd\u6301\u7cbe\u70bc\u4e14\u8be6\u5c3d\u3002\u5408\u9002\u7684\u4f8b\u5b50\u53ef\u4ee5\u5e2e\u52a9\u6a21\u578b\u7406\u89e3\u5de5\u5177\u4f55\u65f6\u53ef\u7528\u3001\u8c03\u7528\u65f6\u9700\u5426\u52a0\u5165\u7528\u6237\u6587\u672c\uff0c\u4ee5\u53ca\u4e0d\u540c\u8f93\u5165\u5e94\u9009\u7528\u54ea\u4e9b\u53c2\u6570\u3002\u4f60\u8fd8\u53ef\u4ee5\u5728 ",(0,s.jsx)(n.strong,{children:"Prompt Playground"})," \u91cc\u7528 \u201cGenerate Anything\u201d \u529f\u80fd\uff0c\u4e3a\u4f60\u7684\u65b0\u5de5\u5177\u5b9a\u4e49\u83b7\u5f97\u826f\u597d\u8d77\u70b9\u3002"]}),"\n",(0,s.jsx)(n.h2,{id:"\u63d0\u793a\u8bcd\u5f15\u5bfc\u7684\u89c4\u5212\u4e0e\u601d\u7ef4\u94fechain-of-thought",children:(0,s.jsx)(n.strong,{children:"\u63d0\u793a\u8bcd\u5f15\u5bfc\u7684\u89c4\u5212\u4e0e\u601d\u7ef4\u94fe\uff08chain-of-thought\uff09"})}),"\n",(0,s.jsx)(n.p,{children:"\u5982\u524d\u6587\u6240\u8ff0\uff0c\u5f00\u53d1\u8005\u53ef\u5728 prompt \u4e2d\u9009\u62e9\u5f15\u5bfc GPT-4.1 \u9a71\u52a8\u7684\u667a\u80fd\u4f53\u5728\u6bcf\u6b21\u8c03\u7528\u5de5\u5177\u524d\u540e\u4e3b\u52a8\u201c\u89c4\u5212-\u53cd\u601d\u201d\uff0c\u800c\u4e0d\u662f\u9759\u9ed8\u4e32\u8054\u5de5\u5177\u8c03\u7528\u3002GPT-4.1 \u5e76\u975e\u63a8\u7406\u578b\u6a21\u578b\u2014\u2014\u5373\u5b83\u4e0d\u4f1a\u81ea\u52a8\u5728\u5185\u90e8\u5f62\u6210 chain-of-thought\uff08\u601d\u7ef4\u94fe/\u63a8\u7406\u94fe\uff09\uff1b\u4f46\u901a\u8fc7\u63d0\u793a\u8bcd\uff0c\u6bd4\u5982\u53ef\u9009\u7684 Planning \u7ec4\u4ef6\uff0c\u5f00\u53d1\u8005\u5b8c\u5168\u53ef\u4ee5\u4fc3\u4f7f\u6a21\u578b\u660e\u786e\u8f93\u51fa\u5206\u6b65\u7684\u64cd\u4f5c\u89c4\u5212\u3002\u8fd9\u76f8\u5f53\u4e8e\u8ba9\u6a21\u578b\u201c\u8fb9\u601d\u8003\u8fb9\u8868\u8fbe\u201d\u3002\u6211\u4eec\u5728 SWE-bench Verified \u667a\u80fd\u4f53\u5b9e\u9a8c\u4e2d\u53d1\u73b0\uff0c\u663e\u5f0f\u5f15\u5bfc\u89c4\u5212\u80fd\u4ee4\u901a\u8fc7\u7387\u63d0\u5347\u7ea6 4%\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"swe-bench-verified-\u63d0\u793a\u8bcd\u793a\u4f8b",children:(0,s.jsx)(n.strong,{children:"SWE-bench Verified \u63d0\u793a\u8bcd\u793a\u4f8b"})}),"\n",(0,s.jsx)(n.p,{children:"\u4e0b\u9762\u6211\u4eec\u5206\u4eab\u7684\u662f\u5f53\u524d\u5728 SWE-bench Verified \u4efb\u52a1\u4e2d\u83b7\u5f97\u6700\u9ad8\u5206\u7684\u667a\u80fd\u4f53 prompt \u6a21\u677f\uff0c\u5176\u7279\u8272\u5728\u4e8e\u5bf9\u5de5\u4f5c\u6d41\u548c\u95ee\u9898\u89e3\u51b3\u7b56\u7565\u7684\u8be6\u7ec6\u8bf4\u660e\u3002\u8fd9\u4e00\u5957\u8def\u53ef\u7075\u6d3b\u5957\u7528\u4e8e\u5404\u79cd\u667a\u80fd\u4f53\u76f8\u5173\u4efb\u52a1\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from openai import OpenAI\nimport os\n\nclient = OpenAI(\n    api_key=os.environ.get(\n        "OPENAI_API_KEY", "<your OpenAI API key if not set as env var>"\n    )\n)\n\nSYS_PROMPT_SWEBENCH = """\nYou will be tasked to fix an issue from an open-source repository.\n\nYour thinking should be thorough and so it\'s fine if it\'s very long. You can think step by step before and after each action you decide to take.\n\nYou MUST iterate and keep going until the problem is solved.\n\nYou already have everything you need to solve this problem in the /testbed folder, even without internet connection. I want you to fully solve this autonomously before coming back to me.\n\nOnly terminate your turn when you are sure that the problem is solved. Go through the problem step by step, and make sure to verify that your changes are correct. NEVER end your turn without having solved the problem, and when you say you are going to make a tool call, make sure you ACTUALLY make the tool call, instead of ending your turn.\n\nTHE PROBLEM CAN DEFINITELY BE SOLVED WITHOUT THE INTERNET.\n\nTake your time and think through every step - remember to check your solution rigorously and watch out for boundary cases, especially with the changes you made. Your solution must be perfect. If not, continue working on it. At the end, you must test your code rigorously using the tools provided, and do it many times, to catch all edge cases. If it is not robust, iterate more and make it perfect. Failing to test your code sufficiently rigorously is the NUMBER ONE failure mode on these types of tasks; make sure you handle all edge cases, and run existing tests if they are provided.\n\nYou MUST plan extensively before each function call, and reflect extensively on the outcomes of the previous function calls. DO NOT do this entire process by making function calls only, as this can impair your ability to solve the problem and think insightfully.\n\n# Workflow\n\n## High-Level Problem Solving Strategy\n\n1. Understand the problem deeply. Carefully read the issue and think critically about what is required.\n2. Investigate the codebase. Explore relevant files, search for key functions, and gather context.\n3. Develop a clear, step-by-step plan. Break down the fix into manageable, incremental steps.\n4. Implement the fix incrementally. Make small, testable code changes.\n5. Debug as needed. Use debugging techniques to isolate and resolve issues.\n6. Test frequently. Run tests after each change to verify correctness.\n7. Iterate until the root cause is fixed and all tests pass.\n8. Reflect and validate comprehensively. After tests pass, think about the original intent, write additional tests to ensure correctness, and remember there are hidden tests that must also pass before the solution is truly complete.\n\nRefer to the detailed sections below for more information on each step.\n\n## 1. Deeply Understand the Problem\nCarefully read the issue and think hard about a plan to solve it before coding.\n\n## 2. Codebase Investigation\n- Explore relevant files and directories.\n- Search for key functions, classes, or variables related to the issue.\n- Read and understand relevant code snippets.\n- Identify the root cause of the problem.\n- Validate and update your understanding continuously as you gather more context.\n\n## 3. Develop a Detailed Plan\n- Outline a specific, simple, and verifiable sequence of steps to fix the problem.\n- Break down the fix into small, incremental changes.\n\n## 4. Making Code Changes\n- Before editing, always read the relevant file contents or section to ensure complete context.\n- If a patch is not applied correctly, attempt to reapply it.\n- Make small, testable, incremental changes that logically follow from your investigation and plan.\n\n## 5. Debugging\n- Make code changes only if you have high confidence they can solve the problem\n- When debugging, try to determine the root cause rather than addressing symptoms\n- Debug for as long as needed to identify the root cause and identify a fix\n- Use print statements, logs, or temporary code to inspect program state, including descriptive statements or error messages to understand what\'s happening\n- To test hypotheses, you can also add test statements or functions\n- Revisit your assumptions if unexpected behavior occurs.\n\n## 6. Testing\n- Run tests frequently using `!python3 run_tests.py` (or equivalent).\n- After each change, verify correctness by running relevant tests.\n- If tests fail, analyze failures and revise your patch.\n- Write additional tests if needed to capture important behaviors or edge cases.\n- Ensure all tests pass before finalizing.\n\n## 7. Final Verification\n- Confirm the root cause is fixed.\n- Review your solution for logic correctness and robustness.\n- Iterate until you are extremely confident the fix is complete and all tests pass.\n\n## 8. Final Reflection and Additional Testing\n- Reflect carefully on the original intent of the user and the problem statement.\n- Think about potential edge cases or scenarios that may not be covered by existing tests.\n- Write additional tests that would need to pass to fully validate the correctness of your solution.\n- Run these new tests and ensure they all pass.\n- Be aware that there are additional hidden tests that must also pass for the solution to be successful.\n- Do not assume the task is complete just because the visible tests pass; continue refining until you are confident the fix is robust and comprehensive.\n"""\n\nPYTHON_TOOL_DESCRIPTION = """This function is used to execute Python code or terminal commands in a stateful Jupyter notebook environment. python will respond with the output of the execution or time out after 60.0 seconds. Internet access for this session is disabled. Do not make external web requests or API calls as they will fail. Just as in a Jupyter notebook, you may also execute terminal commands by calling this function with a terminal command, prefaced with an exclamation mark.\n\nIn addition, for the purposes of this task, you can call this function with an `apply_patch` command as input.  `apply_patch` effectively allows you to execute a diff/patch against a file, but the format of the diff specification is unique to this task, so pay careful attention to these instructions. To use the `apply_patch` command, you should pass a message of the following structure as "input":\n\n%%bash\napply_patch <<"EOF"\n*** Begin Patch\n[YOUR_PATCH]\n*** End Patch\nEOF\n\nWhere [YOUR_PATCH] is the actual content of your patch, specified in the following V4A diff format.\n\n*** [ACTION] File: [path/to/file] -> ACTION can be one of Add, Update, or Delete.\nFor each snippet of code that needs to be changed, repeat the following:\n[context_before] -> See below for further instructions on context.\n- [old_code] -> Precede the old code with a minus sign.\n+ [new_code] -> Precede the new, replacement code with a plus sign.\n[context_after] -> See below for further instructions on context.\n\nFor instructions on [context_before] and [context_after]:\n- By default, show 3 lines of code immediately above and 3 lines immediately below each change. If a change is within 3 lines of a previous change, do NOT duplicate the first change\'s [context_after] lines in the second change\'s [context_before] lines.\n- If 3 lines of context is insufficient to uniquely identify the snippet of code within the file, use the @@ operator to indicate the class or function to which the snippet belongs. For instance, we might have:\n@@ class BaseClass\n[3 lines of pre-context]\n- [old_code]\n+ [new_code]\n[3 lines of post-context]\n\n- If a code block is repeated so many times in a class or function such that even a single @@ statement and 3 lines of context cannot uniquely identify the snippet of code, you can use multiple `@@` statements to jump to the right context. For instance:\n\n@@ class BaseClass\n@@ \tdef method():\n[3 lines of pre-context]\n- [old_code]\n+ [new_code]\n[3 lines of post-context]\n\nNote, then, that we do not use line numbers in this diff format, as the context is enough to uniquely identify code. An example of a message that you might pass as "input" to this function, in order to apply a patch, is shown below.\n\n%%bash\napply_patch <<"EOF"\n*** Begin Patch\n*** Update File: pygorithm/searching/binary_search.py\n@@ class BaseClass\n@@     def search():\n-        pass\n+        raise NotImplementedError()\n\n@@ class Subclass\n@@     def search():\n-        pass\n+        raise NotImplementedError()\n\n*** End Patch\nEOF\n\nFile references can only be relative, NEVER ABSOLUTE. After the apply_patch command is run, python will always say "Done!", regardless of whether the patch was successfully applied or not. However, you can determine if there are issue and errors by looking at any warnings or logging lines printed BEFORE the "Done!" is output.\n"""\n\npython_bash_patch_tool = {\n  "type": "function",\n  "name": "python",\n  "description": PYTHON_TOOL_DESCRIPTION,\n  "parameters": {\n      "type": "object",\n      "strict": True,\n      "properties": {\n          "input": {\n              "type": "string",\n              "description": " The Python code, terminal command (prefaced by exclamation mark), or apply_patch command that you wish to execute.",\n          }\n      },\n      "required": ["input"],\n  },\n}\n\n# Additional harness setup:\n# - Add your repo to /testbed\n# - Add your issue to the first user message\n# - Note: Even though we used a single tool for python, bash, and apply_patch, we generally recommend defining more granular tools that are focused on a single function\n\nresponse = client.responses.create(\n    instructions=SYS_PROMPT_SWEBENCH,\n    model="gpt-4.1-2025-04-14",\n    tools=[python_bash_patch_tool],\n    input=f"Please answer the following question:\\nBug: Typerror..."\n)\n\nresponse.to_dict()["output"]\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:"[{'id': 'msg_67fe92df26ac819182ffafce9ff4e4fc07c7e06242e51f8b',\n  'content': [{'annotations': [],\n    'text': \"Thank you for the report, but \u201cTyperror\u201d is too vague for me to start debugging right away.\\n\\n**To make progress, I need to:**\\n1. Find the exact error message text (e.g. `'TypeError: ...'`).\\n2. Find which file and which line/function/class the error occurred in.\\n3. Figure out what triggered the error (test file, usage, reproduction steps).\\n4. Find the root cause and details.\\n\\n**Next steps:**\\n- Investigate error/log/test output files for a Python `TypeError` message.\\n- Examine the relevant code sections for problematic type usage.\\n- If possible, reproduce the bug locally.\\n\\n**Plan:**\\n- First, I will search for test files and log output in the `/testbed` directory that may contain the full error message and stack trace.\\n\\nLet\u2019s start by listing the contents of the `/testbed` directory to look for clues.\",\n    'type': 'output_text'}],\n  'role': 'assistant',\n  'status': 'completed',\n  'type': 'message'},\n {'arguments': '{\"input\":\"!ls -l /testbed\"}',\n  'call_id': 'call_frnxyJgKi5TsBem0nR9Zuzdw',\n  'name': 'python',\n  'type': 'function_call',\n  'id': 'fc_67fe92e3da7081918fc18d5c96dddc1c07c7e06242e51f8b',\n  'status': 'completed'}]\n"})}),"\n",(0,s.jsx)(n.h1,{id:"2-\u957f\u4e0a\u4e0b\u6587long-context",children:(0,s.jsx)(n.strong,{children:"2. \u957f\u4e0a\u4e0b\u6587\uff08Long context\uff09"})}),"\n",(0,s.jsx)(n.p,{children:"GPT-4.1 \u62e5\u6709\u5f3a\u5927\u7684 100 \u4e07 Token \u8f93\u5165\u4e0a\u4e0b\u6587\u7a97\u53e3\uff0c\u5bf9\u4e8e\u5404\u79cd\u957f\u4e0a\u4e0b\u6587\u4efb\u52a1\u90fd\u975e\u5e38\u5b9e\u7528\uff0c\u6bd4\u5982\u7ed3\u6784\u5316\u6587\u6863\u89e3\u6790\u3001\u91cd\u6392\u5e8f\u3001\u7b5b\u9009\u5173\u952e\u4fe1\u606f\uff08\u5ffd\u7565\u65e0\u5173\u4e0a\u4e0b\u6587\uff09\u3001\u4ee5\u53ca\u57fa\u4e8e\u4e0a\u4e0b\u6587\u8fdb\u884c\u591a\u8df3\u63a8\u7406\u7b49\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u6700\u4f73\u4e0a\u4e0b\u6587\u5bb9\u91cf",children:(0,s.jsx)(n.strong,{children:"\u6700\u4f73\u4e0a\u4e0b\u6587\u5bb9\u91cf"})}),"\n",(0,s.jsx)(n.p,{children:"\u5728 needle-in-a-haystack\uff08\u5927\u6d77\u635e\u9488\uff09\u6d4b\u8bd5\u4e2d\uff0c\u5373\u4fbf\u8f93\u5165\u957f\u8fbe 100 \u4e07 Token\uff0c\u6a21\u578b\u4f9d\u7136\u8868\u73b0\u51fa\u8272\u3002\u5728\u5305\u542b\u5927\u91cf\u76f8\u5173\u4e0e\u65e0\u5173\u4ee3\u7801\u6216\u6587\u6863\u7684\u590d\u6742\u4efb\u52a1\u4e0a\uff0c\u6211\u4eec\u540c\u6837\u89c2\u5bdf\u5230\u4e86\u975e\u5e38\u5f3a\u7684\u6027\u80fd\u3002\u4e0d\u8fc7\uff0c\u968f\u7740\u9700\u8981\u68c0\u7d22\u7684\u5185\u5bb9\u8d8a\u6765\u8d8a\u591a\uff0c\u6216\u8005\u4efb\u52a1\u5bf9\u6574\u6bb5\u4e0a\u4e0b\u6587\u72b6\u6001\u7684\u5168\u9762\u590d\u6742\u63a8\u7406\uff08\u4f8b\u5982\u56fe\u641c\u7d22\uff09\u6709\u66f4\u9ad8\u8981\u6c42\u65f6\uff0c\u957f\u4e0a\u4e0b\u6587\u7684\u6027\u80fd\u6709\u53ef\u80fd\u6709\u6240\u4e0b\u964d\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u8c03\u8282\u5bf9\u4e0a\u4e0b\u6587\u7684\u4f9d\u8d56",children:(0,s.jsx)(n.strong,{children:"\u8c03\u8282\u5bf9\u4e0a\u4e0b\u6587\u7684\u4f9d\u8d56"})}),"\n",(0,s.jsx)(n.p,{children:"\u8003\u8651\u4e00\u4e0b\uff0c\u4e3a\u89e3\u9898\u6240\u9700\uff0c\u7a76\u7adf\u66f4\u9700\u8981\u5916\u90e8\u4e16\u754c\u77e5\u8bc6\uff0c\u8fd8\u662f\u6a21\u578b\u81ea\u8eab\u7684\u5185\u90e8\u77e5\u8bc6\u3002\u6709\u65f6\uff0c\u6a21\u578b\u9700\u8981\u5229\u7528\u81ea\u6709\u77e5\u8bc6\u8fde\u63a5\u6982\u5ff5\u6216\u8005\u8fdb\u884c\u903b\u8f91\u8df3\u8dc3\uff1b\u4f46\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\uff0c\u671f\u671b\u6a21\u578b\u53ea\u4f9d\u8d56\u4f60\u7ed9\u51fa\u7684\u4e0a\u4e0b\u6587\u8fdb\u884c\u56de\u7b54\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Instructions\n// for internal knowledge\n- Only use the documents in the provided External Context to answer the User Query. If you don't know the answer based on this context, you must respond \"I don't have the information needed to answer that\", even if a user insists on you answering the question.\n// For internal and external knowledge\n- By default, use the provided external context to answer the User Query, but if other basic knowledge is needed to answer, and you're confident in the answer, you can use some of your own knowledge to help answer the question.\n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u63d0\u793a\u8bcd\u7ec4\u7ec7\u5efa\u8bae",children:(0,s.jsx)(n.strong,{children:"\u63d0\u793a\u8bcd\u7ec4\u7ec7\u5efa\u8bae"})}),"\n",(0,s.jsx)(n.p,{children:"\u5728\u957f\u4e0a\u4e0b\u6587\u573a\u666f\u4e0b\uff0cprompt \u4e2d\u6307\u4ee4\u548c\u4e0a\u4e0b\u6587\u7684\u6446\u653e\u987a\u5e8f\u4f1a\u5f71\u54cd\u6700\u7ec8\u6548\u679c\u3002\u5982\u679c prompt \u4e2d\u5305\u542b\u5f88\u957f\u7684\u4e0a\u4e0b\u6587\uff0c\u5efa\u8bae\u4f60\u628a\u6307\u4ee4\u5206\u522b\u653e\u5728\u4e0a\u4e0b\u6587\u7684\u9996\u5c3e\uff0c\u5b9e\u6d4b\u8fd9\u79cd\u529e\u6cd5\u6548\u679c\u6700\u4f73\uff1b\u5982\u679c\u53ea\u6253\u7b97\u5199\u4e00\u6b21\u6307\u4ee4\uff0c\u653e\u5728\u4e0a\u4e0b\u6587\u4e0a\u65b9\u7684\u6548\u679c\u4e00\u822c\u8981\u4f18\u4e8e\u4e0b\u65b9\u3002"}),"\n",(0,s.jsx)(n.h1,{id:"3-\u601d\u7ef4\u94fechain-of-thought",children:(0,s.jsx)(n.strong,{children:"3. \u601d\u7ef4\u94fe\uff08Chain of Thought\uff09"})}),"\n",(0,s.jsx)(n.p,{children:"\u5982\u524d\u6240\u8ff0\uff0cGPT-4.1 \u5e76\u4e0d\u662f\u63a8\u7406\u578b\u6a21\u578b\uff0c\u4f46\u901a\u8fc7\u63d0\u793a\u8bcd\u5f15\u5bfc\u6a21\u578b\u8fdb\u884c\u4e00\u6b65\u6b65\u601d\u8003\uff08\u5373\u201c\u601d\u7ef4\u94fe/chain of thought\u201d\uff09\uff0c\u53ef\u4ee5\u6709\u6548\u5c06\u95ee\u9898\u62c6\u5206\u6210\u66f4\u6613\u5904\u7406\u7684\u6b65\u9aa4\uff0c\u9010\u4e00\u6c42\u89e3\uff0c\u4ece\u800c\u63d0\u5347\u6574\u4f53\u8f93\u51fa\u8d28\u91cf\u3002\u5f53\u7136\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4f1a\u7528\u6389\u66f4\u591a\u8f93\u51fa Token\uff0c\u56e0\u800c\u5e26\u6765\u66f4\u9ad8\u7684\u6210\u672c\u548c\u5ef6\u8fdf\u3002GPT-4.1 \u5df2\u8bad\u7ec3\u5177\u5907\u8f83\u5f3a\u7684\u667a\u80fd\u4f53\u63a8\u7406\u4e0e\u73b0\u5b9e\u95ee\u9898\u89e3\u51b3\u80fd\u529b\uff0c\u6240\u4ee5\u901a\u5e38\u65e0\u9700\u8fc7\u591a\u5f15\u5bfc\uff0c\u5373\u53ef\u83b7\u5f97\u4e0d\u9519\u7684\u63a8\u7406\u8868\u73b0\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u6211\u4eec\u63a8\u8350\u4f60\u5728\u63d0\u793a\u8bcd\u672b\u5c3e\u52a0\u5165\u4ee5\u4e0b\u57fa\u7840\u601d\u7ef4\u94fe\u6307\u4ee4\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\u2026\u2026\u9996\u5148\uff0c\u8bf7\u4e00\u6b65\u6b65\u8ba4\u771f\u601d\u8003\uff0c\u4e3a\u4e86\u56de\u7b54\u7528\u6237\u95ee\u9898\u9700\u8981\u7528\u5230\u54ea\u4e9b\u6587\u6863\u3002\u7136\u540e\uff0c\u6253\u5370\u6bcf\u4efd\u6587\u6863\u7684 TITLE \u548c ID\u3002\u6700\u540e\uff0c\u5c06\u6240\u6709 ID \u683c\u5f0f\u5316\u4e3a\u4e00\u4e2a\u5217\u8868\u3002\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u63a5\u4e0b\u6765\uff0c\u4f60\u5e94\u8be5\u7ed3\u5408\u81ea\u5df1\u7684\u6837\u4f8b\u4e0e\u8bc4\u6d4b\u7ed3\u679c\uff0c\u5bf9\u5931\u8d25\u7684\u6848\u4f8b\u8fdb\u884c\u590d\u76d8\uff0c\u5e76\u5728 prompt \u4e2d\u901a\u8fc7\u66f4\u7ec6\u5316\u7684\u6307\u4ee4\uff0c\u91cd\u70b9\u89e3\u51b3\u7cfb\u7edf\u6027\u89c4\u5212\u6216\u63a8\u7406\u4e0a\u7684\u5e38\u89c1\u95ee\u9898\u3002\u975e\u7ea6\u675f\u6027\u7684 CoT prompt \u53ef\u80fd\u4f1a\u5e26\u6765\u4e0d\u540c\u7684\u89e3\u9898\u7b56\u7565\uff1b\u5982\u679c\u4f60\u53d1\u73b0\u67d0\u79cd\u7b56\u7565\u6548\u679c\u5f88\u597d\uff0c\u53ef\u4ee5\u5c06\u5176\u5199\u5165 prompt\uff0c\u7528\u4e8e\u56fa\u5316\u601d\u8def\u3002\u5e38\u89c1\u51fa\u9519\u70b9\u4e00\u822c\u5305\u62ec\u5bf9\u7528\u6237\u610f\u56fe\u7406\u89e3\u4e0d\u591f\u3001\u4e0a\u4e0b\u6587\u6536\u96c6\u548c\u5206\u6790\u4e0d\u8db3\u3001\u6216\u9010\u6b65\u63a8\u7406\u4e0d\u5168\u9762\uff0c\u6240\u4ee5\u9700\u8981\u6709\u9488\u5bf9\u6027\u5730\u7528\u66f4\u5177\u4f53\u7684\u6307\u4ee4\u52a0\u4ee5\u5b8c\u5584\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4e0b\u9762\u662f\u4e00\u4e2a\u63d0\u793a\u8bcd\u793a\u4f8b\uff0c\u8981\u6c42\u6a21\u578b\u5728\u56de\u7b54\u524d\u66f4\u52a0\u6709\u6761\u7406\u5730\u5206\u6790\u7528\u6237\u610f\u56fe\uff0c\u5e76\u5145\u5206\u8003\u8651\u76f8\u5173\u4e0a\u4e0b\u6587\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"# Reasoning Strategy\n1. Query Analysis: Break down and analyze the query until you're confident about what it might be asking. Consider the provided context to help clarify any ambiguous or confusing information.\n2. Context Analysis: Carefully select and analyze a large set of potentially relevant documents. Optimize for recall - it's okay if some are irrelevant, but the correct documents must be in this list, otherwise your final answer will be wrong. Analysis steps for each:\n\ta. Analysis: An analysis of how it may or may not be relevant to answering the query.\n\tb. Relevance rating: [high, medium, low, none]\n3. Synthesis: summarize which documents are most relevant and why, including all documents with a relevance rating of medium or higher.\n\n# User Question\n{user_question}\n\n# External Context\n{external_context}\n\nFirst, think carefully step by step about what documents are needed to answer the query, closely adhering to the provided Reasoning Strategy. Then, print out the TITLE and ID of each document. Then, format the IDs into a list.\n"})}),"\n",(0,s.jsx)(n.h1,{id:"4-\u6307\u4ee4\u9075\u5faainstruction-following",children:(0,s.jsx)(n.strong,{children:"4. \u6307\u4ee4\u9075\u5faa\uff08Instruction Following\uff09"})}),"\n",(0,s.jsx)(n.p,{children:"GPT-4.1 \u5c55\u73b0\u51fa\u4e86\u5353\u8d8a\u7684\u6307\u4ee4\u9075\u5faa\u80fd\u529b\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u7279\u6027\uff0c\u7cbe\u51c6\u5730\u5851\u9020\u548c\u63a7\u5236\u6a21\u578b\u5728\u7279\u5b9a\u7528\u4f8b\u4e0b\u7684\u8f93\u51fa\u8868\u73b0\u3002\u5f00\u53d1\u8005\u901a\u5e38\u4f1a\u5728\u63d0\u793a\u8bcd\u4e2d\u5927\u91cf\u660e\u786e AI \u667a\u80fd\u4f53\u7684\u63a8\u7406\u6b65\u9aa4\u3001\u56de\u590d\u8bed\u6c14\u548c\u98ce\u683c\u3001\u5de5\u5177\u8c03\u7528\u4fe1\u606f\u3001\u8f93\u51fa\u683c\u5f0f\u3001\u9700\u8981\u56de\u907f\u7684\u8bdd\u9898\u7b49\u5185\u5bb9\u3002\u7531\u4e8e\u6a21\u578b\u4f1a\u66f4\u4e25\u683c\u5730\u6309\u7167\u6307\u4ee4\u6267\u884c\uff0c\u5f00\u53d1\u8005\u5728\u201c\u8be5\u505a\u201d\u548c\u201c\u4e0d\u8be5\u505a\u201d\u7684\u5185\u5bb9\u4e0a\u9700\u8981\u66f4\u660e\u786e\u7684\u8bf4\u660e\u3002\u6b64\u5916\uff0c\u4e3a\u5176\u4ed6\u6a21\u578b\u4f18\u5316\u8fc7\u7684\u63d0\u793a\u8bcd\uff0c\u53ef\u80fd\u5728 GPT-4.1 \u4e0a\u65e0\u6cd5\u76f4\u63a5\u9002\u7528\uff0c\u56e0\u4e3a\u5b83\u5bf9\u73b0\u6709\u6307\u4ee4\u7684\u9075\u5faa\u66f4\u52a0\u7cbe\u786e\uff0c\u4e0d\u518d\u50cf\u4ee5\u524d\u90a3\u6837\u80fd\u81ea\u52a8\u63a8\u65ad\u9690\u542b\u89c4\u5219\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u63a8\u8350\u5de5\u4f5c\u6d41\u7a0b",children:(0,s.jsx)(n.strong,{children:"\u63a8\u8350\u5de5\u4f5c\u6d41\u7a0b"})}),"\n",(0,s.jsx)(n.p,{children:"\u4ee5\u4e0b\u662f\u6211\u4eec\u9488\u5bf9\u5728\u63d0\u793a\u8bcd\u4e2d\u5f00\u53d1\u548c\u8c03\u8bd5\u6307\u4ee4\u7684\u63a8\u8350\u5de5\u4f5c\u6d41\u7a0b\uff1a"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"\u5148\u5199\u4e00\u4e2a\u6db5\u76d6\u6574\u4f53\u7684\u201c\u54cd\u5e94\u89c4\u5219\u201d\u6216\u201c\u6307\u4ee4\u201d\u7ae0\u8282\uff0c\u7ed9\u51fa\u603b\u4f53\u6307\u5bfc\u4ee5\u53ca\u8981\u70b9\u3002"}),"\n",(0,s.jsxs)(n.li,{children:["\u5982\u9700\u8c03\u6574\u66f4\u5177\u4f53\u7684\u884c\u4e3a\uff0c\u65b0\u589e\u76f8\u5173\u7c7b\u522b\u7684\u7ae0\u8282\uff0c\u8be6\u7ec6\u8bf4\u660e\uff0c\u6bd4\u5982 ",(0,s.jsx)(n.code,{children:"# \u6837\u4f8b\u77ed\u8bed"}),"\u3002"]}),"\n",(0,s.jsx)(n.li,{children:"\u5982\u679c\u4f60\u5e0c\u671b\u6a21\u578b\u5728\u5de5\u4f5c\u6d41\u7a0b\u4e2d\u9075\u5faa\u7279\u5b9a\u6b65\u9aa4\uff0c\u6dfb\u52a0\u6709\u5e8f\u5217\u8868\uff0c\u5e76\u660e\u786e\u8981\u6c42\u6a21\u578b\u6309\u7167\u8fd9\u4e9b\u6b65\u9aa4\u6267\u884c\u3002"}),"\n",(0,s.jsxs)(n.li,{children:["\u5982\u679c\u884c\u4e3a\u4ecd\u4e0d\u7b26\u5408\u9884\u671f\uff1a","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"\u68c0\u67e5\u662f\u5426\u5b58\u5728\u51b2\u7a81\u3001\u63cf\u8ff0\u4e0d\u660e\u6216\u9519\u8bef\u7684\u6307\u4ee4\u548c\u793a\u4f8b\u3002\u5982\u679c\u6709\u591a\u6761\u51b2\u7a81\u7684\u6307\u4ee4\uff0cGPT-4.1 \u901a\u5e38\u4f1a\u4f18\u5148\u9075\u5faa\u63d0\u793a\u8bcd\u672b\u5c3e\u7684\u90a3\u4e00\u6761\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u589e\u52a0\u80fd\u4f53\u73b0\u7406\u60f3\u884c\u4e3a\u7684\u793a\u4f8b\uff0c\u786e\u4fdd\u6240\u6709\u91cd\u8981\u884c\u4e3a\u5728\u89c4\u5219\u4e2d\u90fd\u6709\u5bf9\u5e94\u4f53\u73b0\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u4e00\u822c\u4e0d\u9700\u8981\u4f7f\u7528\u5168\u90e8\u5927\u5199\u6216\u5956\u52b1\u3001\u63d0\u793a\u7b49\u6fc0\u52b1\u65b9\u5f0f\u3002\u5efa\u8bae\u521d\u59cb\u65f6\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e9b\u624b\u6bb5\uff0c\u53ea\u6709\u5728\u786e\u6709\u9700\u8981\u7684\u60c5\u51b5\u4e0b\u518d\u8003\u8651\u3002\u6ce8\u610f\uff0c\u5982\u679c\u73b0\u6709\u63d0\u793a\u8bcd\u5305\u542b\u8fd9\u4e9b\u6280\u5de7\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4 GPT-4.1 \u5bf9\u5b83\u4eec\u8fc7\u5ea6\u5173\u6ce8\u3002"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"\u4f7f\u7528\u4f60\u559c\u6b22\u7684 AI \u9a71\u52a8 IDE \u80fd\u6709\u6548\u5730\u8fed\u4ee3\u63d0\u793a\u8bcd\uff0c\u6bd4\u5982\u68c0\u67e5\u4e00\u81f4\u6027\u6216\u51b2\u7a81\u3001\u589e\u52a0\u793a\u4f8b\uff0c\u6216\u5bf9\u6307\u4ee4\u8fdb\u884c\u7edf\u4e00\u66f4\u65b0\uff08\u5982\u65b0\u589e\u89c4\u5219\u5e76\u540c\u6b65\u5230\u6240\u6709\u76f8\u5173\u5185\u5bb9\uff09\u3002"})}),"\n",(0,s.jsx)(n.h2,{id:"\u5e38\u89c1\u6545\u969c\u6a21\u5f0f",children:(0,s.jsx)(n.strong,{children:"\u5e38\u89c1\u6545\u969c\u6a21\u5f0f"})}),"\n",(0,s.jsx)(n.p,{children:"\u8fd9\u4e9b\u95ee\u9898\u4e0d\u53ea\u5b58\u5728\u4e8e GPT-4.1\uff0c\u5217\u4e3e\u5982\u4e0b\u4ee5\u65b9\u4fbf\u8c03\u8bd5\u548c\u89c4\u907f\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u5f3a\u5236\u6a21\u578b\u201c\u59cb\u7ec8\u201d\u6267\u884c\u67d0\u9879\u884c\u4e3a\uff0c\u6709\u65f6\u4f1a\u5e26\u6765\u526f\u4f5c\u7528\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8ba9 AI \u667a\u80fd\u4f53\u201c\u5728\u56de\u590d\u7528\u6237\u524d\u5fc5\u987b\u8c03\u7528\u5de5\u5177\u201d\uff0c\u6a21\u578b\u53ef\u80fd\u4f1a\u51ed\u7a7a\u751f\u6210\u5de5\u5177\u8f93\u5165\uff0c\u6216\u5728\u4fe1\u606f\u4e0d\u8db3\u65f6\u7528\u7a7a\u53c2\u6570\u8c03\u7528\u5de5\u5177\u3002\u52a0\u5165\u201c\u5982\u679c\u4fe1\u606f\u4e0d\u8db3\u4ee5\u8c03\u7528\u5de5\u5177\uff0c\u8bf7\u5411\u7528\u6237\u8865\u5145\u8be2\u95ee\u201d\u8fd9\u7c7b\u6307\u4ee4\u53ef\u4ee5\u7f13\u89e3\u8be5\u95ee\u9898\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u63d0\u4f9b\u8303\u4f8b\u77ed\u8bed\u540e\uff0c\u6a21\u578b\u53ef\u80fd\u76f4\u63a5\u9010\u5b57\u4f7f\u7528\u8fd9\u4e9b\u4f8b\u53e5\uff0c\u8ba9\u56de\u590d\u663e\u5f97\u91cd\u590d\u3002\u53ef\u5728\u6307\u4ee4\u4e2d\u52a0\u5165\u201c\u9002\u5f53\u53d8\u6362\u63aa\u8f9e\u201d\u7b49\u8bf4\u660e\u6765\u51cf\u5c11\u91cd\u590d\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u7f3a\u4e4f\u5177\u4f53\u6307\u4ee4\u65f6\uff0c\u90e8\u5206\u6a21\u578b\u53ef\u80fd\u4f1a\u989d\u5916\u5199\u5f88\u591a\u89e3\u91ca\u6027\u6587\u5b57\uff0c\u6216\u8005\u8f93\u51fa\u8fc7\u591a\u683c\u5f0f\u5316\u5185\u5bb9\u3002\u901a\u8fc7\u660e\u786e\u6307\u4ee4\u5e76\u6dfb\u52a0\u793a\u4f8b\uff0c\u53ef\u6709\u6548\u51cf\u5c11\u8fd9\u79cd\u60c5\u51b5\u3002"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"\u793a\u4f8b\u63d0\u793a\u8bcd\u5ba2\u6237\u670d\u52a1",children:(0,s.jsx)(n.strong,{children:"\u793a\u4f8b\u63d0\u793a\u8bcd\uff1a\u5ba2\u6237\u670d\u52a1"})}),"\n",(0,s.jsx)(n.p,{children:"\u672c\u4f8b\u5c55\u793a\u4e86\u4e3a\u865a\u62df\u5ba2\u6237\u670d\u52a1 AI \u667a\u80fd\u4f53\u8bbe\u8ba1\u7684\u6700\u4f73\u5b9e\u8df5\u63d0\u793a\u8bcd\u3002\u5176\u89c4\u5219\u4e30\u5bcc\u3001\u6761\u7406\u5206\u660e\uff0c\u5e76\u9488\u5bf9\u4e0d\u540c\u5185\u5bb9\u8bbe\u7f6e\u4e86\u4e13\u9879\u7ec6\u5219\uff0c\u8fd8\u901a\u8fc7\u793a\u4f8b\u6765\u5448\u73b0\u5168\u90e8\u89c4\u5219\u7684\u5e94\u7528\u7ec6\u8282\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u8fd0\u884c\u4e0b\u65b9\u7684 notebook \u5355\u5143\u683c\u2014\u2014\u4f60\u4f1a\u770b\u5230\u4e00\u6761\u7528\u6237\u6d88\u606f\u4ee5\u53ca\u4e00\u6b21\u5de5\u5177\u8c03\u7528\u3002\u7528\u6237\u6d88\u606f\u4f1a\u4ee5\u95ee\u5019\u5f00\u5934\uff0c\u7136\u540e\u590d\u8ff0\u5176\u56de\u7b54\uff0c\u5e76\u63d0\u5230\u5373\u5c06\u8c03\u7528\u5de5\u5177\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u6307\u4ee4\uff0c\u8c03\u6574\u6a21\u578b\u7684\u5177\u4f53\u8868\u73b0\uff0c\u6216\u8005\u5c1d\u8bd5\u8f93\u5165\u4e0d\u540c\u7684\u7528\u6237\u6d88\u606f\uff0c\u68c0\u9a8c\u6307\u4ee4\u7684\u6267\u884c\u6548\u679c\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'SYS_PROMPT_CUSTOMER_SERVICE = """You are a helpful customer service agent working for NewTelco, helping a user efficiently fulfill their request while adhering closely to provided guidelines.\n\n# Instructions\n- Always greet the user with "Hi, you\'ve reached NewTelco, how can I help you?"\n- Always call a tool before answering factual questions about the company, its offerings or products, or a user\'s account. Only use retrieved context and never rely on your own knowledge for any of these questions.\n    - However, if you don\'t have enough information to properly call the tool, ask the user for the information you need.\n- Escalate to a human if the user requests.\n- Do not discuss prohibited topics (politics, religion, controversial current events, medical, legal, or financial advice, personal conversations, internal company operations, or criticism of any people or company).\n- Rely on sample phrases whenever appropriate, but never repeat a sample phrase in the same conversation. Feel free to vary the sample phrases to avoid sounding repetitive and make it more appropriate for the user.\n- Always follow the provided output format for new messages, including citations for any factual statements from retrieved policy documents.\n- If you\'re going to call a tool, always message the user with an appropriate message before and after calling the tool.\n- Maintain a professional and concise tone in all responses, and use emojis between sentences.\n- If you\'ve resolved the user\'s request, ask if there\'s anything else you can help with\n\n# Precise Response Steps (for each response)\n1. If necessary, call tools to fulfill the user\'s desired action. Always message the user before and after calling a tool to keep them in the loop.\n2. In your response to the user\n    a. Use active listening and echo back what you heard the user ask for.\n    b. Respond appropriately given the above guidelines.\n\n# Sample Phrases\n## Deflecting a Prohibited Topic\n- "I\'m sorry, but I\'m unable to discuss that topic. Is there something else I can help you with?"\n- "That\'s not something I\'m able to provide information on, but I\'m happy to help with any other questions you may have."\n\n## Before calling a tool\n- "To help you with that, I\'ll just need to verify your information."\n- "Let me check that for you\u2014one moment, please."\n- "I\'ll retrieve the latest details for you now."\n\n## After calling a tool\n- "Okay, here\'s what I found: [response]"\n- "So here\'s what I found: [response]"\n\n# Output Format\n- Always include your final response to the user.\n- When providing factual information from retrieved context, always include citations immediately after the relevant statement(s). Use the following citation format:\n    - For a single source: [NAME](ID)\n    - For multiple sources: [NAME](ID), [NAME](ID)\n- Only provide information about this company, its policies, its products, or the customer\'s account, and only if it is based on information provided in context. Do not answer questions outside this scope.\n\n# Example\n## User\nCan you tell me about your family plan options?\n\n## Assistant Response 1\n### Message\n"Hi, you\'ve reached NewTelco, how can I help you? \ud83d\ude0a\ud83c\udf89\\n\\nYou\'d like to know about our family plan options. \ud83e\udd1d Let me check that for you\u2014one moment, please. \ud83d\ude80"\n\n### Tool Calls\nlookup_policy_document(topic="family plan options")\n\n// After tool call, the assistant would follow up with:\n\n## Assistant Response 2 (after tool call)\n### Message\n"Okay, here\'s what I found: \ud83c\udf89 Our family plan allows up to 5 lines with shared data and a 10% discount for each additional line [Family Plan Policy](ID-010). \ud83d\udcf1 Is there anything else I can help you with today? \ud83d\ude0a"\n"""\n\nget_policy_doc = {\n    "type": "function",\n    "name": "lookup_policy_document",\n    "description": "Tool to look up internal documents and policies by topic or keyword.",\n    "parameters": {\n        "strict": True,\n        "type": "object",\n        "properties": {\n            "topic": {\n                "type": "string",\n                "description": "The topic or keyword to search for in company policies or documents.",\n            },\n        },\n        "required": ["topic"],\n        "additionalProperties": False,\n    },\n}\n\nget_user_acct = {\n    "type": "function",\n    "name": "get_user_account_info",\n    "description": "Tool to get user account information",\n    "parameters": {\n        "strict": True,\n        "type": "object",\n        "properties": {\n            "phone_number": {\n                "type": "string",\n                "description": "Formatted as \'(xxx) xxx-xxxx\'",\n            },\n        },\n        "required": ["phone_number"],\n        "additionalProperties": False,\n    },\n}\n\nresponse = client.responses.create(\n    instructions=SYS_PROMPT_CUSTOMER_SERVICE,\n    model="gpt-4.1-2025-04-14",\n    tools=[get_policy_doc, get_user_acct],\n    input="How much will it cost for international service? I\'m traveling to France.",\n    # input="Why was my last bill so high?"\n)\n\nresponse.to_dict()["output"]\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:"[{'id': 'msg_67fe92d431548191b7ca6cd604b4784b06efc5beb16b3c5e',\n  'content': [{'annotations': [],\n    'text': \"Hi, you've reached NewTelco, how can I help you? \ud83c\udf0d\u2708\ufe0f\\n\\nYou'd like to know the cost of international service while traveling to France. \ud83c\uddeb\ud83c\uddf7 Let me check the latest details for you\u2014one moment, please. \ud83d\udd51\",\n    'type': 'output_text'}],\n  'role': 'assistant',\n  'status': 'completed',\n  'type': 'message'},\n {'arguments': '{\"topic\":\"international service cost France\"}',\n  'call_id': 'call_cF63DLeyhNhwfdyME3ZHd0yo',\n  'name': 'lookup_policy_document',\n  'type': 'function_call',\n  'id': 'fc_67fe92d5d6888191b6cd7cf57f707e4606efc5beb16b3c5e',\n  'status': 'completed'}]\n"})}),"\n",(0,s.jsx)(n.h1,{id:"5-\u5e38\u89c4\u63d0\u793a\u4e0e\u5efa\u8baegeneral-advice",children:(0,s.jsx)(n.strong,{children:"5. \u5e38\u89c4\u63d0\u793a\u4e0e\u5efa\u8bae\uff08General Advice\uff09"})}),"\n",(0,s.jsx)(n.h2,{id:"\u63a8\u8350\u63d0\u793a\u8bcd\u7ed3\u6784",children:(0,s.jsx)(n.strong,{children:"\u63a8\u8350\u63d0\u793a\u8bcd\u7ed3\u6784"})}),"\n",(0,s.jsx)(n.p,{children:"\u4f5c\u4e3a\u53c2\u8003\uff0c\u4e0b\u9762\u63d0\u4f9b\u4e00\u4e2a\u5efa\u8bae\u7684\u63d0\u793a\u8bcd\u7ed3\u6784\u8d77\u70b9\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Role and Objective\n\n# Instructions\n\n## Sub-categories for more detailed instructions\n\n# Reasoning Steps\n\n# Output Format\n\n# Examples\n## Example 1\n\n# Context\n\n# Final instructions and prompt to think step by step\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u53ef\u4ee5\u6309\u9700\u6c42\u62c6\u5206\u5408\u5e76\u3001\u53cd\u590d\u5b9e\u9a8c\uff0c\u627e\u5230\u6700\u9002\u5408\u4f60\u4e1a\u52a1\u573a\u666f\u7684\u7ed3\u6784\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u5206\u9694\u7b26delimiter",children:(0,s.jsx)(n.strong,{children:"\u5206\u9694\u7b26\uff08Delimiter\uff09"})}),"\n",(0,s.jsx)(n.p,{children:"\u4ee5\u4e0b\u662f\u4e3a\u4f60\u7684\u63d0\u793a\u8bcd\u9009\u62e9\u6700\u4f73\u5206\u9694\u7b26\u7684\u4e00\u4e9b\u901a\u7528\u5efa\u8bae\u3002\u9488\u5bf9\u957f\u4e0a\u4e0b\u6587\u7c7b\u578b\u7684\u7279\u6b8a\u9700\u6c42\uff0c\u8bf7\u53c2\u8003\u201c\u957f\u4e0a\u4e0b\u6587\u201d\u90e8\u5206\u7684\u989d\u5916\u8bf4\u660e\u3002"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Markdown\uff1a\u63a8\u8350\u4f18\u5148\u4f7f\u7528\u3002\u7528 markdown \u6807\u9898\u5212\u5206\u4e3b\u8981\u5185\u5bb9\u548c\u5404\u7ea7\u5b50\u5185\u5bb9\uff08\u53ef\u4ee5\u5206\u7ea7\u5230 H4 \u751a\u81f3\u66f4\u6df1\uff09\u3002\u4ee3\u7801\u5efa\u8bae\u7528\u5185\u8054\u53cd\u5f15\u53f7\u6216\u4ee3\u7801\u5757\u5305\u88f9\uff0c\u5217\u8868\u4f7f\u7528\u6807\u51c6\u7f16\u53f7\u6216\u70b9\u53f7\u5217\u8868\u3002"}),"\n",(0,s.jsx)(n.li,{children:"XML\uff1a\u8fd9\u79cd\u683c\u5f0f\u540c\u6837\u6548\u679c\u5f88\u597d\u3002\u6211\u4eec\u5df2\u4f18\u5316\u6a21\u578b\u5bf9 XML \u4fe1\u606f\u7684\u8bc6\u522b\u548c\u9075\u5faa\u3002XML \u9002\u5408\u7cbe\u786e\u5305\u88f9\u72ec\u7acb\u533a\u5757\uff08\u5305\u542b\u8d77\u6b62\u6807\u7b7e\uff09\uff0c\u53ef\u4ee5\u5728\u6807\u7b7e\u5185\u6dfb\u52a0\u5143\u6570\u636e\u3001\u65b9\u4fbf\u5185\u5bb9\u5d4c\u5957\u3002\u5982\u4e0b\u662f\u4e00\u4e2a\u5728\u793a\u4f8b\u90e8\u5206\u7528 XML \u5d4c\u5957\u8f93\u5165/\u8f93\u51fa\u7684\u4f8b\u5b50\uff1a"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'<examples>\n<example1 type="Abbreviate">\n<input>San Francisco</input>\n<output>- SF</output>\n</example1>\n</examples>\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"JSON\uff1a\u7ed3\u6784\u5316\u5f88\u5f3a\uff0c\u5728\u7f16\u7801\u76f8\u5173\u573a\u666f\u4e0b\u6a21\u578b\u7406\u89e3\u80fd\u529b\u5f88\u597d\u3002\u4f46 JSON \u504f\u5197\u957f\uff0c\u5e76\u9700\u8981\u5b57\u7b26\u8f6c\u4e49\uff0c\u4f1a\u589e\u52a0\u4e00\u5b9a\u590d\u6742\u5ea6\u3002"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u5f53\u4f60\u9700\u8981\u5c06\u5927\u91cf\u6587\u6863\u6216\u6587\u4ef6\u6dfb\u52a0\u5230\u8f93\u5165\u4e0a\u4e0b\u6587\u65f6\uff0c\u5efa\u8bae\u53c2\u8003\u4ee5\u4e0b\u505a\u6cd5\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["XML \u683c\u5f0f\u5728\u6211\u4eec\u7684\u957f\u4e0a\u4e0b\u6587\u6d4b\u8bd5\u4e2d\u8868\u73b0\u975e\u5e38\u597d\u3002","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u793a\u4f8b\uff1a",(0,s.jsx)(n.code,{children:"<doc id='1' title='The Fox'>The quick brown fox jumps over the lazy dog</doc>"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Lee \u7b49\u4eba\u63d0\u51fa\u7684\u8fd9\u79cd\u6587\u672c\u5206\u9694\u683c\u5f0f\uff08",(0,s.jsx)(n.strong,{children:"ref"}),"\uff09\uff0c\u5728\u957f\u4e0a\u4e0b\u6587\u6d4b\u8bd5\u4e2d\u540c\u6837\u6548\u679c\u4e0d\u9519\u3002","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u793a\u4f8b\uff1a",(0,s.jsx)(n.code,{children:"ID: 1 | TITLE: The Fox | CONTENT: The quick brown fox jumps over the lazy dog"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["JSON \u683c\u5f0f\u8868\u73b0\u76f8\u5bf9\u8f83\u5dee\u3002","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u793a\u4f8b\uff1a",(0,s.jsx)(n.code,{children:"[{'id': 1, 'title': 'The Fox', 'content': 'The quick brown fox jumped over the lazy dog'}]"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"GPT-4.1 \u5df2\u7ecf\u8fc7\u8bad\u7ec3\uff0c\u80fd\u591f\u7a33\u5065\u8bc6\u522b\u591a\u79cd\u4e0d\u540c\u683c\u5f0f\u7684\u7ed3\u6784\u3002\u603b\u4f53\u5efa\u8bae\u4f60\u7ed3\u5408\u5b9e\u9645\u4efb\u52a1\u505a\u5224\u65ad\uff0c\u9009\u62e9\u90a3\u79cd\u8ba9\u5173\u952e\u4fe1\u606f\u6700\u6e05\u6670\u3001\u6700\u80fd\u201c\u7a81\u51fa\u201d\u5728\u6a21\u578b\u89c6\u91ce\u4e2d\u7684\u683c\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684\u539f\u59cb\u5185\u5bb9\u4e2d\u672c\u8eab\u5305\u542b\u5927\u91cf XML\uff0c\u518d\u91c7\u7528 XML \u4f5c\u4e3a\u5206\u9694\uff0c\u53ef\u80fd\u53cd\u800c\u4e0d\u5229\u4e8e\u6a21\u578b\u51c6\u786e\u63d0\u53d6\u5173\u952e\u4fe1\u606f\uff0c\u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u9009\u62e9\u5176\u4ed6\u5206\u9694\u65b9\u5f0f\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u6ce8\u610f\u4e8b\u9879",children:(0,s.jsx)(n.strong,{children:"\u6ce8\u610f\u4e8b\u9879"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"\u5728\u4e00\u4e9b\u5b64\u7acb\u7684\u6848\u4f8b\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u6a21\u578b\u53ef\u80fd\u4e0d\u613f\u610f\u751f\u6210\u975e\u5e38\u957f\u4e14\u91cd\u590d\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9010\u4e00\u5206\u6790\u6570\u767e\u4e2a\u9879\u76ee\u3002\u5982\u679c\u4f60\u7684\u4f7f\u7528\u573a\u666f\u9700\u8981\u8fd9\u6837\u7684\u8f93\u51fa\uff0c\u8bf7\u52a1\u5fc5\u5bf9\u6a21\u578b\u505a\u51fa\u660e\u786e\u6307\u4ee4\uff0c\u8981\u6c42\u5176\u5b8c\u6574\u8f93\u51fa\u6240\u6709\u4fe1\u606f\uff0c\u5e76\u5efa\u8bae\u5c06\u95ee\u9898\u62c6\u5206\uff0c\u6216\u8005\u91c7\u7528\u66f4\u7b80\u6d01\u7684\u65b9\u5f0f\u6765\u5904\u7406\u3002"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["\u6211\u4eec\u4e5f\u9047\u5230\u8fc7\u5e76\u884c\u5de5\u5177\u8c03\u7528\u51fa\u73b0\u9519\u8bef\u7684\u6781\u5c11\u6570\u60c5\u51b5\u3002\u5efa\u8bae\u5bf9\u8fd9\u7c7b\u8c03\u7528\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5982\u679c\u53d1\u73b0\u95ee\u9898\uff0c\u53ef\u4ee5\u8003\u8651\u5c06 ",(0,s.jsx)(n.strong,{children:"parallel_tool_calls"})," \u53c2\u6570\u8bbe\u4e3a false\u3002"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"\u9644\u5f55\u751f\u6210\u4e0e\u5e94\u7528\u6587\u4ef6\u5dee\u5f02diff",children:(0,s.jsx)(n.strong,{children:"\u9644\u5f55\uff1a\u751f\u6210\u4e0e\u5e94\u7528\u6587\u4ef6\u5dee\u5f02\uff08diff\uff09"})}),"\n",(0,s.jsx)(n.p,{children:"\u5f00\u53d1\u8005\u5411\u6211\u4eec\u53cd\u9988\uff0c\u51c6\u786e\u4e14\u683c\u5f0f\u826f\u597d\u7684 diff \u751f\u6210\u80fd\u529b\u5bf9\u4e8e\u652f\u6301\u7f16\u7801\u76f8\u5173\u4efb\u52a1\u81f3\u5173\u91cd\u8981\u3002\u4e3a\u6b64\uff0cGPT-4.1 \u7cfb\u5217\u5728 diff \u65b9\u9762\u76f8\u8f83\u4e8e\u4ee5\u5f80\u7684 GPT \u6a21\u578b\u6709\u4e86\u663e\u8457\u63d0\u5347\u3002\u6b64\u5916\uff0c\u867d\u7136 GPT-4.1 \u5728\u6839\u636e\u6e05\u6670\u7684\u6307\u4ee4\u548c\u793a\u4f8b\u751f\u6210\u4efb\u4f55\u683c\u5f0f\u7684 diff \u65f6\u8868\u73b0\u90fd\u5f88\u51fa\u8272\uff0c\u6211\u4eec\u5728\u6b64\u5f00\u6e90\u4e86\u4e00\u4e2a\u63a8\u8350\u7684 diff \u683c\u5f0f\uff0c\u6a21\u578b\u4e5f\u9488\u5bf9\u8be5\u683c\u5f0f\u8fdb\u884c\u4e86\u5927\u91cf\u8bad\u7ec3\u3002\u6211\u4eec\u5e0c\u671b\uff0c\u8fd9\u80fd\u591f\u5e2e\u52a9\u521a\u5165\u95e8\u7684\u5f00\u53d1\u8005\uff0c\u51cf\u5c11\u5728\u81ea\u884c\u521b\u5efa diff \u8fc7\u7a0b\u4e2d\u7684\u8bd5\u9519\u548c\u731c\u6d4b\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u5e94\u7528\u8865\u4e01",children:(0,s.jsx)(n.strong,{children:"\u5e94\u7528\u8865\u4e01"})}),"\n",(0,s.jsx)(n.p,{children:"\u8bf7\u53c2\u8003\u4e0b\u65b9\u793a\u4f8b\uff0c\u4e86\u89e3\u5982\u4f55\u7528\u63d0\u793a\u8bcd\u6b63\u786e\u8c03\u7528\u6211\u4eec\u63a8\u8350\u7684\u5de5\u5177\u8fdb\u884c\u8865\u4e01\u5e94\u7528\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'APPLY_PATCH_TOOL_DESC = """This is a custom utility that makes it more convenient to add, remove, move, or edit code files. `apply_patch` effectively allows you to execute a diff/patch against a file, but the format of the diff specification is unique to this task, so pay careful attention to these instructions. To use the `apply_patch` command, you should pass a message of the following structure as "input":\n\n%%bash\napply_patch <<"EOF"\n*** Begin Patch\n[YOUR_PATCH]\n*** End Patch\nEOF\n\nWhere [YOUR_PATCH] is the actual content of your patch, specified in the following V4A diff format.\n\n*** [ACTION] File: [path/to/file] -> ACTION can be one of Add, Update, or Delete.\nFor each snippet of code that needs to be changed, repeat the following:\n[context_before] -> See below for further instructions on context.\n- [old_code] -> Precede the old code with a minus sign.\n+ [new_code] -> Precede the new, replacement code with a plus sign.\n[context_after] -> See below for further instructions on context.\n\nFor instructions on [context_before] and [context_after]:\n- By default, show 3 lines of code immediately above and 3 lines immediately below each change. If a change is within 3 lines of a previous change, do NOT duplicate the first change\u2019s [context_after] lines in the second change\u2019s [context_before] lines.\n- If 3 lines of context is insufficient to uniquely identify the snippet of code within the file, use the @@ operator to indicate the class or function to which the snippet belongs. For instance, we might have:\n@@ class BaseClass\n[3 lines of pre-context]\n- [old_code]\n+ [new_code]\n[3 lines of post-context]\n\n- If a code block is repeated so many times in a class or function such that even a single @@ statement and 3 lines of context cannot uniquely identify the snippet of code, you can use multiple `@@` statements to jump to the right context. For instance:\n\n@@ class BaseClass\n@@ \tdef method():\n[3 lines of pre-context]\n- [old_code]\n+ [new_code]\n[3 lines of post-context]\n\nNote, then, that we do not use line numbers in this diff format, as the context is enough to uniquely identify code. An example of a message that you might pass as "input" to this function, in order to apply a patch, is shown below.\n\n%%bash\napply_patch <<"EOF"\n*** Begin Patch\n*** Update File: pygorithm/searching/binary_search.py\n@@ class BaseClass\n@@     def search():\n-          pass\n+          raise NotImplementedError()\n\n@@ class Subclass\n@@     def search():\n-          pass\n+          raise NotImplementedError()\n\n*** End Patch\nEOF\n"""\n\nAPPLY_PATCH_TOOL = {\n    "name": "apply_patch",\n    "description": APPLY_PATCH_TOOL_DESC,\n    "parameters": {\n        "type": "object",\n        "properties": {\n            "input": {\n                "type": "string",\n                "description": " The apply_patch command that you wish to execute.",\n            }\n        },\n        "required": ["input"],\n    },\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u53c2\u8003\u5b9e\u73b0apply_patchpy",children:(0,s.jsx)(n.strong,{children:"\u53c2\u8003\u5b9e\u73b0\uff1aapply_patch.py"})}),"\n",(0,s.jsxs)(n.p,{children:["\u8fd9\u662f\u6211\u4eec\u7528\u4e8e\u6a21\u578b\u8bad\u7ec3\u7684 apply_patch \u5de5\u5177\u7684\u53c2\u8003\u5b9e\u73b0\u3002\u4f60\u9700\u8981\u5c06\u5176\u8bbe\u7f6e\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5e76\u786e\u4fdd\u5728\u6a21\u578b\u8fd0\u884c\u547d\u4ee4\u7684 shell \u73af\u5883\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7 ",(0,s.jsx)(n.code,{children:"apply_patch"})," \u8fd9\u4e2a\u540d\u79f0\u6765\u8c03\u7528\u8be5\u5de5\u5177\u3002"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\n\n"""\nA self-contained **pure-Python 3.9+** utility for applying human-readable\n\u201cpseudo-diff\u201d patch files to a collection of text files.\n"""\n\nfrom __future__ import annotations\n\nimport pathlib\nfrom dataclasses import dataclass, field\nfrom enum import Enum\nfrom typing import (\n    Callable,\n    Dict,\n    List,\n    Optional,\n    Tuple,\n    Union,\n)\n\n\n# --------------------------------------------------------------------------- #\n#  Domain objects\n# --------------------------------------------------------------------------- #\nclass ActionType(str, Enum):\n    ADD = "add"\n    DELETE = "delete"\n    UPDATE = "update"\n\n\n@dataclass\nclass FileChange:\n    type: ActionType\n    old_content: Optional[str] = None\n    new_content: Optional[str] = None\n    move_path: Optional[str] = None\n\n\n@dataclass\nclass Commit:\n    changes: Dict[str, FileChange] = field(default_factory=dict)\n\n\n# --------------------------------------------------------------------------- #\n#  Exceptions\n# --------------------------------------------------------------------------- #\nclass DiffError(ValueError):\n    """Any problem detected while parsing or applying a patch."""\n\n\n# --------------------------------------------------------------------------- #\n#  Helper dataclasses used while parsing patches\n# --------------------------------------------------------------------------- #\n@dataclass\nclass Chunk:\n    orig_index: int = -1\n    del_lines: List[str] = field(default_factory=list)\n    ins_lines: List[str] = field(default_factory=list)\n\n\n@dataclass\nclass PatchAction:\n    type: ActionType\n    new_file: Optional[str] = None\n    chunks: List[Chunk] = field(default_factory=list)\n    move_path: Optional[str] = None\n\n\n@dataclass\nclass Patch:\n    actions: Dict[str, PatchAction] = field(default_factory=dict)\n\n\n# --------------------------------------------------------------------------- #\n#  Patch text parser\n# --------------------------------------------------------------------------- #\n@dataclass\nclass Parser:\n    current_files: Dict[str, str]\n    lines: List[str]\n    index: int = 0\n    patch: Patch = field(default_factory=Patch)\n    fuzz: int = 0\n\n    # ------------- low-level helpers -------------------------------------- #\n    def _cur_line(self) -> str:\n        if self.index >= len(self.lines):\n            raise DiffError("Unexpected end of input while parsing patch")\n        return self.lines[self.index]\n\n    @staticmethod\n    def _norm(line: str) -> str:\n        """Strip CR so comparisons work for both LF and CRLF input."""\n        return line.rstrip("\\r")\n\n    # ------------- scanning convenience ----------------------------------- #\n    def is_done(self, prefixes: Optional[Tuple[str, ...]] = None) -> bool:\n        if self.index >= len(self.lines):\n            return True\n        if (\n            prefixes\n            and len(prefixes) > 0\n            and self._norm(self._cur_line()).startswith(prefixes)\n        ):\n            return True\n        return False\n\n    def startswith(self, prefix: Union[str, Tuple[str, ...]]) -> bool:\n        return self._norm(self._cur_line()).startswith(prefix)\n\n    def read_str(self, prefix: str) -> str:\n        """\n        Consume the current line if it starts with *prefix* and return the text\n        **after** the prefix.  Raises if prefix is empty.\n        """\n        if prefix == "":\n            raise ValueError("read_str() requires a non-empty prefix")\n        if self._norm(self._cur_line()).startswith(prefix):\n            text = self._cur_line()[len(prefix) :]\n            self.index += 1\n            return text\n        return ""\n\n    def read_line(self) -> str:\n        """Return the current raw line and advance."""\n        line = self._cur_line()\n        self.index += 1\n        return line\n\n    # ------------- public entry point -------------------------------------- #\n    def parse(self) -> None:\n        while not self.is_done(("*** End Patch",)):\n            # ---------- UPDATE ---------- #\n            path = self.read_str("*** Update File: ")\n            if path:\n                if path in self.patch.actions:\n                    raise DiffError(f"Duplicate update for file: {path}")\n                move_to = self.read_str("*** Move to: ")\n                if path not in self.current_files:\n                    raise DiffError(f"Update File Error - missing file: {path}")\n                text = self.current_files[path]\n                action = self._parse_update_file(text)\n                action.move_path = move_to or None\n                self.patch.actions[path] = action\n                continue\n\n            # ---------- DELETE ---------- #\n            path = self.read_str("*** Delete File: ")\n            if path:\n                if path in self.patch.actions:\n                    raise DiffError(f"Duplicate delete for file: {path}")\n                if path not in self.current_files:\n                    raise DiffError(f"Delete File Error - missing file: {path}")\n                self.patch.actions[path] = PatchAction(type=ActionType.DELETE)\n                continue\n\n            # ---------- ADD ---------- #\n            path = self.read_str("*** Add File: ")\n            if path:\n                if path in self.patch.actions:\n                    raise DiffError(f"Duplicate add for file: {path}")\n                if path in self.current_files:\n                    raise DiffError(f"Add File Error - file already exists: {path}")\n                self.patch.actions[path] = self._parse_add_file()\n                continue\n\n            raise DiffError(f"Unknown line while parsing: {self._cur_line()}")\n\n        if not self.startswith("*** End Patch"):\n            raise DiffError("Missing *** End Patch sentinel")\n        self.index += 1  # consume sentinel\n\n    # ------------- section parsers ---------------------------------------- #\n    def _parse_update_file(self, text: str) -> PatchAction:\n        action = PatchAction(type=ActionType.UPDATE)\n        lines = text.split("\\n")\n        index = 0\n        while not self.is_done(\n            (\n                "*** End Patch",\n                "*** Update File:",\n                "*** Delete File:",\n                "*** Add File:",\n                "*** End of File",\n            )\n        ):\n            def_str = self.read_str("@@ ")\n            section_str = ""\n            if not def_str and self._norm(self._cur_line()) == "@@":\n                section_str = self.read_line()\n\n            if not (def_str or section_str or index == 0):\n                raise DiffError(f"Invalid line in update section:\\n{self._cur_line()}")\n\n            if def_str.strip():\n                found = False\n                if def_str not in lines[:index]:\n                    for i, s in enumerate(lines[index:], index):\n                        if s == def_str:\n                            index = i + 1\n                            found = True\n                            break\n                if not found and def_str.strip() not in [\n                    s.strip() for s in lines[:index]\n                ]:\n                    for i, s in enumerate(lines[index:], index):\n                        if s.strip() == def_str.strip():\n                            index = i + 1\n                            self.fuzz += 1\n                            found = True\n                            break\n\n            next_ctx, chunks, end_idx, eof = peek_next_section(self.lines, self.index)\n            new_index, fuzz = find_context(lines, next_ctx, index, eof)\n            if new_index == -1:\n                ctx_txt = "\\n".join(next_ctx)\n                raise DiffError(\n                    f"Invalid {\'EOF \' if eof else \'\'}context at {index}:\\n{ctx_txt}"\n                )\n            self.fuzz += fuzz\n            for ch in chunks:\n                ch.orig_index += new_index\n                action.chunks.append(ch)\n            index = new_index + len(next_ctx)\n            self.index = end_idx\n        return action\n\n    def _parse_add_file(self) -> PatchAction:\n        lines: List[str] = []\n        while not self.is_done(\n            ("*** End Patch", "*** Update File:", "*** Delete File:", "*** Add File:")\n        ):\n            s = self.read_line()\n            if not s.startswith("+"):\n                raise DiffError(f"Invalid Add File line (missing \'+\'): {s}")\n            lines.append(s[1:])  # strip leading \'+\'\n        return PatchAction(type=ActionType.ADD, new_file="\\n".join(lines))\n\n\n# --------------------------------------------------------------------------- #\n#  Helper functions\n# --------------------------------------------------------------------------- #\ndef find_context_core(\n    lines: List[str], context: List[str], start: int\n) -> Tuple[int, int]:\n    if not context:\n        return start, 0\n\n    for i in range(start, len(lines)):\n        if lines[i : i + len(context)] == context:\n            return i, 0\n    for i in range(start, len(lines)):\n        if [s.rstrip() for s in lines[i : i + len(context)]] == [\n            s.rstrip() for s in context\n        ]:\n            return i, 1\n    for i in range(start, len(lines)):\n        if [s.strip() for s in lines[i : i + len(context)]] == [\n            s.strip() for s in context\n        ]:\n            return i, 100\n    return -1, 0\n\n\ndef find_context(\n    lines: List[str], context: List[str], start: int, eof: bool\n) -> Tuple[int, int]:\n    if eof:\n        new_index, fuzz = find_context_core(lines, context, len(lines) - len(context))\n        if new_index != -1:\n            return new_index, fuzz\n        new_index, fuzz = find_context_core(lines, context, start)\n        return new_index, fuzz + 10_000\n    return find_context_core(lines, context, start)\n\n\ndef peek_next_section(\n    lines: List[str], index: int\n) -> Tuple[List[str], List[Chunk], int, bool]:\n    old: List[str] = []\n    del_lines: List[str] = []\n    ins_lines: List[str] = []\n    chunks: List[Chunk] = []\n    mode = "keep"\n    orig_index = index\n\n    while index < len(lines):\n        s = lines[index]\n        if s.startswith(\n            (\n                "@@",\n                "*** End Patch",\n                "*** Update File:",\n                "*** Delete File:",\n                "*** Add File:",\n                "*** End of File",\n            )\n        ):\n            break\n        if s == "***":\n            break\n        if s.startswith("***"):\n            raise DiffError(f"Invalid Line: {s}")\n        index += 1\n\n        last_mode = mode\n        if s == "":\n            s = " "\n        if s[0] == "+":\n            mode = "add"\n        elif s[0] == "-":\n            mode = "delete"\n        elif s[0] == " ":\n            mode = "keep"\n        else:\n            raise DiffError(f"Invalid Line: {s}")\n        s = s[1:]\n\n        if mode == "keep" and last_mode != mode:\n            if ins_lines or del_lines:\n                chunks.append(\n                    Chunk(\n                        orig_index=len(old) - len(del_lines),\n                        del_lines=del_lines,\n                        ins_lines=ins_lines,\n                    )\n                )\n            del_lines, ins_lines = [], []\n\n        if mode == "delete":\n            del_lines.append(s)\n            old.append(s)\n        elif mode == "add":\n            ins_lines.append(s)\n        elif mode == "keep":\n            old.append(s)\n\n    if ins_lines or del_lines:\n        chunks.append(\n            Chunk(\n                orig_index=len(old) - len(del_lines),\n                del_lines=del_lines,\n                ins_lines=ins_lines,\n            )\n        )\n\n    if index < len(lines) and lines[index] == "*** End of File":\n        index += 1\n        return old, chunks, index, True\n\n    if index == orig_index:\n        raise DiffError("Nothing in this section")\n    return old, chunks, index, False\n\n\n# --------------------------------------------------------------------------- #\n#  Patch \u2192 Commit and Commit application\n# --------------------------------------------------------------------------- #\ndef _get_updated_file(text: str, action: PatchAction, path: str) -> str:\n    if action.type is not ActionType.UPDATE:\n        raise DiffError("_get_updated_file called with non-update action")\n    orig_lines = text.split("\\n")\n    dest_lines: List[str] = []\n    orig_index = 0\n\n    for chunk in action.chunks:\n        if chunk.orig_index > len(orig_lines):\n            raise DiffError(\n                f"{path}: chunk.orig_index {chunk.orig_index} exceeds file length"\n            )\n        if orig_index > chunk.orig_index:\n            raise DiffError(\n                f"{path}: overlapping chunks at {orig_index} > {chunk.orig_index}"\n            )\n\n        dest_lines.extend(orig_lines[orig_index : chunk.orig_index])\n        orig_index = chunk.orig_index\n\n        dest_lines.extend(chunk.ins_lines)\n        orig_index += len(chunk.del_lines)\n\n    dest_lines.extend(orig_lines[orig_index:])\n    return "\\n".join(dest_lines)\n\n\ndef patch_to_commit(patch: Patch, orig: Dict[str, str]) -> Commit:\n    commit = Commit()\n    for path, action in patch.actions.items():\n        if action.type is ActionType.DELETE:\n            commit.changes[path] = FileChange(\n                type=ActionType.DELETE, old_content=orig[path]\n            )\n        elif action.type is ActionType.ADD:\n            if action.new_file is None:\n                raise DiffError("ADD action without file content")\n            commit.changes[path] = FileChange(\n                type=ActionType.ADD, new_content=action.new_file\n            )\n        elif action.type is ActionType.UPDATE:\n            new_content = _get_updated_file(orig[path], action, path)\n            commit.changes[path] = FileChange(\n                type=ActionType.UPDATE,\n                old_content=orig[path],\n                new_content=new_content,\n                move_path=action.move_path,\n            )\n    return commit\n\n\n# --------------------------------------------------------------------------- #\n#  User-facing helpers\n# --------------------------------------------------------------------------- #\ndef text_to_patch(text: str, orig: Dict[str, str]) -> Tuple[Patch, int]:\n    lines = text.splitlines()  # preserves blank lines, no strip()\n    if (\n        len(lines) < 2\n        or not Parser._norm(lines[0]).startswith("*** Begin Patch")\n        or Parser._norm(lines[-1]) != "*** End Patch"\n    ):\n        raise DiffError("Invalid patch text - missing sentinels")\n\n    parser = Parser(current_files=orig, lines=lines, index=1)\n    parser.parse()\n    return parser.patch, parser.fuzz\n\n\ndef identify_files_needed(text: str) -> List[str]:\n    lines = text.splitlines()\n    return [\n        line[len("*** Update File: ") :]\n        for line in lines\n        if line.startswith("*** Update File: ")\n    ] + [\n        line[len("*** Delete File: ") :]\n        for line in lines\n        if line.startswith("*** Delete File: ")\n    ]\n\n\ndef identify_files_added(text: str) -> List[str]:\n    lines = text.splitlines()\n    return [\n        line[len("*** Add File: ") :]\n        for line in lines\n        if line.startswith("*** Add File: ")\n    ]\n\n\n# --------------------------------------------------------------------------- #\n#  File-system helpers\n# --------------------------------------------------------------------------- #\ndef load_files(paths: List[str], open_fn: Callable[[str], str]) -> Dict[str, str]:\n    return {path: open_fn(path) for path in paths}\n\n\ndef apply_commit(\n    commit: Commit,\n    write_fn: Callable[[str, str], None],\n    remove_fn: Callable[[str], None],\n) -> None:\n    for path, change in commit.changes.items():\n        if change.type is ActionType.DELETE:\n            remove_fn(path)\n        elif change.type is ActionType.ADD:\n            if change.new_content is None:\n                raise DiffError(f"ADD change for {path} has no content")\n            write_fn(path, change.new_content)\n        elif change.type is ActionType.UPDATE:\n            if change.new_content is None:\n                raise DiffError(f"UPDATE change for {path} has no new content")\n            target = change.move_path or path\n            write_fn(target, change.new_content)\n            if change.move_path:\n                remove_fn(path)\n\n\ndef process_patch(\n    text: str,\n    open_fn: Callable[[str], str],\n    write_fn: Callable[[str, str], None],\n    remove_fn: Callable[[str], None],\n) -> str:\n    if not text.startswith("*** Begin Patch"):\n        raise DiffError("Patch text must start with *** Begin Patch")\n    paths = identify_files_needed(text)\n    orig = load_files(paths, open_fn)\n    patch, _fuzz = text_to_patch(text, orig)\n    commit = patch_to_commit(patch, orig)\n    apply_commit(commit, write_fn, remove_fn)\n    return "Done!"\n\n\n# --------------------------------------------------------------------------- #\n#  Default FS helpers\n# --------------------------------------------------------------------------- #\ndef open_file(path: str) -> str:\n    with open(path, "rt", encoding="utf-8") as fh:\n        return fh.read()\n\n\ndef write_file(path: str, content: str) -> None:\n    target = pathlib.Path(path)\n    target.parent.mkdir(parents=True, exist_ok=True)\n    with target.open("wt", encoding="utf-8") as fh:\n        fh.write(content)\n\n\ndef remove_file(path: str) -> None:\n    pathlib.Path(path).unlink(missing_ok=True)\n\n\n# --------------------------------------------------------------------------- #\n#  CLI entry-point\n# --------------------------------------------------------------------------- #\ndef main() -> None:\n    import sys\n\n    patch_text = sys.stdin.read()\n    if not patch_text:\n        print("Please pass patch text through stdin", file=sys.stderr)\n        return\n    try:\n        result = process_patch(patch_text, open_file, write_file, remove_file)\n    except DiffError as exc:\n        print(exc, file=sys.stderr)\n        return\n    print(result)\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u5176\u4ed6\u6709\u6548\u7684-diff-\u683c\u5f0f",children:(0,s.jsx)(n.strong,{children:"\u5176\u4ed6\u6709\u6548\u7684 diff \u683c\u5f0f"})}),"\n",(0,s.jsx)(n.p,{children:"\u5982\u679c\u4f60\u60f3\u5c1d\u8bd5\u4f7f\u7528\u4e0d\u540c\u7684 diff \u683c\u5f0f\uff0c\u6211\u4eec\u5728\u6d4b\u8bd5\u4e2d\u53d1\u73b0\uff0cAider \u7684 polyglot benchmark \u6240\u91c7\u7528\u7684 SEARCH/REPLACE diff \u683c\u5f0f\uff0c\u8fd8\u6709\u4e00\u79cd\u4e0d\u5e26\u5185\u90e8\u8f6c\u4e49\u7684\u4f2a XML \u683c\u5f0f\uff0c\u5728\u6d4b\u8bd5\u4e2d\u90fd\u8868\u73b0\u51fa\u4e86\u5f88\u9ad8\u7684\u6210\u529f\u7387\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u8fd9\u4e9b diff \u683c\u5f0f\u6709\u4e24\u4e2a\u5171\u540c\u70b9\uff1a\uff081\uff09\u5b83\u4eec\u4e0d\u4f7f\u7528\u884c\u53f7\uff1b\uff082\uff09\u5b83\u4eec\u90fd\u4f1a\u63d0\u4f9b\u9700\u8981\u88ab\u66ff\u6362\u7684\u7cbe\u786e\u4ee3\u7801\u5185\u5bb9\u548c\u66ff\u6362\u540e\u7684\u4ee3\u7801\u5185\u5bb9\uff0c\u5e76\u5728\u4e24\u8005\u4e4b\u95f4\u7528\u6e05\u6670\u7684\u5206\u9694\u7b26\u8fdb\u884c\u533a\u5206\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'SEARCH_REPLACE_DIFF_EXAMPLE = """\npath/to/file.py\n```\n>>>>>>> SEARCH\ndef search():\n    pass\n=======\ndef search():\n   raise NotImplementedError()\n<<<<<<< REPLACE\n"""\n\nPSEUDO_XML_DIFF_EXAMPLE = """\n<edit>\n<file>\npath/to/file.py\n</file>\n<old_code>\ndef search():\n    pass\n</old_code>\n<new_code>\ndef search():\n   raise NotImplementedError()\n</new_code>\n</edit>\n"""\n'})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);