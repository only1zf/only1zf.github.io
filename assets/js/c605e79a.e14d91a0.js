"use strict";(self.webpackChunkpub=self.webpackChunkpub||[]).push([[1307],{7193:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"refs/py-main","title":"Python","description":"Summary of Python Main Function Best Practices!","source":"@site/docs/refs/py-main.md","sourceDirName":"refs","slug":"/refs/py-main","permalink":"/docs/refs/py-main","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Python","date":"2019-08-28T17:00:00.000Z","description":"Summary of Python Main Function Best Practices!","updated":"2021-01-11T10:30:49.000Z","created":"2021-01-19T01:48:47.000Z"},"sidebar":"refSidebar","previous":{"title":"MongoDB","permalink":"/docs/refs/mongo"},"next":{"title":"Structure of the Python Repository","permalink":"/docs/refs/py-struct"}}');var o=t(4848),a=t(8453);const r={title:"Python",date:new Date("2019-08-28T17:00:00.000Z"),description:"Summary of Python Main Function Best Practices!",updated:new Date("2021-01-11T10:30:49.000Z"),created:new Date("2021-01-19T01:48:47.000Z")},s=void 0,c={},d=[{value:"Summary of Python Main Function Best Practices",id:"summary-of-python-main-function-best-practices",level:2},{value:"<strong>main</strong> \u2014 Top-level script environment",id:"main--top-level-script-environment",level:2}];function m(n){const e={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["from ",(0,o.jsx)(e.a,{href:"https://realpython.com/python-main-function/",children:"Defining Main Functions in Python"})]}),"\n",(0,o.jsx)(e.h2,{id:"summary-of-python-main-function-best-practices",children:"Summary of Python Main Function Best Practices"}),"\n",(0,o.jsx)(e.p,{children:"Here are four key best practices about main() in Python that you just saw:"}),"\n",(0,o.jsx)(e.p,{children:"Put code that takes a long time to run or has other effects on the computer in a function or class, so you can control exactly when that code is executed."}),"\n",(0,o.jsxs)(e.p,{children:["Use the different values of _",(0,o.jsx)(e.strong,{children:"_name__"})," to determine the context and change the behavior of your code with a conditional statement."]}),"\n",(0,o.jsx)(e.p,{children:"You should name your entry point function main() in order to communicate the intention of the function, even though Python does not assign any special significance to a function named main()."}),"\n",(0,o.jsx)(e.p,{children:"If you want to reuse functionality from your code, define the logic in functions outside main() and call those functions within main()."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from time import sleep\n\nprint("This is my file to demonstrate best practices.")\n\ndef process_data(data):\n    print("Beginning data processing...")\n    modified_data = data + " that has been modified"\n    sleep(3)\n    print("Data processing finished.")\n    return modified_data\n\ndef read_data_from_web():\n    print("Reading data from the Web")\n    data = "Data from the web"\n    return data\n\ndef write_data_to_database(data):\n    print("Writing data to a database")\n    print(data)\n\ndef main():\n    data = read_data_from_web()\n    modified_data = process_data(data)\n    write_data_to_database(modified_data)\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,o.jsx)(e.p,{children:"Python"}),"\n",(0,o.jsxs)(e.h2,{id:"main--top-level-script-environment",children:[(0,o.jsx)(e.strong,{children:"main"})," \u2014 Top-level script environment"]}),"\n",(0,o.jsxs)(e.p,{children:["'",(0,o.jsx)(e.strong,{children:"main"}),"' is the name of the scope in which top-level code executes. A module\u2019s ",(0,o.jsx)(e.strong,{children:"name"})," is set equal to '",(0,o.jsx)(e.strong,{children:"main"}),"' when read from standard input, a script, or from an interactive prompt."]}),"\n",(0,o.jsxs)(e.p,{children:["A module can discover whether or not it is running in the main scope by checking its own ",(0,o.jsx)(e.strong,{children:"name"}),", which allows a common idiom for conditionally executing code in a module when it is run as a script or with python -m but not when it is imported:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'if __name__ == "__main__":\n    # execute only if run as a script\n    main()\n'})}),"\n",(0,o.jsxs)(e.p,{children:["For a package, the same effect can be achieved by including a ",(0,o.jsx)(e.strong,{children:"main"}),".py module, the contents of which will be executed when the module is run with -m."]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(m,{...n})}):m(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);