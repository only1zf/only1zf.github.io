"use strict";(globalThis.webpackChunkpub=globalThis.webpackChunkpub||[]).push([[3594],{20685:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"refs/git","title":"Three way merge by git","description":"git","source":"@site/docs/refs/git.md","sourceDirName":"refs","slug":"/refs/git","permalink":"/docs/refs/git","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Three way merge by git","updated":"2021-01-11T10:30:49.000Z","created":"2021-01-19T01:48:47.000Z"},"sidebar":"refSidebar","previous":{"title":"Difference tool configuration in git","permalink":"/docs/refs/git-diff-tool"},"next":{"title":"macOS","permalink":"/docs/refs/macOS"}}');var t=i(74848),s=i(28453);const l={title:"Three way merge by git",updated:new Date("2021-01-11T10:30:49.000Z"),created:new Date("2021-01-19T01:48:47.000Z")},c="git",o={},a=[{value:"Determine if Git working directory is clean from a script",id:"determine-if-git-working-directory-is-clean-from-a-script",level:2},{value:"Compares files in the working tree and the index",id:"compares-files-in-the-working-tree-and-the-index",level:2},{value:"Migrate history to or from git-lfs",id:"migrate-history-to-or-from-git-lfs",level:2},{value:"LFS \u4f7f\u7528 <code>info</code> \u6a21\u5f0f\u68c0\u67e5\u5386\u53f2\u6587\u4ef6",id:"lfs-\u4f7f\u7528-info-\u6a21\u5f0f\u68c0\u67e5\u5386\u53f2\u6587\u4ef6",level:2},{value:"\u5173\u952e\u8bf4\u660e\uff1a",id:"\u5173\u952e\u8bf4\u660e",level:3},{value:"\u5b9e\u9645\u8fc1\u79fb\u64cd\u4f5c",id:"\u5b9e\u9645\u8fc1\u79fb\u64cd\u4f5c",level:3},{value:"\u6ce8\u610f\u4e8b\u9879\uff1a",id:"\u6ce8\u610f\u4e8b\u9879",level:3},{value:"Finds best common ancestor(s) between two commits to use in a three-way merge.",id:"finds-best-common-ancestors-between-two-commits-to-use-in-a-three-way-merge",level:2},{value:"Github Copilot",id:"github-copilot",level:2},{value:"Three way merge by git",id:"three-way-merge-by-git",level:2},{value:"1. get parent of two branch",id:"1-get-parent-of-two-branch",level:2},{value:"2. clone 4 dirs",id:"2-clone-4-dirs",level:2},{value:"3. merge from src_branch to target_branch",id:"3-merge-from-src_branch-to-target_branch",level:2},{value:"4. FolderMerge by Beyond Compare",id:"4-foldermerge-by-beyond-compare",level:2},{value:"git-diff-tool",id:"git-diff-tool",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"git"}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"git",children:"git"})}),"\n",(0,t.jsx)(n.h2,{id:""}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git filter-branch --index-filter "git rm --cached --ignore-unmatch *.lib *.dll *.exe *.ttf *.bmp *.sdf *.ipch *.ncb" --prune-empty -f HEAD --all\nrm -Rf refs/original\nrm -Rf logs/\ngit gc\ngit repack\ngit repack -adf\ngit prune-packed\ngit prune\n'})}),"\n",(0,t.jsx)(n.h2,{id:"determine-if-git-working-directory-is-clean-from-a-script",children:"Determine if Git working directory is clean from a script"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"#! /bin/bash\n\nfor D in $PWD/$1/*/ ; do\n  cd $D\n  git diff-files --exit-code &> /dev/null\n  if [ $? -ne 0 ] ; then\n    # Working directory clean\n    echo $D\n    git status -s\n  #else\n    # Uncommitted changes\n  fi\n  cd $PWD\ndone\n"})}),"\n",(0,t.jsx)(n.h2,{id:"compares-files-in-the-working-tree-and-the-index",children:"Compares files in the working tree and the index"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git diff-files --exit-code\n"})}),"\n",(0,t.jsx)(n.h2,{id:"migrate-history-to-or-from-git-lfs",children:"Migrate history to or from git-lfs"}),"\n",(0,t.jsxs)(n.p,{children:["First, run ",(0,t.jsx)(n.code,{children:"git lfs migrate info"})," to list the file types taking up the most\nspace in your repository."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ git lfs migrate info\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now, you can run ",(0,t.jsx)(n.code,{children:"git lfs migrate import"})," to convert some file types to LFS:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'$ git lfs migrate import --include="*.mp3,*.psd"\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can also migrate the entire history of your repository:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Check for large files in your local master branch\n$ git lfs migrate info --include-ref=master\n\n# Check for large files in every branch\n$ git lfs migrate info --everything\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The same flags will work in ",(0,t.jsx)(n.code,{children:"import"})," mode:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'# Convert all zip files in your master branch\n$ git lfs migrate import --include-ref=master --include="*.zip"\n\n# Convert all zip files in every local branch\n$ git lfs migrate import --everything --include="*.zip"\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"lfs-\u4f7f\u7528-info-\u6a21\u5f0f\u68c0\u67e5\u5386\u53f2\u6587\u4ef6",children:["LFS \u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"info"})," \u6a21\u5f0f\u68c0\u67e5\u5386\u53f2\u6587\u4ef6"]}),"\n",(0,t.jsxs)(n.p,{children:["\u8981\u67e5\u770b ",(0,t.jsx)(n.strong,{children:"\u5e94\u88ab Git LFS \u8ddf\u8e2a\u4f46\u5c1a\u672a\u8ddf\u8e2a\u7684\u5386\u53f2\u6587\u4ef6"}),"\uff08\u5373\u7b26\u5408 ",(0,t.jsx)(n.code,{children:".gitattributes"})," \u89c4\u5219\u4f46\u672a\u8f6c\u6362\u4e3a LFS \u7684\u6587\u4ef6\uff09\uff0c\u8bf7\u4f7f\u7528\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git lfs migrate info --everything\n"})}),"\n",(0,t.jsx)(n.h3,{id:"\u5173\u952e\u8bf4\u660e",children:"\u5173\u952e\u8bf4\u660e\uff1a"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u4f5c\u7528"}),"\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u6b64\u547d\u4ee4\u4f1a\u626b\u63cf\u6240\u6709\u5206\u652f\u7684\u5386\u53f2\u63d0\u4ea4\uff08",(0,t.jsx)(n.code,{children:"--everything"})," \u8868\u793a\u5305\u62ec\u6240\u6709\u672c\u5730\u548c\u8fdc\u7a0b\u5f15\u7528\uff09\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:["\u8f93\u51fa\u6309\u6587\u4ef6\u7c7b\u578b\uff08\u6269\u5c55\u540d\uff09\u6c47\u603b ",(0,t.jsx)(n.strong,{children:"\u5e94\u88ab LFS \u8ddf\u8e2a\u4f46\u5b9e\u9645\u672a\u88ab\u8ddf\u8e2a\u7684\u6587\u4ef6"}),"\uff08\u5373\u672a\u8f6c\u6362\u4e3a LFS \u6307\u9488\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff09\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:["\u793a\u4f8b\u8f93\u51fa\uff1a","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"*.psd   150 MB   3 files\n*.zip   80 MB    2 files\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["\u4f9d\u8d56 ",(0,t.jsx)(n.code,{children:".gitattributes"})]}),"\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u547d\u4ee4\u4f1a\u81ea\u52a8\u8bfb\u53d6\u4ed3\u5e93\u6839\u76ee\u5f55\u7684 ",(0,t.jsx)(n.code,{children:".gitattributes"})," \u6587\u4ef6\u4e2d\u7684\u89c4\u5219\uff08\u5982 ",(0,t.jsx)(n.code,{children:"*.psd filter=lfs"}),"\uff09\u3002"]}),"\n",(0,t.jsxs)(n.li,{children:["\u786e\u4fdd\u60a8\u7684 ",(0,t.jsx)(n.code,{children:".gitattributes"})," \u5df2\u63d0\u4ea4\u5230\u4ed3\u5e93 \u3002"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"\u9650\u5236\u8303\u56f4"}),"\uff1a"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u82e5\u4ed3\u5e93\u8f83\u5927\uff0c\u53ef\u9650\u5b9a\u68c0\u67e5\u7684\u5206\u652f\uff1a","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git lfs migrate info --include-ref=main  # \u4ec5\u68c0\u67e5 main \u5206\u652f\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"\u5b9e\u9645\u8fc1\u79fb\u64cd\u4f5c",children:"\u5b9e\u9645\u8fc1\u79fb\u64cd\u4f5c"}),"\n",(0,t.jsxs)(n.p,{children:["\u786e\u8ba4\u6587\u4ef6\u540e\uff0c\u6267\u884c\u5b9e\u9645\u8fc1\u79fb\uff08",(0,t.jsx)(n.strong,{children:"\u52a1\u5fc5\u5148\u5907\u4efd\u4ed3\u5e93"}),"\uff09\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git lfs migrate import --everything --include="*.psd,*.zip"\ngit push --force --all  # \u91cd\u5199\u5386\u53f2\u540e\u5f3a\u5236\u63a8\u9001\n'})}),"\n",(0,t.jsx)(n.h3,{id:"\u6ce8\u610f\u4e8b\u9879",children:"\u6ce8\u610f\u4e8b\u9879\uff1a"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u534f\u4f5c\u8005\u9700\u91cd\u65b0\u514b\u9686"}),"\uff1a\u5386\u53f2\u91cd\u5199\u540e\uff0c\u6240\u6709\u534f\u4f5c\u8005\u5fc5\u987b\u91cd\u65b0\u514b\u9686\u4ed3\u5e93\u3002"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"finds-best-common-ancestors-between-two-commits-to-use-in-a-three-way-merge",children:"Finds best common ancestor(s) between two commits to use in a three-way merge."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"git merge-base [-a|--all] <commit> <commit>\u2026\u200b\n"})}),"\n",(0,t.jsx)(n.h2,{id:"github-copilot",children:"Github Copilot"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"curl --verbose https://copilot-proxy.githubusercontent.com/_ping\n"})}),"\n",(0,t.jsx)(n.h2,{id:"three-way-merge-by-git",children:"Three way merge by git"}),"\n",(0,t.jsx)(n.h2,{id:"1-get-parent-of-two-branch",children:"1. get parent of two branch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git merge-base origin/src_branch origin/target_branch\n"})}),"\n",(0,t.jsx)(n.h2,{id:"2-clone-4-dirs",children:"2. clone 4 dirs"}),"\n",(0,t.jsx)(n.p,{children:"base\nsrc_branch\ntarget_branch\nout"}),"\n",(0,t.jsx)(n.h2,{id:"3-merge-from-src_branch-to-target_branch",children:"3. merge from src_branch to target_branch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd out\ngit checkout target_branch\ngit pull origin src_branch -X theirs\n"})}),"\n",(0,t.jsx)(n.h2,{id:"4-foldermerge-by-beyond-compare",children:"4. FolderMerge by Beyond Compare"}),"\n",(0,t.jsx)(n.p,{children:"left folder is target_branch"}),"\n",(0,t.jsx)(n.h2,{id:"git-diff-tool",children:(0,t.jsx)(n.a,{href:"/docs/refs/git-diff-tool",children:"git-diff-tool"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var r=i(96540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);