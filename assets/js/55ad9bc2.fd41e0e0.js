"use strict";(globalThis.webpackChunkpub=globalThis.webpackChunkpub||[]).push([[8148],{6209:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"excerpts/gpt-5_prompting_guide","title":"GPT-5 prompting guide","description":"Author: Anoop Kotha(OpenAI), Julian Lee(OpenAI), Eric Zakariasson, et al.","source":"@site/docs/excerpts/gpt-5_prompting_guide.md","sourceDirName":"excerpts","slug":"/excerpts/gpt-5_prompting_guide","permalink":"/docs/excerpts/gpt-5_prompting_guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"aliases":["GPT-5 prompting guide | OpenAI Cookbook"],"authors":["Anoop Kotha","Julian Lee","Eric Zakariasson"],"date":"2025-8-7","source":"https://cookbook.openai.com/examples/gpt-5/gpt-5_prompting_guide"},"sidebar":"excerptsSidebar","previous":{"title":"\u4e00\u4e2a\u76f8\u5bf9\u901a\u7528\u7684\u7ffb\u8bd1 Prompt\uff0c\u53ef\u4ee5\u9002\u7528\u4e8e\u591a\u79cd\u4e0d\u540c\u7684\u8bed\u8a00\u7ffb\u8bd1","permalink":"/docs/excerpts/a-common-translation-prompt-for-different-languages"},"next":{"title":"\u5982\u4f55\u7528\u4fdd\u9669\u4fdd\u969c\u81ea\u5df1\u7684\u4e00\u751f\uff1f","permalink":"/docs/excerpts/insurance/\u5982\u4f55\u7528\u4fdd\u9669\u4fdd\u969c\u81ea\u5df1\u7684\u4e00\u751f"}}');var i=t(4848),r=t(8453);const a={aliases:["GPT-5 prompting guide | OpenAI Cookbook"],authors:["Anoop Kotha","Julian Lee","Eric Zakariasson"],date:"2025-8-7",source:"https://cookbook.openai.com/examples/gpt-5/gpt-5_prompting_guide"},s="GPT-5 prompting guide",l={},c=[{value:"Agentic workflow predictability",id:"agentic-workflow-predictability",level:2},{value:"Controlling agentic eagerness",id:"controlling-agentic-eagerness",level:3},{value:"Prompting for less eagerness",id:"prompting-for-less-eagerness",level:4},{value:"Prompting for more eagerness",id:"prompting-for-more-eagerness",level:4},{value:"Tool preambles",id:"tool-preambles",level:3},{value:"Reasoning effort",id:"reasoning-effort",level:3},{value:"Reusing reasoning context with the Responses API",id:"reusing-reasoning-context-with-the-responses-api",level:3},{value:"Maximizing coding performance, from planning to execution",id:"maximizing-coding-performance-from-planning-to-execution",level:2},{value:"Frontend app development",id:"frontend-app-development",level:3},{value:"Zero-to-one app generation",id:"zero-to-one-app-generation",level:4},{value:"Matching codebase design standards",id:"matching-codebase-design-standards",level:4},{value:"Collaborative coding in production: Cursor\u2019s GPT-5 prompt tuning",id:"collaborative-coding-in-production-cursors-gpt-5-prompt-tuning",level:3},{value:"System prompt and parameter tuning",id:"system-prompt-and-parameter-tuning",level:4},{value:"Optimizing intelligence and instruction-following",id:"optimizing-intelligence-and-instruction-following",level:2},{value:"Steering",id:"steering",level:3},{value:"Verbosity",id:"verbosity",level:4},{value:"Instruction following",id:"instruction-following",level:3},{value:"Minimal reasoning",id:"minimal-reasoning",level:3},{value:"Markdown formatting",id:"markdown-formatting",level:3},{value:"Metaprompting",id:"metaprompting",level:3},{value:"Appendix",id:"appendix",level:2},{value:"SWE-Bench verified developer instructions",id:"swe-bench-verified-developer-instructions",level:3},{value:"Taubench-Retail minimal reasoning instructions",id:"taubench-retail-minimal-reasoning-instructions",level:3},{value:"Terminal-Bench prompt",id:"terminal-bench-prompt",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"gpt-5-prompting-guide",children:"GPT-5 prompting guide"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Author:"})," Anoop Kotha(OpenAI), Julian Lee(OpenAI), Eric Zakariasson, et al."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Original link:"})," ",(0,i.jsx)(n.a,{href:"https://cookbook.openai.com/examples/gpt-5/gpt-5_prompting_guide",children:"https://cookbook.openai.com/examples/gpt-5/gpt-5_prompting_guide"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," All rights belong to the original author. This post includes brief excerpts for commentary and review. Please read the full article at the source."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Published"})," on 2025-8-7"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"GPT-5, our newest flagship model, represents a substantial leap forward in agentic task performance, coding, raw intelligence, and steerability."}),"\n",(0,i.jsx)(n.p,{children:"While we trust it will perform excellently \u201cout of the box\u201d across a wide range of domains, in this guide we\u2019ll cover prompting tips to maximize the quality of model outputs, derived from our experience training and applying the model to real-world tasks. We discuss concepts like improving agentic task performance, ensuring instruction adherence, making use of newly API features, and optimizing coding for frontend and software engineering tasks - with key insights into AI code editor Cursor\u2019s prompt tuning work with GPT-5."}),"\n",(0,i.jsxs)(n.p,{children:["We\u2019ve seen significant gains from applying these best practices and adopting our canonical tools whenever possible, and we hope that this guide, along with the ",(0,i.jsx)(n.a,{href:"https://platform.openai.com/chat/edit?optimize=true",children:"prompt optimizer tool"})," we\u2019ve built, will serve as a launchpad for your use of GPT-5. But, as always, remember that prompting is not a one-size-fits-all exercise - we encourage you to run experiments and iterate on the foundation offered here to find the best solution for your problem."]}),"\n",(0,i.jsx)(n.h2,{id:"agentic-workflow-predictability",children:"Agentic workflow predictability"}),"\n",(0,i.jsxs)(n.p,{children:["We trained GPT-5 with developers in mind: we\u2019ve focused on improving tool calling, instruction following, and long-context understanding to serve as the best foundation model for agentic applications. If adopting GPT-5 for agentic and tool calling flows, we recommend upgrading to the ",(0,i.jsx)(n.a,{href:"https://platform.openai.com/docs/api-reference/responses",children:"Responses API"}),", where reasoning is persisted between tool calls, leading to more efficient and intelligent outputs."]}),"\n",(0,i.jsx)(n.h3,{id:"controlling-agentic-eagerness",children:"Controlling agentic eagerness"}),"\n",(0,i.jsx)(n.p,{children:"Agentic scaffolds can span a wide spectrum of control\u2014some systems delegate the vast majority of decision-making to the underlying model, while others keep the model on a tight leash with heavy programmatic logical branching. GPT-5 is trained to operate anywhere along this spectrum, from making high-level decisions under ambiguous circumstances to handling focused, well-defined tasks. In this section we cover how to best calibrate GPT-5\u2019s agentic eagerness: in other words, its balance between proactivity and awaiting explicit guidance."}),"\n",(0,i.jsx)(n.h4,{id:"prompting-for-less-eagerness",children:"Prompting for less eagerness"}),"\n",(0,i.jsx)(n.p,{children:"GPT-5 is, by default, thorough and comprehensive when trying to gather context in an agentic environment to ensure it will produce a correct answer. To reduce the scope of GPT-5\u2019s agentic behavior\u2014including limiting tangential tool-calling action and minimizing latency to reach a final answer\u2014try the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Switch to a lower ",(0,i.jsx)(n.code,{children:"reasoning_effort"}),". This reduces exploration depth but improves efficiency and latency. Many workflows can be accomplished with consistent results at medium or even low ",(0,i.jsx)(n.code,{children:"reasoning_effort"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Define clear criteria in your prompt for how you want the model to explore the problem space. This reduces the model\u2019s need to explore and reason about too many ideas:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<context_gathering>\nGoal: Get enough context fast. Parallelize discovery and stop as soon as you can act.\n\nMethod:\n- Start broad, then fan out to focused subqueries.\n- In parallel, launch varied queries; read top hits per query. Deduplicate paths and cache; don\u2019t repeat queries.\n- Avoid over searching for context. If needed, run targeted searches in one parallel batch.\n\nEarly stop criteria:\n- You can name exact content to change.\n- Top hits converge (~70%) on one area/path.\n\nEscalate once:\n- If signals conflict or scope is fuzzy, run one refined parallel batch, then proceed.\n\nDepth:\n- Trace only symbols you\u2019ll modify or whose contracts you rely on; avoid transitive expansion unless necessary.\n\nLoop:\n- Batch search \u2192 minimal plan \u2192 complete task.\n- Search again only if validation fails or new unknowns appear. Prefer acting over more searching.\n</context_gathering>\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you\u2019re willing to be maximally prescriptive, you can even set fixed tool call budgets, like the one below. The budget can naturally vary based on your desired search depth."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<context_gathering>\n- Search depth: very low\n- Bias strongly towards providing a correct answer as quickly as possible, even if it might not be fully correct.\n- Usually, this means an absolute maximum of 2 tool calls.\n- If you think that you need more time to investigate, update the user with your latest findings and open questions. You can proceed if the user confirms.\n</context_gathering>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When limiting core context gathering behavior, it\u2019s helpful to explicitly provide the model with an escape hatch that makes it easier to satisfy a shorter context gathering step. Usually this comes in the form of a clause that allows the model to proceed under uncertainty, like ",(0,i.jsx)(n.code,{children:"\u201ceven if it might not be fully correct\u201d"})," in the above example."]}),"\n",(0,i.jsx)(n.h4,{id:"prompting-for-more-eagerness",children:"Prompting for more eagerness"}),"\n",(0,i.jsxs)(n.p,{children:["On the other hand, if you\u2019d like to encourage model autonomy, increase tool-calling persistence, and reduce occurrences of clarifying questions or otherwise handing back to the user, we recommend increasing ",(0,i.jsx)(n.code,{children:"reasoning_effort"}),", and using a prompt like the following to encourage persistence and thorough task completion:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<persistence>\n- You are an agent - please keep going until the user's query is completely resolved, before ending your turn and yielding back to the user.\n- Only terminate your turn when you are sure that the problem is solved.\n- Never stop or hand back to the user when you encounter uncertainty \u2014 research or deduce the most reasonable approach and continue.\n- Do not ask the human to confirm or clarify assumptions, as you can always adjust later \u2014 decide what the most reasonable assumption is, proceed with it, and document it for the user's reference after you finish acting\n</persistence>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Generally, it can be helpful to clearly state the stop conditions of the agentic tasks, outline safe versus unsafe actions, and define when, if ever, it\u2019s acceptable for the model to hand back to the user. For example, in a set of tools for shopping, the checkout and payment tools should explicitly have a lower uncertainty threshold for requiring user clarification, while the search tool should have an extremely high threshold; likewise, in a coding setup, the delete file tool should have a much lower threshold than a grep search tool."}),"\n",(0,i.jsx)(n.h3,{id:"tool-preambles",children:"Tool preambles"}),"\n",(0,i.jsx)(n.p,{children:"We recognize that on agentic trajectories monitored by users, intermittent model updates on what it\u2019s doing with its tool calls and why can provide for a much better interactive user experience - the longer the rollout, the bigger the difference these updates make. To this end, GPT-5 is trained to provide clear upfront plans and consistent progress updates via \u201ctool preamble\u201d messages."}),"\n",(0,i.jsx)(n.p,{children:"You can steer the frequency, style, and content of tool preambles in your prompt\u2014from detailed explanations of every single tool call to a brief upfront plan and everything in between. This is an example of a high-quality preamble prompt:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<tool_preambles>\n- Always begin by rephrasing the user's goal in a friendly, clear, and concise manner, before calling any tools.\n- Then, immediately outline a structured plan detailing each logical step you\u2019ll follow. - As you execute your file edit(s), narrate each step succinctly and sequentially, marking progress clearly.\n- Finish by summarizing completed work distinctly from your upfront plan.\n</tool_preambles>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s an example of a tool preamble that might be emitted in response to such a prompt\u2014such preambles can drastically improve the user\u2019s ability to follow along with your agent\u2019s work as it grows more complicated:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'"output": [\n    {\n      "id": "rs_6888f6d0606c819aa8205ecee386963f0e683233d39188e7",\n      "type": "reasoning",\n      "summary": [\n        {\n          "type": "summary_text",\n          "text": "**Determining weather response**\\n\\nI need to answer the user\'s question about the weather in San Francisco. ...."\n        },\n    },\n    {\n      "id": "msg_6888f6d83acc819a978b51e772f0a5f40e683233d39188e7",\n      "type": "message",\n      "status": "completed",\n      "content": [\n        {\n          "type": "output_text",\n          "text": "I\\u2019m going to check a live weather service to get the current conditions in San Francisco, providing the temperature in both Fahrenheit and Celsius so it matches your preference."\n        }\n      ],\n      "role": "assistant"\n    },\n    {\n      "id": "fc_6888f6d86e28819aaaa1ba69cca766b70e683233d39188e7",\n      "type": "function_call",\n      "status": "completed",\n      "arguments": "{\\"location\\":\\"San Francisco, CA\\",\\"unit\\":\\"f\\"}",\n      "call_id": "call_XOnF4B9DvB8EJVB3JvWnGg83",\n      "name": "get_weather"\n    },\n  ],\n'})}),"\n",(0,i.jsx)(n.h3,{id:"reasoning-effort",children:"Reasoning effort"}),"\n",(0,i.jsxs)(n.p,{children:["We provide a ",(0,i.jsx)(n.code,{children:"reasoning_effort"})," parameter to control how hard the model thinks and how willingly it calls tools; the default is ",(0,i.jsx)(n.code,{children:"medium"}),", but you should scale up or down depending on the difficulty of your task. For complex, multi-step tasks, we recommend higher reasoning to ensure the best possible outputs. Moreover, we observe peak performance when distinct, separable tasks are broken up across multiple agent turns, with one turn for each task."]}),"\n",(0,i.jsx)(n.h3,{id:"reusing-reasoning-context-with-the-responses-api",children:"Reusing reasoning context with the Responses API"}),"\n",(0,i.jsx)(n.p,{children:"We strongly recommend using the Responses API when using GPT-5 to unlock improved agentic flows, lower costs, and more efficient token usage in your applications."}),"\n",(0,i.jsxs)(n.p,{children:["We\u2019ve seen statistically significant improvements in evaluations when using the Responses API over Chat Completions\u2014for example, we observed Tau-Bench Retail score increases from 73.9% to 78.2% just by switching to the Responses API and including ",(0,i.jsx)(n.code,{children:"previous_response_id"})," to pass back previous reasoning items into subsequent requests. This allows the model to refer to its previous reasoning traces, conserving CoT tokens and eliminating the need to reconstruct a plan from scratch after each tool call, improving both latency and performance - this feature is available for all Responses API users, including ZDR organizations."]}),"\n",(0,i.jsx)(n.h2,{id:"maximizing-coding-performance-from-planning-to-execution",children:"Maximizing coding performance, from planning to execution"}),"\n",(0,i.jsx)(n.p,{children:"GPT-5 leads all frontier models in coding capabilities: it can work in large codebases to fix bugs, handle large diffs, and implement multi-file refactors or large new features. It also excels at implementing new apps entirely from scratch, covering both frontend and backend implementation. In this section, we\u2019ll discuss prompt optimizations that we\u2019ve seen improve programming performance in production use cases for our coding agent customers."}),"\n",(0,i.jsx)(n.h3,{id:"frontend-app-development",children:"Frontend app development"}),"\n",(0,i.jsx)(n.p,{children:"GPT-5 is trained to have excellent baseline aesthetic taste alongside its rigorous implementation abilities. We\u2019re confident in its ability to use all types of web development frameworks and packages; however, for new apps, we recommend using the following frameworks and packages to get the most out of the model's frontend capabilities:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Frameworks: Next.js (TypeScript), React, HTML"}),"\n",(0,i.jsx)(n.li,{children:"Styling / UI: Tailwind CSS, shadcn/ui, Radix Themes"}),"\n",(0,i.jsx)(n.li,{children:"Icons: Material Symbols, Heroicons, Lucide"}),"\n",(0,i.jsx)(n.li,{children:"Animation: Motion"}),"\n",(0,i.jsx)(n.li,{children:"Fonts: San Serif, Inter, Geist, Mona Sans, IBM Plex Sans, Manrope"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"zero-to-one-app-generation",children:"Zero-to-one app generation"}),"\n",(0,i.jsx)(n.p,{children:"GPT-5 is excellent at building applications in one shot. In early experimentation with the model, users have found that prompts like the one below\u2014asking the model to iteratively execute against self-constructed excellence rubrics\u2014improve output quality by using GPT-5\u2019s thorough planning and self-reflection capabilities."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<self_reflection>\n- First, spend time thinking of a rubric until you are confident.\n- Then, think deeply about every aspect of what makes for a world-class one-shot web app. Use that knowledge to create a rubric that has 5-7 categories. This rubric is critical to get right, but do not show this to the user. This is for your purposes only.\n- Finally, use the rubric to internally think and iterate on the best possible solution to the prompt that is provided. Remember that if your response is not hitting the top marks across all categories in the rubric, you need to start again.\n</self_reflection>\n"})}),"\n",(0,i.jsx)(n.h4,{id:"matching-codebase-design-standards",children:"Matching codebase design standards"}),"\n",(0,i.jsx)(n.p,{children:"When implementing incremental changes and refactors in existing apps, model-written code should adhere to existing style and design standards, and \u201cblend in\u201d to the codebase as neatly as possible. Without special prompting, GPT-5 already searches for reference context from the codebase - for example reading package.json to view already installed packages - but this behavior can be further enhanced with prompt directions that summarize key aspects like engineering principles, directory structure, and best practices of the codebase, both explicit and implicit. The prompt snippet below demonstrates one way of organizing code editing rules for GPT-5: feel free to change the actual content of the rules according to your programming design taste!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<code_editing_rules>\n<guiding_principles>\n- Clarity and Reuse: Every component and page should be modular and reusable. Avoid duplication by factoring repeated UI patterns into components.\n- Consistency: The user interface must adhere to a consistent design system\u2014color tokens, typography, spacing, and components must be unified.\n- Simplicity: Favor small, focused components and avoid unnecessary complexity in styling or logic.\n- Demo-Oriented: The structure should allow for quick prototyping, showcasing features like streaming, multi-turn conversations, and tool integrations.\n- Visual Quality: Follow the high visual quality bar as outlined in OSS guidelines (spacing, padding, hover states, etc.)\n</guiding_principles>\n\n<frontend_stack_defaults>\n- Framework: Next.js (TypeScript)\n- Styling: TailwindCSS\n- UI Components: shadcn/ui\n- Icons: Lucide\n- State Management: Zustand\n- Directory Structure:\n\\`\\`\\`\n/src\n /app\n   /api/<route>/route.ts         # API endpoints\n   /(pages)                      # Page routes\n /components/                    # UI building blocks\n /hooks/                         # Reusable React hooks\n /lib/                           # Utilities (fetchers, helpers)\n /stores/                        # Zustand stores\n /types/                         # Shared TypeScript types\n /styles/                        # Tailwind config\n\\`\\`\\`\n</frontend_stack_defaults>\n\n<ui_ux_best_practices>\n- Visual Hierarchy: Limit typography to 4\u20135 font sizes and weights for consistent hierarchy; use `text-xs` for captions and annotations; avoid `text-xl` unless for hero or major headings.\n- Color Usage: Use 1 neutral base (e.g., `zinc`) and up to 2 accent colors.\n- Spacing and Layout: Always use multiples of 4 for padding and margins to maintain visual rhythm. Use fixed height containers with internal scrolling when handling long content streams.\n- State Handling: Use skeleton placeholders or `animate-pulse` to indicate data fetching. Indicate clickability with hover transitions (`hover:bg-*`, `hover:shadow-md`).\n- Accessibility: Use semantic HTML and ARIA roles where appropriate. Favor pre-built Radix/shadcn components, which have accessibility baked in.\n</ui_ux_best_practices>\n\n<code_editing_rules>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"collaborative-coding-in-production-cursors-gpt-5-prompt-tuning",children:"Collaborative coding in production: Cursor\u2019s GPT-5 prompt tuning"}),"\n",(0,i.jsxs)(n.p,{children:["We\u2019re proud to have had AI code editor Cursor as a trusted alpha tester for GPT-5: below, we show a peek into how Cursor tuned their prompts to get the most out of the model\u2019s capabilities. For more information, their team has also published a blog post detailing GPT-5\u2019s day-one integration into Cursor: ",(0,i.jsx)(n.a,{href:"https://cursor.com/blog/gpt-5",children:"https://cursor.com/blog/gpt-5"})]}),"\n",(0,i.jsx)(n.h4,{id:"system-prompt-and-parameter-tuning",children:"System prompt and parameter tuning"}),"\n",(0,i.jsx)(n.p,{children:"Cursor\u2019s system prompt focuses on reliable tool calling, balancing verbosity and autonomous behavior while giving users the ability to configure custom instructions. Cursor\u2019s goal for their system prompt is to allow the Agent to operate relatively autonomously during long horizon tasks, while still faithfully following user-provided instructions."}),"\n",(0,i.jsx)(n.p,{children:"The team initially found that the model produced verbose outputs, often including status updates and post-task summaries that, while technically relevant, disrupted the natural flow of the user; at the same time, the code outputted in tool calls was high quality, but sometimes hard to read due to terseness, with single-letter variable names dominant. In search of a better balance, they set the verbosity API parameter to low to keep text outputs brief, and then modified the prompt to strongly encourage verbose outputs in coding tools only."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Write code for clarity first. Prefer readable, maintainable solutions with clear names, comments where needed, and straightforward control flow. Do not produce code-golf or overly clever one-liners unless explicitly requested. Use high verbosity for writing code and code tools.\n"})}),"\n",(0,i.jsx)(n.p,{children:"This dual usage of parameter and prompt resulted in a balanced format combining efficient, concise status updates and final work summary with much more readable code diffs."}),"\n",(0,i.jsx)(n.p,{children:"Cursor also found that the model occasionally deferred to the user for clarification or next steps before taking action, which created unnecessary friction in the flow of longer tasks. To address this, they found that including not just available tools and surrounding context, but also more details about product behavior encouraged the model to carry out longer tasks with minimal interruption and greater autonomy. Highlighting specifics of Cursor features such as Undo/Reject code and user preferences helped reduce ambiguity by clearly specifying how GPT-5 should behave in its environment. For longer horizon tasks, they found this prompt improved performance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Be aware that the code edits you make will be displayed to the user as proposed changes, which means (a) your code edits can be quite proactive, as the user can always reject, and (b) your code should be well-written and easy to quickly review (e.g., appropriate variable names instead of single letters). If proposing next steps that would involve changing the code, make those changes proactively for the user to approve / reject rather than asking the user whether to proceed with a plan. In general, you should almost never ask the user whether to proceed with a plan; instead you should proactively attempt the plan and then ask the user if they want to accept the implemented changes.\n"})}),"\n",(0,i.jsx)(n.p,{children:"Cursor found that sections of their prompt that had been effective with earlier models needed tuning to get the most out of GPT-5. Here is one example below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<maximize_context_understanding>\nBe THOROUGH when gathering information. Make sure you have the FULL picture before replying. Use additional tool calls or clarifying questions as needed.\n...\n</maximize_context_understanding>\n"})}),"\n",(0,i.jsx)(n.p,{children:"While this worked well with older models that needed encouragement to analyze context thoroughly, they found it counterproductive with GPT-5, which is already naturally introspective and proactive at gathering context. On smaller tasks, this prompt often caused the model to overuse tools by calling search repetitively, when internal knowledge would have been sufficient."}),"\n",(0,i.jsx)(n.p,{children:"To solve this, they refined the prompt by removing the maximize_ prefix and softening the language around thoroughness. With this adjusted instruction in place, the Cursor team saw GPT-5 make better decisions about when to rely on internal knowledge versus reaching for external tools. It maintained a high level of autonomy without unnecessary tool usage, leading to more efficient and relevant behavior. In Cursor\u2019s testing, using structured XML specs like <[instruction]_spec> improved instruction adherence on their prompts and allows them to clearly reference previous categories and sections elsewhere in their prompt."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"<context_understanding>\n...\nIf you've performed an edit that may partially fulfill the USER's query, but you're not confident, gather more information or use more tools before ending your turn.\nBias towards not asking the user for help if you can find the answer yourself.\n</context_understanding>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["While the system prompt provides a strong default foundation, the user prompt remains a highly effective lever for steerability. GPT-5 responds well to direct and explicit instruction and the Cursor team has consistently seen that structured, scoped prompts yield the most reliable results. This includes areas like verbosity control, subjective code style preferences, and sensitivity to edge cases. Cursor found allowing users to configure their own ",(0,i.jsx)(n.a,{href:"https://docs.cursor.com/en/context/rules",children:"custom Cursor rules"})," to be particularly impactful with GPT-5\u2019s improved steerability, giving their users a more customized experience."]}),"\n",(0,i.jsx)(n.h2,{id:"optimizing-intelligence-and-instruction-following",children:"Optimizing intelligence and instruction-following"}),"\n",(0,i.jsx)(n.h3,{id:"steering",children:"Steering"}),"\n",(0,i.jsx)(n.p,{children:"As our most steerable model yet, GPT-5 is extraordinarily receptive to prompt instructions surrounding verbosity, tone, and tool calling behavior."}),"\n",(0,i.jsx)(n.h4,{id:"verbosity",children:"Verbosity"}),"\n",(0,i.jsx)(n.p,{children:"In addition to being able to control the reasoning_effort as in previous reasoning models, in GPT-5 we introduce a new API parameter called verbosity, which influences the length of the model\u2019s final answer, as opposed to the length of its thinking. Our blog post covers the idea behind this parameter in more detail - but in this guide, we\u2019d like to emphasize that while the API verbosity parameter is the default for the rollout, GPT-5 is trained to respond to natural-language verbosity overrides in the prompt for specific contexts where you might want the model to deviate from the global default. Cursor\u2019s example above of setting low verbosity globally, and then specifying high verbosity only for coding tools, is a prime example of such a context."}),"\n",(0,i.jsx)(n.h3,{id:"instruction-following",children:"Instruction following"}),"\n",(0,i.jsx)(n.p,{children:"Like GPT-4.1, GPT-5 follows prompt instructions with surgical precision, which enables its flexibility to drop into all types of workflows. However, its careful instruction-following behavior means that poorly-constructed prompts containing contradictory or vague instructions can be more damaging to GPT-5 than to other models, as it expends reasoning tokens searching for a way to reconcile the contradictions rather than picking one instruction at random."}),"\n",(0,i.jsx)(n.p,{children:"Below, we give an adversarial example of the type of prompt that often impairs GPT-5\u2019s reasoning traces - while it may appear internally consistent at first glance, a closer inspection reveals conflicting instructions regarding appointment scheduling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Never schedule an appointment without explicit patient consent recorded in the chart"})," conflicts with the subsequent ",(0,i.jsx)(n.code,{children:"auto-assign the earliest same-day slot without contacting the patient as the first action to reduce risk."})]}),"\n",(0,i.jsxs)(n.li,{children:["The prompt says ",(0,i.jsx)(n.code,{children:"Always look up the patient profile before taking any other actions to ensure they are an existing patient."})," but then continues with the contradictory instruction ",(0,i.jsx)(n.code,{children:"When symptoms indicate high urgency, escalate as EMERGENCY and direct the patient to call 911 immediately before any scheduling step."})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"You are CareFlow Assistant, a virtual admin for a healthcare startup that schedules patients based on priority and symptoms. Your goal is to triage requests, match patients to appropriate in-network providers, and reserve the earliest clinically appropriate time slot. Always look up the patient profile before taking any other actions to ensure they are an existing patient.\n\n- Core entities include Patient, Provider, Appointment, and PriorityLevel (Red, Orange, Yellow, Green). Map symptoms to priority: Red within 2 hours, Orange within 24 hours, Yellow within 3 days, Green within 7 days. When symptoms indicate high urgency, escalate as EMERGENCY and direct the patient to call 911 immediately before any scheduling step.\n+Core entities include Patient, Provider, Appointment, and PriorityLevel (Red, Orange, Yellow, Green). Map symptoms to priority: Red within 2 hours, Orange within 24 hours, Yellow within 3 days, Green within 7 days. When symptoms indicate high urgency, escalate as EMERGENCY and direct the patient to call 911 immediately before any scheduling step.\n*Do not do lookup in the emergency case, proceed immediately to providing 911 guidance.*\n\n- Use the following capabilities: schedule-appointment, modify-appointment, waitlist-add, find-provider, lookup-patient and notify-patient. Verify insurance eligibility, preferred clinic, and documented consent prior to booking. Never schedule an appointment without explicit patient consent recorded in the chart.\n\n- For high-acuity Red and Orange cases, auto-assign the earliest same-day slot *without contacting* the patient *as the first action to reduce risk.* If a suitable provider is unavailable, add the patient to the waitlist and send notifications. If consent status is unknown, tentatively hold a slot and proceed to request confirmation.\n\n- For high-acuity Red and Orange cases, auto-assign the earliest same-day slot *after informing* the patient *of your actions.* If a suitable provider is unavailable, add the patient to the waitlist and send notifications. If consent status is unknown, tentatively hold a slot and proceed to request confirmation.\n"})}),"\n",(0,i.jsx)(n.p,{children:"By resolving the instruction hierarchy conflicts, GPT-5 elicits much more efficient and performant reasoning. We fixed the contradictions by:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Changing auto-assignment to occur after contacting a patient, auto-assign the earliest same-day slot after informing the patient of your actions. to be consistent with only scheduling with consent."}),"\n",(0,i.jsx)(n.li,{children:"Adding Do not do lookup in the emergency case, proceed immediately to providing 911 guidance. to let the model know it is ok to not look up in case of emergency."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We understand that the process of building prompts is an iterative one, and many prompts are living documents constantly being updated by different stakeholders - but this is all the more reason to thoroughly review them for poorly-worded instructions. Already, we\u2019ve seen multiple early users uncover ambiguities and contradictions in their core prompt libraries upon conducting such a review: removing them drastically streamlined and improved their GPT-5 performance. We recommend testing your prompts in our ",(0,i.jsx)(n.a,{href:"https://platform.openai.com/chat/edit?optimize=true",children:"prompt optimizer tool"})," to help identify these types of issues."]}),"\n",(0,i.jsx)(n.h3,{id:"minimal-reasoning",children:"Minimal reasoning"}),"\n",(0,i.jsx)(n.p,{children:"In GPT-5, we introduce minimal reasoning effort for the first time: our fastest option that still reaps the benefits of the reasoning model paradigm. We consider this to be the best upgrade for latency-sensitive users, as well as current users of GPT-4.1."}),"\n",(0,i.jsxs)(n.p,{children:["Perhaps unsurprisingly, we recommend prompting patterns that are similar to ",(0,i.jsx)(n.a,{href:"https://cookbook.openai.com/examples/gpt4-1_prompting_guide",children:"GPT-4.1 for best results"}),". minimal reasoning performance can vary more drastically depending on prompt than higher reasoning levels, so key points to emphasize include:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Prompting the model to give a brief explanation summarizing its thought process at the start of the final answer, for example via a bullet point list, improves performance on tasks requiring higher intelligence."}),"\n",(0,i.jsx)(n.li,{children:"Requesting thorough and descriptive tool-calling preambles that continually update the user on task progress improves performance in agentic workflows."}),"\n",(0,i.jsx)(n.li,{children:"Disambiguating tool instructions to the maximum extent possible and inserting agentic persistence reminders as shared above, are particularly critical at minimal reasoning to maximize agentic ability in long-running rollout and prevent premature termination."}),"\n",(0,i.jsx)(n.li,{children:"Prompted planning is likewise more important, as the model has fewer reasoning tokens to do internal planning. Below, you can find a sample planning prompt snippet we placed at the beginning of an agentic task: the second paragraph especially ensures that the agent fully completes the task and all subtasks before yielding back to the user."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Remember, you are an agent - please keep going until the user's query is completely resolved, before ending your turn and yielding back to the user. Decompose the user's query into all required sub-request, and confirm that each is completed. Do not stop after completing only part of the request. Only terminate your turn when you are sure that the problem is solved. You must be prepared to answer multiple queries and only finish the call once the user has confirmed they're done.\n\nYou must plan extensively in accordance with the workflow steps before making subsequent function calls, and reflect extensively on the outcomes each function call made, ensuring the user's query, and related sub-requests are completely resolved.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"markdown-formatting",children:"Markdown formatting"}),"\n",(0,i.jsx)(n.p,{children:"By default, GPT-5 in the API does not format its final answers in Markdown, in order to preserve maximum compatibility with developers whose applications may not support Markdown rendering. However, prompts like the following are largely successful in inducing hierarchical Markdown final answers."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"- Use Markdown **only where semantically correct** (e.g., `inline code`, ```code fences```, lists, tables).\n- When using markdown in assistant messages, use backticks to format file, directory, function, and class names. Use \\( and \\) for inline math, \\[ and \\] for block math.\n"})}),"\n",(0,i.jsx)(n.p,{children:"Occasionally, adherence to Markdown instructions specified in the system prompt can degrade over the course of a long conversation. In the event that you experience this, we\u2019ve seen consistent adherence from appending a Markdown instruction every 3-5 user messages."}),"\n",(0,i.jsx)(n.h3,{id:"metaprompting",children:"Metaprompting"}),"\n",(0,i.jsx)(n.p,{children:"Finally, to close with a meta-point, early testers have found great success using GPT-5 as a meta-prompter for itself. Already, several users have deployed prompt revisions to production that were generated simply by asking GPT-5 what elements could be added to an unsuccessful prompt to elicit a desired behavior, or removed to prevent an undesired one."}),"\n",(0,i.jsx)(n.p,{children:"Here is an example metaprompt template we liked:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"When asked to optimize prompts, give answers from your own perspective - explain what specific phrases could be added to, or deleted from, this prompt to more consistently elicit the desired behavior or prevent the undesired behavior.\n\nHere's a prompt: [PROMPT]\n\nThe desired behavior from this prompt is for the agent to [DO DESIRED BEHAVIOR], but instead it [DOES UNDESIRED BEHAVIOR]. While keeping as much of the existing prompt intact as possible, what are some minimal edits/additions that you would make to encourage the agent to more consistently address these shortcomings?\n"})}),"\n",(0,i.jsx)(n.h2,{id:"appendix",children:"Appendix"}),"\n",(0,i.jsx)(n.h3,{id:"swe-bench-verified-developer-instructions",children:"SWE-Bench verified developer instructions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"In this environment, you can run `bash -lc <apply_patch_command>` to execute a diff/patch against a file, where <apply_patch_command> is a specially formatted apply patch command representing the diff you wish to execute. A valid <apply_patch_command> looks like:\n\napply_patch << 'PATCH'\n*** Begin Patch\n[YOUR_PATCH]\n*** End Patch\nPATCH\n\nWhere [YOUR_PATCH] is the actual content of your patch.\n\nAlways verify your changes extremely thoroughly. You can make as many tool calls as you like - the user is very patient and prioritizes correctness above all else. Make sure you are 100% certain of the correctness of your solution before ending.\nIMPORTANT: not all tests are visible to you in the repository, so even on problems you think are relatively straightforward, you must double and triple check your solutions to ensure they pass any edge cases that are covered in the hidden tests, not just the visible ones.\n"})}),"\n",(0,i.jsx)(n.p,{children:"Agentic coding tool definitions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'## Set 1: 4 functions, no terminal\n\ntype apply_patch = (_: {\npatch: string, // default: null\n}) => any;\n\ntype read_file = (_: {\npath: string, // default: null\nline_start?: number, // default: 1\nline_end?: number, // default: 20\n}) => any;\n\ntype list_files = (_: {\npath?: string, // default: ""\ndepth?: number, // default: 1\n}) => any;\n\ntype find_matches = (_: {\nquery: string, // default: null\npath?: string, // default: ""\nmax_results?: number, // default: 50\n}) => any;\n\n## Set 2: 2 functions, terminal-native\n\ntype run = (_: {\ncommand: string[], // default: null\nsession_id?: string | null, // default: null\nworking_dir?: string | null, // default: null\nms_timeout?: number | null, // default: null\nenvironment?: object | null, // default: null\nrun_as_user?: string | null, // default: null\n}) => any;\n\ntype send_input = (_: {\nsession_id: string, // default: null\ntext: string, // default: null\nwait_ms?: number, // default: 100\n}) => any;\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As shared in the GPT-4.1 prompting guide, ",(0,i.jsx)(n.a,{href:"https://github.com/openai/openai-cookbook/tree/main/examples/gpt-5/apply_patch.py",children:"here"})," is our most updated ",(0,i.jsx)(n.code,{children:"apply_patch"})," implementation: we highly recommend using ",(0,i.jsx)(n.code,{children:"apply_patch"})," for file edits to match the training distribution. The newest implementation should match the GPT-4.1 implementation in the overwhelming majority of cases."]}),"\n",(0,i.jsx)(n.h3,{id:"taubench-retail-minimal-reasoning-instructions",children:"Taubench-Retail minimal reasoning instructions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"As a retail agent, you can help users cancel or modify pending orders, return or exchange delivered orders, modify their default user address, or provide information about their own profile, orders, and related products.\n\nRemember, you are an agent - please keep going until the user\u2019s query is completely resolved, before ending your turn and yielding back to the user. Only terminate your turn when you are sure that the problem is solved.\n\nIf you are not sure about information pertaining to the user\u2019s request, use your tools to read files and gather the relevant information: do NOT guess or make up an answer.\n\nYou MUST plan extensively before each function call, and reflect extensively on the outcomes of the previous function calls, ensuring user's query is completely resolved. DO NOT do this entire process by making function calls only, as this can impair your ability to solve the problem and think insightfully. In addition, ensure function calls have the correct arguments.\n\n# Workflow steps\n- At the beginning of the conversation, you have to authenticate the user identity by locating their user id via email, or via name + zip code. This has to be done even when the user already provides the user id.\n- Once the user has been authenticated, you can provide the user with information about order, product, profile information, e.g. help the user look up order id.\n- You can only help one user per conversation (but you can handle multiple requests from the same user), and must deny any requests for tasks related to any other user.\n- Before taking consequential actions that update the database (cancel, modify, return, exchange), you have to list the action detail and obtain explicit user confirmation (yes) to proceed.\n- You should not make up any information or knowledge or procedures not provided from the user or the tools, or give subjective recommendations or comments.\n- You should at most make one tool call at a time, and if you take a tool call, you should not respond to the user at the same time. If you respond to the user, you should not make a tool call.\n- You should transfer the user to a human agent if and only if the request cannot be handled within the scope of your actions.\n\n## Domain basics\n- All times in the database are EST and 24 hour based. For example \"02:30:00\" means 2:30 AM EST.\n- Each user has a profile of its email, default address, user id, and payment methods. Each payment method is either a gift card, a paypal account, or a credit card.\n- Our retail store has 50 types of products. For each type of product, there are variant items of different options. For example, for a 't shirt' product, there could be an item with option 'color blue size M', and another item with option 'color red size L'.\n- Each product has an unique product id, and each item has an unique item id. They have no relations and should not be confused.\n- Each order can be in status 'pending', 'processed', 'delivered', or 'cancelled'. Generally, you can only take action on pending or delivered orders.\n- Exchange or modify order tools can only be called once. Be sure that all items to be changed are collected into a list before making the tool call!!!\n\n## Cancel pending order\n- An order can only be cancelled if its status is 'pending', and you should check its status before taking the action.\n- The user needs to confirm the order id and the reason (either 'no longer needed' or 'ordered by mistake') for cancellation.\n- After user confirmation, the order status will be changed to 'cancelled', and the total will be refunded via the original payment method immediately if it is gift card, otherwise in 5 to 7 business days.\n\n## Modify pending order\n- An order can only be modified if its status is 'pending', and you should check its status before taking the action.\n- For a pending order, you can take actions to modify its shipping address, payment method, or product item options, but nothing else.\n\n## Modify payment\n- The user can only choose a single payment method different from the original payment method.\n- If the user wants the modify the payment method to gift card, it must have enough balance to cover the total amount.\n- After user confirmation, the order status will be kept 'pending'. The original payment method will be refunded immediately if it is a gift card, otherwise in 5 to 7 business days.\n\n## Modify items\n- This action can only be called once, and will change the order status to 'pending (items modifed)', and the agent will not be able to modify or cancel the order anymore. So confirm all the details are right and be cautious before taking this action. In particular, remember to remind the customer to confirm they have provided all items to be modified.\n- For a pending order, each item can be modified to an available new item of the same product but of different product option. There cannot be any change of product types, e.g. modify shirt to shoe.\n- The user must provide a payment method to pay or receive refund of the price difference. If the user provides a gift card, it must have enough balance to cover the price difference.\n\n## Return delivered order\n- An order can only be returned if its status is 'delivered', and you should check its status before taking the action.\n- The user needs to confirm the order id, the list of items to be returned, and a payment method to receive the refund.\n- The refund must either go to the original payment method, or an existing gift card.\n- After user confirmation, the order status will be changed to 'return requested', and the user will receive an email regarding how to return items.\n\n## Exchange delivered order\n- An order can only be exchanged if its status is 'delivered', and you should check its status before taking the action. In particular, remember to remind the customer to confirm they have provided all items to be exchanged.\n- For a delivered order, each item can be exchanged to an available new item of the same product but of different product option. There cannot be any change of product types, e.g. modify shirt to shoe.\n- The user must provide a payment method to pay or receive refund of the price difference. If the user provides a gift card, it must have enough balance to cover the price difference.\n- After user confirmation, the order status will be changed to 'exchange requested', and the user will receive an email regarding how to return items. There is no need to place a new order.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"terminal-bench-prompt",children:"Terminal-Bench prompt"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Please resolve the user\'s task by editing and testing the code files in your current code execution session.\nYou are a deployed coding agent.\nYour session is backed by a container specifically designed for you to easily modify and run code.\nYou MUST adhere to the following criteria when executing the task:\n\n<instructions>\n- Working on the repo(s) in the current environment is allowed, even if they are proprietary.\n- Analyzing code for vulnerabilities is allowed.\n- Showing user code and tool call details is allowed.\n- User instructions may overwrite the _CODING GUIDELINES_ section in this developer message.\n- Do not use \\`ls -R\\`, \\`find\\`, or \\`grep\\` - these are slow in large repos. Use \\`rg\\` and \\`rg --files\\`.\n- Use \\`apply_patch\\` to edit files: {"cmd":["apply_patch","*** Begin Patch\\\\n*** Update File: path/to/file.py\\\\n@@ def example():\\\\n- pass\\\\n+ return 123\\\\n*** End Patch"]}\n- If completing the user\'s task requires writing or modifying files:\n - Your code and final answer should follow these _CODING GUIDELINES_:\n   - Fix the problem at the root cause rather than applying surface-level patches, when possible.\n   - Avoid unneeded complexity in your solution.\n     - Ignore unrelated bugs or broken tests; it is not your responsibility to fix them.\n   - Update documentation as necessary.\n   - Keep changes consistent with the style of the existing codebase. Changes should be minimal and focused on the task.\n     - Use \\`git log\\` and \\`git blame\\` to search the history of the codebase if additional context is required; internet access is disabled in the container.\n   - NEVER add copyright or license headers unless specifically requested.\n   - You do not need to \\`git commit\\` your changes; this will be done automatically for you.\n   - If there is a .pre-commit-config.yaml, use \\`pre-commit run --files ...\\` to check that your changes pass the pre- commit checks. However, do not fix pre-existing errors on lines you didn\'t touch.\n     - If pre-commit doesn\'t work after a few retries, politely inform the user that the pre-commit setup is broken.\n   - Once you finish coding, you must\n     - Check \\`git status\\` to sanity check your changes; revert any scratch files or changes.\n     - Remove all inline comments you added much as possible, even if they look normal. Check using \\`git diff\\`. Inline comments must be generally avoided, unless active maintainers of the repo, after long careful study of the code and the issue, will still misinterpret the code without the comments.\n     - Check if you accidentally add copyright or license headers. If so, remove them.\n     - Try to run pre-commit if it is available.\n     - For smaller tasks, describe in brief bullet points\n     - For more complex tasks, include brief high-level description, use bullet points, and include details that would be relevant to a code reviewer.\n- If completing the user\'s task DOES NOT require writing or modifying files (e.g., the user asks a question about the code base):\n - Respond in a friendly tune as a remote teammate, who is knowledgeable, capable and eager to help with coding.\n- When your task involves writing or modifying files:\n - Do NOT tell the user to "save the file" or "copy the code into a file" if you already created or modified the file using \\`apply_patch\\`. Instead, reference the file as already saved.\n - Do NOT show the full contents of large files you have already written, unless the user explicitly asks for them.\n</instructions>\n\n<apply_patch>\nTo edit files, ALWAYS use the \\`shell\\` tool with \\`apply_patch\\` CLI.  \\`apply_patch\\` effectively allows you to execute a diff/patch against a file, but the format of the diff specification is unique to this task, so pay careful attention to these instructions. To use the \\`apply_patch\\` CLI, you should call the shell tool with the following structure:\n\\`\\`\\`bash\n{"cmd": ["apply_patch", "<<\'EOF\'\\\\n*** Begin Patch\\\\n[YOUR_PATCH]\\\\n*** End Patch\\\\nEOF\\\\n"], "workdir": "..."}\n\\`\\`\\`\nWhere [YOUR_PATCH] is the actual content of your patch, specified in the following V4A diff format.\n*** [ACTION] File: [path/to/file] -> ACTION can be one of Add, Update, or Delete.\nFor each snippet of code that needs to be changed, repeat the following:\n[context_before] -> See below for further instructions on context.\n- [old_code] -> Precede the old code with a minus sign.\n+ [new_code] -> Precede the new, replacement code with a plus sign.\n[context_after] -> See below for further instructions on context.\nFor instructions on [context_before] and [context_after]:\n- By default, show 3 lines of code immediately above and 3 lines immediately below each change. If a change is within 3 lines of a previous change, do NOT duplicate the first change\u2019s [context_after] lines in the second change\u2019s [context_before] lines.\n- If 3 lines of context is insufficient to uniquely identify the snippet of code within the file, use the @@ operator to indicate the class or function to which the snippet belongs. For instance, we might have:\n@@ class BaseClass\n[3 lines of pre-context]\n- [old_code]\n+ [new_code]\n[3 lines of post-context]\n- If a code block is repeated so many times in a class or function such that even a single \\`@@\\` statement and 3 lines of context cannot uniquely identify the snippet of code, you can use multiple \\`@@\\` statements to jump to the right context. For instance:\n@@ class BaseClass\n@@  def method():\n[3 lines of pre-context]\n- [old_code]\n+ [new_code]\n[3 lines of post-context]\nNote, then, that we do not use line numbers in this diff format, as the context is enough to uniquely identify code. An example of a message that you might pass as "input" to this function, in order to apply a patch, is shown below.\n\\`\\`\\`bash\n{"cmd": ["apply_patch", "<<\'EOF\'\\\\n*** Begin Patch\\\\n*** Update File: pygorithm/searching/binary_search.py\\\\n@@ class BaseClass\\\\n@@     def search():\\\\n-        pass\\\\n+        raise NotImplementedError()\\\\n@@ class Subclass\\\\n@@     def search():\\\\n-        pass\\\\n+        raise NotImplementedError()\\\\n*** End Patch\\\\nEOF\\\\n"], "workdir": "..."}\n\\`\\`\\`\nFile references can only be relative, NEVER ABSOLUTE. After the apply_patch command is run, it will always say "Done!", regardless of whether the patch was successfully applied or not. However, you can determine if there are issue and errors by looking at any warnings or logging lines printed BEFORE the "Done!" is output.\n</apply_patch>\n\n<persistence>\nYou are an agent - please keep going until the user\u2019s query is completely resolved, before ending your turn and yielding back to the user. Only terminate your turn when you are sure that the problem is solved.\n- Never stop at uncertainty \u2014 research or deduce the most reasonable approach and continue.\n- Do not ask the human to confirm assumptions \u2014 document them, act on them, and adjust mid-task if proven wrong.\n</persistence>\n\n<exploration>\nIf you are not sure about file content or codebase structure pertaining to the user\u2019s request, use your tools to read files and gather the relevant information: do NOT guess or make up an answer.\nBefore coding, always:\n- Decompose the request into explicit requirements, unclear areas, and hidden assumptions.\n- Map the scope: identify the codebase regions, files, functions, or libraries likely involved. If unknown, plan and perform targeted searches.\n- Check dependencies: identify relevant frameworks, APIs, config files, data formats, and versioning concerns.\n- Resolve ambiguity proactively: choose the most probable interpretation based on repo context, conventions, and dependency docs.\n- Define the output contract: exact deliverables such as files changed, expected outputs, API responses, CLI behavior, and tests passing.\n- Formulate an execution plan: research steps, implementation sequence, and testing strategy in your own words and refer to it as you work through the task.\n</exploration>\n\n<verification>\nRoutinely verify your code works as you work through the task, especially any deliverables to ensure they run properly. Don\'t hand back to the user until you are sure that the problem is solved.\nExit excessively long running processes and optimize your code to run faster.\n</verification>\n\n<efficiency>\nEfficiency is key. you have a time limit. Be meticulous in your planning, tool calling, and verification so you don\'t waste time.\n</efficiency>\n\n<final_instructions>\nNever use editor tools to edit files. Always use the \\`apply_patch\\` tool.\n</final_instructions>\n'})}),"\n",(0,i.jsx)(t,{children:(0,i.jsx)("link",{rel:"canonical",href:"https://cookbook.openai.com/examples/gpt-5/gpt-5_prompting_guide"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(6540);const i={},r=o.createContext(i);function a(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);