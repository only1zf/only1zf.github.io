"use strict";(self.webpackChunkpub=self.webpackChunkpub||[]).push([[2205],{1300:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/7bbbca3bf3f5526d897ebf7750274b44_MD5-8c0a015d6b64de5c3d51112b7df7d015.png"},1895:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/967cbfb18a735e79f85791d8f3594cb2_MD5-5f5194e76daa87465b5473694b02576f.png"},3370:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/12f709784cb5a1c04cda08bf34b06273_MD5-68a8675b57956c884722327f5e80bcc1.png"},4913:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/543949b8fa40af4f1cb4315aabb88eda_MD5-88b4c91525c322648e4275880bf7609c.jpg"},7419:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/93a7e3d6d017d7c7878ebf8b723be3f0_MD5-0f9aaec5326479a0076ec8cb71a8efae.png"},7991:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/ce071b31b321a8d9d927c1d4254216a4_MD5-9f64bb07ac6ab3d6f11341c172cb745c.png"},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(6540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},8867:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/a507657135cfc949e59c8999248f1025_MD5-7d8af572352b06f4210a1ddba83d8f04.jpg"},9431:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"linux-perf-examples","title":"linux-perf-examples","description":"Linux perf Examples","source":"@site/docs/linux-perf-examples.md","sourceDirName":".","slug":"/linux-perf-examples","permalink":"/docs/linux-perf-examples","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"source":"https://www.brendangregg.com/perf.html"},"sidebar":"refSidebar","previous":{"title":"Linux Observability Tools","permalink":"/docs/linux-observability-tools"},"next":{"title":"macOS","permalink":"/docs/macOS"}}');var t=s(4848),a=s(8453);const i={source:"https://www.brendangregg.com/perf.html"},o=void 0,l={},c=[{value:"Linux perf Examples",id:"linux-perf-examples",level:2},{value:"1. Screenshot",id:"1-screenshot",level:2},{value:"2. One-Liners",id:"2-one-liners",level:2},{value:"Listing Events",id:"listing-events",level:3},{value:"Counting Events",id:"counting-events",level:3},{value:"Profiling",id:"profiling",level:3},{value:"Static Tracing",id:"static-tracing",level:3},{value:"Dynamic Tracing",id:"dynamic-tracing",level:3},{value:"Mixed",id:"mixed",level:3},{value:"Special",id:"special",level:3},{value:"Reporting",id:"reporting",level:3},{value:"3. Presentations",id:"3-presentations",level:2},{value:"Kernel Recipes (2017)",id:"kernel-recipes-2017",level:3},{value:"4. Background",id:"4-background",level:2},{value:"4.1. Prerequisites",id:"41-prerequisites",level:2},{value:"4.2. Symbols",id:"42-symbols",level:2},{value:"4.3. JIT Symbols (Java, Node.js)",id:"43-jit-symbols-java-nodejs",level:2},{value:"4.4 Stack Traces",id:"44-stack-traces",level:2},{value:"4.5. Audience",id:"45-audience",level:2},{value:"4.6. Usage",id:"46-usage",level:2},{value:"4.7. Usage Examples",id:"47-usage-examples",level:2},{value:"Caveats",id:"caveats",level:3},{value:"4.8. Special Usage",id:"48-special-usage",level:2},{value:"5. Events",id:"5-events",level:2},{value:"5.1. Software Events",id:"51-software-events",level:2},{value:"5.2. Hardware Events (PMCs)",id:"52-hardware-events-pmcs",level:2},{value:"5.3. Kernel Tracepoints",id:"53-kernel-tracepoints",level:2},{value:"5.4. User-Level Statically Defined Tracing (USDT)",id:"54-user-level-statically-defined-tracing-usdt",level:2},{value:"5.5. Dynamic Tracing",id:"55-dynamic-tracing",level:2},{value:"6. Examples",id:"6-examples",level:2},{value:"6.1. CPU Statistics",id:"61-cpu-statistics",level:2},{value:"CPU Microarchitecture",id:"cpu-microarchitecture",level:3},{value:"Detailed Mode",id:"detailed-mode",level:3},{value:"Specific Counters",id:"specific-counters",level:3},{value:"Raw Counters",id:"raw-counters",level:3},{value:"Other Options",id:"other-options",level:3},{value:"6.2. Timed Profiling",id:"62-timed-profiling",level:2},{value:"6.3. Event Profiling",id:"63-event-profiling",level:2},{value:"Skew and PEBS",id:"skew-and-pebs",level:3},{value:"6.4. Static Kernel Tracing",id:"64-static-kernel-tracing",level:2},{value:"Counting Syscalls",id:"counting-syscalls",level:3},{value:"perf vs strace",id:"perf-vs-strace",level:3},{value:"New Processes",id:"new-processes",level:3},{value:"Outbound Connections",id:"outbound-connections",level:3},{value:"Socket Buffers",id:"socket-buffers",level:3},{value:"6.5. Static User Tracing",id:"65-static-user-tracing",level:2},{value:"6.6. Dynamic Tracing",id:"66-dynamic-tracing",level:2},{value:"Kernel: tcp_sendmsg()",id:"kernel-tcp_sendmsg",level:3},{value:"Kernel: tcp_sendmsg() with size",id:"kernel-tcp_sendmsg-with-size",level:3},{value:"Kernel: tcp_sendmsg() line number and local variable",id:"kernel-tcp_sendmsg-line-number-and-local-variable",level:3},{value:"User: malloc()",id:"user-malloc",level:3},{value:"User: malloc() with size",id:"user-malloc-with-size",level:3},{value:"6.7. Scheduler Analysis",id:"67-scheduler-analysis",level:2},{value:"6.8. eBPF",id:"68-ebpf",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"kmem_cache_alloc from Example",id:"kmem_cache_alloc-from-example",level:3},{value:"More Examples",id:"more-examples",level:3},{value:"7. Visualizations",id:"7-visualizations",level:2},{value:"7.1. Flame Graphs",id:"71-flame-graphs",level:2},{value:"Example",id:"example",level:3},{value:"Generation",id:"generation",level:3},{value:"Piping",id:"piping",level:3},{value:"Filtering",id:"filtering",level:3},{value:"Newer perf",id:"newer-perf",level:3},{value:"7.2. Heat Maps",id:"72-heat-maps",level:2},{value:"Example",id:"example-1",level:3},{value:"Gathering",id:"gathering",level:3},{value:"Processing",id:"processing",level:3},{value:"Generation",id:"generation-1",level:3},{value:"Overheads",id:"overheads",level:3},{value:"8. Targets",id:"8-targets",level:2},{value:"8.1. Java",id:"81-java",level:2},{value:"8.2. Node.js",id:"82-nodejs",level:2},{value:"9. More",id:"9-more",level:2},{value:"10. Building",id:"10-building",level:2},{value:"Packages: Ubuntu, 3.8.6",id:"packages-ubuntu-386",level:3},{value:"Kernel Config: 3.8.6",id:"kernel-config-386",level:3},{value:"10.1. Static Builds",id:"101-static-builds",level:2},{value:"11. Troubleshooting",id:"11-troubleshooting",level:2},{value:"12. Other Tools",id:"12-other-tools",level:2},{value:"13. Resources",id:"13-resources",level:2},{value:"13.1. Posts",id:"131-posts",level:2},{value:"13.2. Links",id:"132-links",level:2},{value:"14. Email",id:"14-email",level:2}];function d(e){const n={a:"a",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"linux-perf-examples",children:"Linux perf Examples"}),"\n",(0,t.jsxs)(n.p,{children:["These are some examples of using the ",(0,t.jsx)(n.a,{href:"https://perf.wiki.kernel.org/index.php/Main_Page",children:"perf"})," Linux profiler, which has also been called Performance Counters for Linux (PCL), Linux perf events (LPE), or perf_events. Like ",(0,t.jsx)(n.a,{href:"http://web.eece.maine.edu/~vweaver/projects/perf_events/",children:"Vince Weaver"}),', I\'ll call it perf_events so that you can search on that term later. Searching for just "perf" finds sites on the police, petroleum, weed control, and a ',(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/perf_events/omg-so-perf.jpg",children:"T-shirt"}),". This is not an official perf page, for either perf_events or the T-shirt."]}),"\n",(0,t.jsx)(n.p,{children:"perf_events is an event-oriented observability tool, which can help you solve advanced performance and troubleshooting functions. Questions that can be answered include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Why is the kernel on-CPU so much? What code-paths?"}),"\n",(0,t.jsx)(n.li,{children:"Which code-paths are causing CPU level 2 cache misses?"}),"\n",(0,t.jsx)(n.li,{children:"Are the CPUs stalled on memory I/O?"}),"\n",(0,t.jsx)(n.li,{children:"Which code-paths are allocating memory, and how much?"}),"\n",(0,t.jsx)(n.li,{children:"What is triggering TCP retransmits?"}),"\n",(0,t.jsx)(n.li,{children:"Is a certain kernel function being called, and how often?"}),"\n",(0,t.jsx)(n.li,{children:"What reasons are threads leaving the CPU?"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["perf_events is part of the Linux kernel, under tools/perf. While it uses many Linux tracing features, some are not yet exposed via the perf command, and need to be used via the ftrace interface instead. My ",(0,t.jsx)(n.a,{href:"https://github.com/brendangregg/perf-tools",children:"perf-tools"})," collection (github) uses both perf_events and ftrace as needed."]}),"\n",(0,t.jsx)(n.p,{children:"This page includes my examples of perf_events. A table of contents:"}),"\n",(0,t.jsx)(n.table,{children:(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.th,{children:[(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Screenshot",children:"1. Screenshot"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#OneLiners",children:"2. One-Liners"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Presentations",children:"3. Presentations"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Background",children:"4. Background"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Prerequisites",children:"4.1. Prerequisites"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Symbols",children:"4.2. Symbols"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#JIT_Symbols",children:"4.3. JIT Symbols (Java, Node.js)"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#StackTraces",children:"4.4. Stack Traces"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Audience",children:"4.5. Audience"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Usage",children:"4.6. Usage"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#UsageExamples",children:"4.7. Usage Examples"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#SpecialUsage",children:"4.8. Special Usage"})]}),(0,t.jsxs)(n.th,{children:[(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Events",children:"5. Events"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#SoftwareEvents",children:"5.1. Software Events"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#HardwareEvents",children:"5.2. Hardware Events (PMCs)"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Tracepoints",children:"5.3. Kernel Tracepoints"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#USDT",children:"5.4. USDT"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#DynamicTracing",children:"5.5. Dynamic Tracing"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Examples",children:"6. Examples"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#CPUstatistics",children:"6.1. CPU Statistics"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#TimedProfiling",children:"6.2. Timed Profiling"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#EventProfiling",children:"6.3. Event Profiling"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#StaticKernelTracing",children:"6.4. Static Kernel Tracing"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#StaticUserTracing",children:"6.5. Static User Tracing"})]}),(0,t.jsxs)(n.th,{children:[(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#DynamicTracingEg",children:"6.6. Dynamic Tracing"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#SchedulerAnalysis",children:"6.7. Scheduler Analysis"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#eBPF",children:"6.8. eBPF"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Visualizations",children:"7. Visualizations"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#FlameGraphs",children:"7.1. Flame Graphs"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#HeatMaps",children:"7.2. Heat Maps"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Targets",children:"8. Targets"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#More",children:"9. More"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Building",children:"10. Building"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Troubleshooting",children:"11. Troubleshooting"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#OtherTools",children:"12. Other Tools"}),"   ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Resources",children:"13. Resources"})]})]})})}),"\n",(0,t.jsxs)(n.p,{children:["Key sections to start with are: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Events",children:"Events"}),", ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#OneLiners",children:"One-Liners"}),", ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Presentations",children:"Presentations"}),", ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Prerequisites",children:"Prerequisites"}),", ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#CPUstatistics",children:"CPU statistics"}),", ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#TimedProfiling",children:"Timed Profiling"}),", and ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#FlameGraphs",children:"Flame Graphs"}),". Also see my ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Posts",children:"Posts"})," about perf_events, and ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Links",children:"Links"})," for the main (official) perf_events page, awesome tutorial, and other links. The next sections introduce perf_events further, starting with a screenshot, one-liners, and then background."]}),"\n",(0,t.jsx)(n.p,{children:"This page is under construction, and there's a lot more to perf_events that I'd like to add. Hopefully this is useful so far."}),"\n",(0,t.jsx)(n.h2,{id:"1-screenshot",children:"1. Screenshot"}),"\n",(0,t.jsx)(n.p,{children:"Starting with a screenshot, here's perf version 3.9.3 tracing disk I/O:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e block:block_rq_issue -ag\n^C\n# ls -l perf.data\n-rw------- 1 root root 3458162 Jan 26 03:03 perf.data\n# perf report\n[...]\n# Samples: 2K of event 'block:block_rq_issue'\n# Event count (approx.): 2216\n#\n# Overhead       Command      Shared Object                Symbol\n# ........  ............  .................  ....................\n#\n    32.13%            dd  [kernel.kallsyms]  [k] blk_peek_request\n                      |\n                      --- blk_peek_request\n                          virtblk_request\n                          __blk_run_queue\n                         |          \n                         |--98.31%-- queue_unplugged\n                         |          blk_flush_plug_list\n                         |          |          \n                         |          |--91.00%-- blk_queue_bio\n                         |          |          generic_make_request\n                         |          |          submit_bio\n                         |          |          ext4_io_submit\n                         |          |          |          \n                         |          |          |--58.71%-- ext4_bio_write_page\n                         |          |          |          mpage_da_submit_io\n                         |          |          |          mpage_da_map_and_submit\n                         |          |          |          write_cache_pages_da\n                         |          |          |          ext4_da_writepages\n                         |          |          |          do_writepages\n                         |          |          |          __filemap_fdatawrite_range\n                         |          |          |          filemap_flush\n                         |          |          |          ext4_alloc_da_blocks\n                         |          |          |          ext4_release_file\n                         |          |          |          __fput\n                         |          |          |          ____fput\n                         |          |          |          task_work_run\n                         |          |          |          do_notify_resume\n                         |          |          |          int_signal\n                         |          |          |          close\n                         |          |          |          0x0\n                         |          |          |          \n                         |          |           --41.29%-- mpage_da_submit_io\n[...]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A perf record command was used to trace the block",":block","_rq_issue probe, which fires when a block device I/O request is issued (disk I/O). Options included -a to trace all CPUs, and -g to capture call graphs (stack traces). Trace data is written to a perf.data file, and tracing ended when Ctrl-C was hit. A summary of the perf.data file was printed using perf report, which builds a tree from the stack traces, coalescing common paths, and showing percentages for each path."]}),"\n",(0,t.jsx)(n.p,{children:"The perf report output shows that 2,216 events were traced (disk I/O), 32% of which from a dd command. These were issued by the kernel function blk_peek_request(), and walking down the stacks, about half of these 32% were from the close() system call."}),"\n",(0,t.jsx)(n.p,{children:'Note that I use the "#" prompt to signify that these commands were run as root, and I\'ll use "$" for user commands. Use sudo as needed.'}),"\n",(0,t.jsx)(n.h2,{id:"2-one-liners",children:"2. One-Liners"}),"\n",(0,t.jsx)(n.p,{children:"Some useful one-liners I've gathered or written. Terminology I'm using, from lowest to highest overhead:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"statistics"})," / ",(0,t.jsx)(n.strong,{children:"count"}),": increment an integer counter on events"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"sample"}),": collect details (eg, instruction pointer or stack) from a subset of events (once every...)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"trace"}),": collect details from every event"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"listing-events",children:"Listing Events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Listing all currently known events:\nperf list\n\n# Listing sched tracepoints:\nperf list 'sched:*'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"counting-events",children:"Counting Events"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# CPU counter statistics for the specified command:\nperf stat command\n\n# Detailed CPU counter statistics (includes extras) for the specified command:\nperf stat -d command\n\n# CPU counter statistics for the specified PID, until Ctrl-C:\nperf stat -p PID\n\n# CPU counter statistics for the entire system, for 5 seconds:\nperf stat -a sleep 5\n\n# Various basic CPU statistics, system wide, for 10 seconds:\nperf stat -e cycles,instructions,cache-references,cache-misses,bus-cycles -a sleep 10\n\n# Various CPU level 1 data cache statistics for the specified command:\nperf stat -e L1-dcache-loads,L1-dcache-load-misses,L1-dcache-stores command\n\n# Various CPU data TLB statistics for the specified command:\nperf stat -e dTLB-loads,dTLB-load-misses,dTLB-prefetch-misses command\n\n# Various CPU last level cache statistics for the specified command:\nperf stat -e LLC-loads,LLC-load-misses,LLC-stores,LLC-prefetches command\n\n# Using raw PMC counters, eg, counting unhalted core cycles:\nperf stat -e r003c -a sleep 5 \n\n# PMCs: counting cycles and frontend stalls via raw specification:\nperf stat -e cycles -e cpu/event=0x0e,umask=0x01,inv,cmask=0x01/ -a sleep 5\n\n# Count syscalls per-second system-wide:\nperf stat -e raw_syscalls:sys_enter -I 1000 -a\n\n# Count system calls by type for the specified PID, until Ctrl-C:\nperf stat -e 'syscalls:sys_enter_*' -p PID\n\n# Count system calls by type for the entire system, for 5 seconds:\nperf stat -e 'syscalls:sys_enter_*' -a sleep 5\n\n# Count scheduler events for the specified PID, until Ctrl-C:\nperf stat -e 'sched:*' -p PID\n\n# Count scheduler events for the specified PID, for 10 seconds:\nperf stat -e 'sched:*' -p PID sleep 10\n\n# Count ext4 events for the entire system, for 10 seconds:\nperf stat -e 'ext4:*' -a sleep 10\n\n# Count block device I/O events for the entire system, for 10 seconds:\nperf stat -e 'block:*' -a sleep 10\n\n# Count all vmscan events, printing a report every second:\nperf stat -e 'vmscan:*' -a -I 1000\n"})}),"\n",(0,t.jsx)(n.h3,{id:"profiling",children:"Profiling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Sample on-CPU functions for the specified command, at 99 Hertz:\nperf record -F 99 command\n\n# Sample on-CPU functions for the specified PID, at 99 Hertz, until Ctrl-C:\nperf record -F 99 -p PID\n\n# Sample on-CPU functions for the specified PID, at 99 Hertz, for 10 seconds:\nperf record -F 99 -p PID sleep 10\n\n# Sample CPU stack traces (via frame pointers) for the specified PID, at 99 Hertz, for 10 seconds:\nperf record -F 99 -p PID -g -- sleep 10\n\n# Sample CPU stack traces for the PID, using dwarf (dbg info) to unwind stacks, at 99 Hertz, for 10 seconds:\nperf record -F 99 -p PID --call-graph dwarf sleep 10\n\n# Sample CPU stack traces for the entire system, at 99 Hertz, for 10 seconds (< Linux 4.11):\nperf record -F 99 -ag -- sleep 10\n\n# Sample CPU stack traces for the entire system, at 99 Hertz, for 10 seconds (>= Linux 4.11):\nperf record -F 99 -g -- sleep 10\n\n# If the previous command didn't work, try forcing perf to use the cpu-clock event:\nperf record -F 99 -e cpu-clock -ag -- sleep 10\n\n# Sample CPU stack traces for a container identified by its /sys/fs/cgroup/perf_event cgroup:\nperf record -F 99 -e cpu-clock --cgroup=docker/1d567f4393190204...etc... -a -- sleep 10\n\n# Sample CPU stack traces for the entire system, with dwarf stacks, at 99 Hertz, for 10 seconds:\nperf record -F 99 -a --call-graph dwarf sleep 10\n\n# Sample CPU stack traces for the entire system, using last branch record for stacks, ... (>= Linux 4.?):\nperf record -F 99 -a --call-graph lbr sleep 10\n\n# Sample CPU stack traces, once every 10,000 Level 1 data cache misses, for 5 seconds:\nperf record -e L1-dcache-load-misses -c 10000 -ag -- sleep 5\n\n# Sample CPU stack traces, once every 100 last level cache misses, for 5 seconds:\nperf record -e LLC-load-misses -c 100 -ag -- sleep 5 \n\n# Sample on-CPU kernel instructions, for 5 seconds:\nperf record -e cycles:k -a -- sleep 5 \n\n# Sample on-CPU user instructions, for 5 seconds:\nperf record -e cycles:u -a -- sleep 5 \n\n# Sample on-CPU user instructions precisely (using PEBS), for 5 seconds:\nperf record -e cycles:up -a -- sleep 5 \n\n# Perform branch tracing (needs HW support), for 1 second:\nperf record -b -a sleep 1\n\n# Sample CPUs at 49 Hertz, and show top addresses and symbols, live (no perf.data file):\nperf top -F 49\n\n# Sample CPUs at 49 Hertz, and show top process names and segments, live:\nperf top -F 49 -ns comm,dso\n"})}),"\n",(0,t.jsx)(n.h3,{id:"static-tracing",children:"Static Tracing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Trace new processes, until Ctrl-C:\nperf record -e sched:sched_process_exec -a\n\n# Sample (take a subset of) context-switches, until Ctrl-C:\nperf record -e context-switches -a\n\n# Trace all context-switches, until Ctrl-C:\nperf record -e context-switches -c 1 -a\n\n# Include raw settings used (see: man perf_event_open):\nperf record -vv -e context-switches -a\n\n# Trace all context-switches via sched tracepoint, until Ctrl-C:\nperf record -e sched:sched_switch -a\n\n# Sample context-switches with stack traces, until Ctrl-C:\nperf record -e context-switches -ag\n\n# Sample context-switches with stack traces, for 10 seconds:\nperf record -e context-switches -ag -- sleep 10\n\n# Sample CS, stack traces, and with timestamps (< Linux 3.17, -T now default):\nperf record -e context-switches -ag -T\n\n# Sample CPU migrations, for 10 seconds:\nperf record -e migrations -a -- sleep 10\n\n# Trace all connect()s with stack traces (outbound connections), until Ctrl-C:\nperf record -e syscalls:sys_enter_connect -ag\n\n# Trace all accepts()s with stack traces (inbound connections), until Ctrl-C:\nperf record -e syscalls:sys_enter_accept* -ag\n\n# Trace all block device (disk I/O) requests with stack traces, until Ctrl-C:\nperf record -e block:block_rq_insert -ag\n\n# Sample at most 100 block device requests per second, until Ctrl-C:\nperf record -F 100 -e block:block_rq_insert -a\n\n# Trace all block device issues and completions (has timestamps), until Ctrl-C:\nperf record -e block:block_rq_issue -e block:block_rq_complete -a\n\n# Trace all block completions, of size at least 100 Kbytes, until Ctrl-C:\nperf record -e block:block_rq_complete --filter 'nr_sector > 200'\n\n# Trace all block completions, synchronous writes only, until Ctrl-C:\nperf record -e block:block_rq_complete --filter 'rwbs == \"WS\"'\n\n# Trace all block completions, all types of writes, until Ctrl-C:\nperf record -e block:block_rq_complete --filter 'rwbs ~ \"*W*\"'\n\n# Sample minor faults (RSS growth) with stack traces, until Ctrl-C:\nperf record -e minor-faults -ag\n\n# Trace all minor faults with stack traces, until Ctrl-C:\nperf record -e minor-faults -c 1 -ag\n\n# Sample page faults with stack traces, until Ctrl-C:\nperf record -e page-faults -ag\n\n# Trace all ext4 calls, and write to a non-ext4 location, until Ctrl-C:\nperf record -e 'ext4:*' -o /tmp/perf.data -a \n\n# Trace kswapd wakeup events, until Ctrl-C:\nperf record -e vmscan:mm_vmscan_wakeup_kswapd -ag\n\n# Add Node.js USDT probes (Linux 4.10+):\nperf buildid-cache --add \\`which node\\`\n\n# Trace the node http__server__request USDT event (Linux 4.10+):\nperf record -e sdt_node:http__server__request -a\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dynamic-tracing",children:"Dynamic Tracing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Add a tracepoint for the kernel tcp_sendmsg() function entry (\"--add\" is optional):\nperf probe --add tcp_sendmsg\n\n# Remove the tcp_sendmsg() tracepoint (or use \"--del\"):\nperf probe -d tcp_sendmsg\n\n# Add a tracepoint for the kernel tcp_sendmsg() function return:\nperf probe 'tcp_sendmsg%return'\n\n# Show available variables for the kernel tcp_sendmsg() function (needs debuginfo):\nperf probe -V tcp_sendmsg\n\n# Show available variables for the kernel tcp_sendmsg() function, plus external vars (needs debuginfo):\nperf probe -V tcp_sendmsg --externs\n\n# Show available line probes for tcp_sendmsg() (needs debuginfo):\nperf probe -L tcp_sendmsg\n\n# Show available variables for tcp_sendmsg() at line number 81 (needs debuginfo):\nperf probe -V tcp_sendmsg:81\n\n# Add a tracepoint for tcp_sendmsg(), with three entry argument registers (platform specific):\nperf probe 'tcp_sendmsg %ax %dx %cx'\n\n# Add a tracepoint for tcp_sendmsg(), with an alias (\"bytes\") for the %cx register (platform specific):\nperf probe 'tcp_sendmsg bytes=%cx'\n\n# Trace previously created probe when the bytes (alias) variable is greater than 100:\nperf record -e probe:tcp_sendmsg --filter 'bytes > 100'\n\n# Add a tracepoint for tcp_sendmsg() return, and capture the return value:\nperf probe 'tcp_sendmsg%return $retval'\n\n# Add a tracepoint for tcp_sendmsg(), and \"size\" entry argument (reliable, but needs debuginfo):\nperf probe 'tcp_sendmsg size'\n\n# Add a tracepoint for tcp_sendmsg(), with size and socket state (needs debuginfo):\nperf probe 'tcp_sendmsg size sk->__sk_common.skc_state'\n\n# Tell me how on Earth you would do this, but don't actually do it (needs debuginfo):\nperf probe -nv 'tcp_sendmsg size sk->__sk_common.skc_state'\n\n# Trace previous probe when size is non-zero, and state is not TCP_ESTABLISHED(1) (needs debuginfo):\nperf record -e probe:tcp_sendmsg --filter 'size > 0 && skc_state != 1' -a\n\n# Add a tracepoint for tcp_sendmsg() line 81 with local variable seglen (needs debuginfo):\nperf probe 'tcp_sendmsg:81 seglen'\n\n# Add a tracepoint for do_sys_open() with the filename as a string (needs debuginfo):\nperf probe 'do_sys_open filename:string'\n\n# Add a tracepoint for myfunc() return, and include the retval as a string:\nperf probe 'myfunc%return +0($retval):string'\n\n# Add a tracepoint for the user-level malloc() function from libc:\nperf probe -x /lib64/libc.so.6 malloc\n\n# Add a tracepoint for this user-level static probe (USDT, aka SDT event):\nperf probe -x /usr/lib64/libpthread-2.24.so %sdt_libpthread:mutex_entry\n\n# List currently available dynamic probes:\nperf probe -l\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mixed",children:"Mixed"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Trace system calls by process, showing a summary refreshing every 2 seconds:\nperf top -e raw_syscalls:sys_enter -ns comm\n\n# Trace sent network packets by on-CPU process, rolling output (no clear):\nstdbuf -oL perf top -e net:net_dev_xmit -ns comm | strings\n\n# Sample stacks at 99 Hertz, and, context switches:\nperf record -F99 -e cpu-clock -e cs -a -g \n\n# Sample stacks to 2 levels deep, and, context switch stacks to 5 levels (needs 4.8):\nperf record -F99 -e cpu-clock/max-stack=2/ -e cs/max-stack=5/ -a -g\n"})}),"\n",(0,t.jsx)(n.h3,{id:"special",children:"Special"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Record cacheline events (Linux 4.10+):\nperf c2c record -a -- sleep 10\n\n# Report cacheline events from previous recording (Linux 4.10+):\nperf c2c report\n"})}),"\n",(0,t.jsx)(n.h3,{id:"reporting",children:"Reporting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Show perf.data in an ncurses browser (TUI) if possible:\nperf report\n\n# Show perf.data with a column for sample count:\nperf report -n\n\n# Show perf.data as a text report, with data coalesced and percentages:\nperf report --stdio\n\n# Report, with stacks in folded format: one line per stack (needs 4.4):\nperf report --stdio -n -g folded\n\n# List all events from perf.data:\nperf script\n\n# List all perf.data events, with data header (newer kernels; was previously default):\nperf script --header\n\n# List all perf.data events, with customized fields (< Linux 4.1):\nperf script -f time,event,trace\n\n# List all perf.data events, with customized fields (>= Linux 4.1):\nperf script -F time,event,trace\n\n# List all perf.data events, with my recommended fields (needs record -a; newer kernels):\nperf script --header -F comm,pid,tid,cpu,time,event,ip,sym,dso \n\n# List all perf.data events, with my recommended fields (needs record -a; older kernels):\nperf script -f comm,pid,tid,cpu,time,event,ip,sym,dso\n\n# Dump raw contents from perf.data as hex (for debugging):\nperf script -D\n\n# Disassemble and annotate instructions with percentages (needs some debuginfo):\nperf annotate --stdio\n"})}),"\n",(0,t.jsx)(n.p,{children:"These one-liners serve to illustrate the capabilities of perf_events, and can also be used a bite-sized tutorial: learn perf_events one line at a time. You can also print these out as a perf_events cheatsheet."}),"\n",(0,t.jsx)(n.h2,{id:"3-presentations",children:"3. Presentations"}),"\n",(0,t.jsx)(n.h3,{id:"kernel-recipes-2017",children:"Kernel Recipes (2017)"}),"\n",(0,t.jsxs)(n.p,{children:["At ",(0,t.jsx)(n.a,{href:"https://kernel-recipes.org/en/2017/talks/perf-in-netflix/",children:"Kernel Recipes 2017"})," I gave an updated talk on Linux perf at Netflix, focusing on getting CPU profiling and flame graphs to work. This talk includes a crash course on perf_events, plus gotchas such as fixing stack traces and symbols when profiling Java, Node.js, VMs, and containers."]}),"\n",(0,t.jsxs)(n.p,{children:["A video of the talk is on ",(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=UVM3WX8Lq2k",children:"youtube"})," and the slides are on ",(0,t.jsx)(n.a,{href:"https://www.slideshare.net/brendangregg/kernel-recipes-2017-using-linux-perf-at-netflix",children:"slideshare"}),":"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=UVM3WX8Lq2k",children:(0,t.jsx)(n.img,{src:s(7419).A+"",width:"520",height:"291"})})}),"\n",(0,t.jsxs)(n.p,{children:["There's also an older version of this talk from 2015, which I've ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2015-02-27/linux-profiling-at-netflix.html",children:"posted"})," about."]}),"\n",(0,t.jsx)(n.h2,{id:"4-background",children:"4. Background"}),"\n",(0,t.jsx)(n.p,{children:"The following sections provide some background for understanding perf_events and how to use it. I'll describe the prerequisites, audience, usage, events, and tracepoints."}),"\n",(0,t.jsx)(n.h2,{id:"41-prerequisites",children:"4.1. Prerequisites"}),"\n",(0,t.jsxs)(n.p,{children:["The perf tool is in the ",(0,t.jsx)(n.strong,{children:"linux-tools-common"}),' package. Start by adding that, then running " perf " to see if you get the USAGE message. It may tell you to install another related package (linux-tools- ',(0,t.jsx)(n.em,{children:"kernelversion"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["You can also build and add perf from the Linux kernel source. See the ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Building",children:"Building"})," section."]}),"\n",(0,t.jsx)(n.p,{children:"To get the most out perf, you'll want symbols and stack traces. These may work by default in your Linux distribution, or they may require the addition of packages, or recompilation of the kernel with additional config options."}),"\n",(0,t.jsx)(n.h2,{id:"42-symbols",children:"4.2. Symbols"}),"\n",(0,t.jsx)(n.p,{children:"perf_events, like other debug tools, needs symbol information (symbols). These are used to translate memory addresses into function and variable names, so that they can be read by us humans. Without symbols, you'll see hexadecimal numbers representing the memory addresses profiled."}),"\n",(0,t.jsx)(n.p,{children:"The following perf report output shows stack traces, however, only hexadecimal numbers can be seen:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"57.14%     sshd  libc-2.15.so        [.] connect           \n               |\n               --- connect\n                  |          \n                  |--25.00%-- 0x7ff3c1cddf29\n                  |          \n                  |--25.00%-- 0x7ff3bfe82761\n                  |          0x7ff3bfe82b7c\n                  |          \n                  |--25.00%-- 0x7ff3bfe82dfc\n                   --25.00%-- [...]\n"})}),"\n",(0,t.jsx)(n.p,{children:'If the software was added by packages, you may find debug packages (often "-dbgsym") which provide the symbols. Sometimes perf report will tell you to install these, eg: "no symbols found in /bin/dd, maybe install a debug package?".'}),"\n",(0,t.jsx)(n.p,{children:"Here's the same perf report output seen earlier, after adding openssh-server-dbgsym and libc6-dbgsym (this is on ubuntu 12.04):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"57.14%     sshd  libc-2.15.so        [.] __GI___connect_internal\n               |\n               --- __GI___connect_internal\n                  |          \n                  |--25.00%-- add_one_listen_addr.isra.0\n                  |          \n                  |--25.00%-- __nscd_get_mapping\n                  |          __nscd_get_map_ref\n                  |          \n                  |--25.00%-- __nscd_open_socket\n                   --25.00%-- [...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"I find it useful to add both libc6-dbgsym and coreutils-dbgsym, to provide some symbol coverage of user-level OS codepaths."}),"\n",(0,t.jsx)(n.p,{children:"Another way to get symbols is to compile the software yourself. For example, I just compiled node (Node.js):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# file node-v0.10.28/out/Release/node \nnode-v0.10.28/out/Release/node: ELF 64-bit LSB executable, ... not stripped\n"})}),"\n",(0,t.jsx)(n.p,{children:"This has not been stripped, so I can profile node and see more than just hex. If the result is stripped, configure your build system not to run strip(1) on the output binaries."}),"\n",(0,t.jsx)(n.p,{children:"Kernel-level symbols are in the kernel debuginfo package, or when the kernel is compiled with CONFIG_KALLSYMS."}),"\n",(0,t.jsx)(n.h2,{id:"43-jit-symbols-java-nodejs",children:"4.3. JIT Symbols (Java, Node.js)"}),"\n",(0,t.jsx)(n.p,{children:"Programs that have virtual machines (VMs), like Java's JVM and node's v8, execute their own virtual processor, which has its own way of executing functions and managing stacks. If you profile these using perf_events, you'll see symbols for the VM engine, which have some use (eg, to identify if time is spent in GC), but you won't see the language-level context you might be expecting. Eg, you won't see Java classes and methods."}),"\n",(0,t.jsxs)(n.p,{children:["perf_events has JIT support to solve this, which requires the VM to maintain a /tmp/perf-PID.map file for symbol translation. Java can do this with ",(0,t.jsx)(n.a,{href:"https://github.com/jvm-profiling-tools/perf-map-agent",children:"perf-map-agent"}),", and Node.js 0.11.13+ with --perf_basic_prof. See my blog post ",(0,t.jsx)(n.a,{href:"http://www.brendangregg.com/blog/2014-09-17/node-flame-graphs-on-linux.html",children:"Node.js flame graphs on Linux"})," for the steps."]}),"\n",(0,t.jsxs)(n.p,{children:["Note that Java may not show full stacks to begin with, due to hotspot on x86 omitting the frame pointer (just like gcc). On newer versions (JDK 8u60+), you can use the -XX:+PreserveFramePointer option to fix this behavior, and profile fully using perf. See my Netflix Tech Blog post, ",(0,t.jsx)(n.a,{href:"http://techblog.netflix.com/2015/07/java-in-flames.html",children:"Java in Flames"}),", for a full writeup, and my ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html#Java",children:"Java flame graphs"})," section, which links to an older patch and includes an example resulting flame graph. I also summarized the latest in my JavaOne 2016 talk ",(0,t.jsx)(n.a,{href:"http://www.slideshare.net/brendangregg/java-performance-analysis-on-linux-with-flame-graphs",children:"Java Performance Analysis on Linux with Flame Graphs"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"44-stack-traces",children:"4.4 Stack Traces"}),"\n",(0,t.jsx)(n.p,{children:"Always compile with frame pointers. Omitting frame pointers is an evil compiler optimization that breaks debuggers, and sadly, is often the default. Without them, you may see incomplete stacks from perf_events, like seen in the earlier sshd symbols example. There are three ways to fix this: either using dwarf data to unwind the stack, using last branch record (LBR) if available (a processor feature), or returning the frame pointers."}),"\n",(0,t.jsx)(n.p,{children:"There are other stack walking techniques, like BTS (Branch Trace Store), and the new ORC unwinder. I'll add docs for them at some point (and as perf support arrives)."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Frame Pointers"})}),"\n",(0,t.jsxs)(n.p,{children:["The earlier sshd example was a default build of OpenSSH, which uses compiler optimizations (-O2), which in this case has omitted the frame pointer. Here's how it looks after recompiling OpenSSH with ",(0,t.jsx)(n.strong,{children:"-fno-omit-frame-pointer"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"100.00%     sshd  libc-2.15.so   [.] __GI___connect_internal\n               |\n               --- __GI___connect_internal\n                  |          \n                  |--30.00%-- add_one_listen_addr.isra.0\n                  |          add_listen_addr\n                  |          fill_default_server_options\n                  |          main\n                  |          __libc_start_main\n                  |          \n                  |--20.00%-- __nscd_get_mapping\n                  |          __nscd_get_map_ref\n                  |          \n                  |--20.00%-- __nscd_open_socket\n                   --30.00%-- [...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now the ancestry from add_one_listen_addr() can be seen, down to main() and __libc_start_main()."}),"\n",(0,t.jsx)(n.p,{children:"The kernel can suffer the same problem. Here's an example CPU profile collected on an idle server, with stack traces (-g):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"99.97%  swapper  [kernel.kallsyms]  [k] default_idle\n            |\n            --- default_idle\n\n     0.03%     sshd  [kernel.kallsyms]  [k] iowrite16   \n               |\n               --- iowrite16\n                   __write_nocancel\n                   (nil)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The kernel stack traces are incomplete. Now a similar profile with ",(0,t.jsx)(n.strong,{children:"CONFIG_FRAME_POINTER=y"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"99.97%  swapper  [kernel.kallsyms]  [k] default_idle\n            |\n            --- default_idle\n                cpu_idle\n               |          \n               |--87.50%-- start_secondary\n               |          \n                --12.50%-- rest_init\n                          start_kernel\n                          x86_64_start_reservations\n                          x86_64_start_kernel\n\n     0.03%     sshd  [kernel.kallsyms]  [k] iowrite16\n               |\n               --- iowrite16\n                   vp_notify\n                   virtqueue_kick\n                   start_xmit\n                   dev_hard_start_xmit\n                   sch_direct_xmit\n                   dev_queue_xmit\n                   ip_finish_output\n                   ip_output\n                   ip_local_out\n                   ip_queue_xmit\n                   tcp_transmit_skb\n                   tcp_write_xmit\n                   __tcp_push_pending_frames\n                   tcp_sendmsg\n                   inet_sendmsg\n                   sock_aio_write\n                   do_sync_write\n                   vfs_write\n                   sys_write\n                   system_call_fastpath\n                   __write_nocancel\n"})}),"\n",(0,t.jsx)(n.p,{children:"Much better -- the entire path from the write() syscall (__write_nocancel) to iowrite16() can be seen."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Dwarf"})}),"\n",(0,t.jsx)(n.p,{children:'Since about the 3.9 kernel, perf_events has supported a workaround for missing frame pointers in user-level stacks: libunwind, which uses dwarf. This can be enabled using "--call-graph dwarf" (or "-g dwarf").'}),"\n",(0,t.jsxs)(n.p,{children:["Also see the ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Building",children:"Building"})," section for other notes about building perf_events, as without the right library, it may build itself without dwarf support."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"LBR"})}),"\n",(0,t.jsx)(n.p,{children:"You must have Last Branch Record access to be able to use this. It is disabled in most cloud environments, where you'll get this error:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -F 99 -a --call-graph lbr\nError:\nPMU Hardware doesn't support sampling/overflow-interrupts.\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here's an example of it working:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -F 99 -a --call-graph lbr\n^C[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.903 MB perf.data (163 samples) ]\n# perf script\n[...]\nstackcollapse-p 23867 [007] 4762187.971824:   29003297 cycles:ppp:\n                  1430c0 Perl_re_intuit_start (/usr/bin/perl)\n                  144118 Perl_regexec_flags (/usr/bin/perl)\n                   cfcc9 Perl_pp_match (/usr/bin/perl)\n                   cbee3 Perl_runops_standard (/usr/bin/perl)\n                   51fb3 perl_run (/usr/bin/perl)\n                   2b168 main (/usr/bin/perl)\n\nstackcollapse-p 23867 [007] 4762187.980184:   31532281 cycles:ppp:\n                   e3660 Perl_sv_force_normal_flags (/usr/bin/perl)\n                  109b86 Perl_leave_scope (/usr/bin/perl)\n                  1139db Perl_pp_leave (/usr/bin/perl)\n                   cbee3 Perl_runops_standard (/usr/bin/perl)\n                   51fb3 perl_run (/usr/bin/perl)\n                   2b168 main (/usr/bin/perl)\n\nstackcollapse-p 23867 [007] 4762187.989283:   32341031 cycles:ppp:\n                   cfae0 Perl_pp_match (/usr/bin/perl)\n                   cbee3 Perl_runops_standard (/usr/bin/perl)\n                   51fb3 perl_run (/usr/bin/perl)\n                   2b168 main (/usr/bin/perl)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Nice! Note that LBR is usually limited in stack depth (either 8, 16, or 32 frames), so it may not be suitable for deep stacks or flame graph generation, as flame graphs need to walk to the common root for merging."}),"\n",(0,t.jsx)(n.p,{children:"Here's that same program sampled using the by-default frame pointer walk:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -F 99 -a -g\n^C[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.882 MB perf.data (81 samples) ]\n# perf script\n[...]\nstackcollapse-p 23883 [005] 4762405.747834:   35044916 cycles:ppp:\n                  135b83 [unknown] (/usr/bin/perl)\n\nstackcollapse-p 23883 [005] 4762405.757935:   35036297 cycles:ppp:\n                   ee67d Perl_sv_gets (/usr/bin/perl)\n\nstackcollapse-p 23883 [005] 4762405.768038:   35045174 cycles:ppp:\n                  137334 [unknown] (/usr/bin/perl)\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can recompile Perl with frame pointer support (in its./Configure, it asks what compiler options: add -fno-omit-frame-pointer). Or you can use LBR if it's available, and you don't need very long stacks."}),"\n",(0,t.jsx)(n.h2,{id:"45-audience",children:"4.5. Audience"}),"\n",(0,t.jsx)(n.p,{children:"To use perf_events, you'll either:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Develop your own commands"}),"\n",(0,t.jsx)(n.li,{children:"Run example commands"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Developing new invocations of perf_events requires the study of kernel and application code, which isn't for everyone. Many more people will use perf_events by running commands developed by other people, like the examples on this page. This can work out fine: your organization may only need one or two people who can develop perf_events commands or source them, and then share them for use by the entire operation and support groups."}),"\n",(0,t.jsxs)(n.p,{children:["Either way, you need to know the capabilities of perf_events so you know when to reach for it, whether that means searching for an example command or writing your own. One goal of the examples that follow is just to show you what can be done, to help you learn these capabilities. You should also browse examples on other sites (",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Links",children:"Links"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["If you've never used perf_events before, you may want to test before production use (it has had ",(0,t.jsx)(n.a,{href:"http://web.eecs.utk.edu/~vweaver1/projects/perf-events/kernel_panics.html",children:"kernel panic"})," bugs in the past). My experience has been a good one (no panics)."]}),"\n",(0,t.jsx)(n.h2,{id:"46-usage",children:"4.6. Usage"}),"\n",(0,t.jsx)(n.p,{children:"perf_events provides a command line tool, perf, and subcommands for various profiling activities. This is a single interface for the different instrumentation frameworks that provide the various events."}),"\n",(0,t.jsx)(n.p,{children:"The perf command alone will list the subcommands; here is perf version 4.10 (for the Linux 4.10 kernel):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf\n\n usage: perf [--version] [--help] [OPTIONS] COMMAND [ARGS]\n\n The most commonly used perf commands are:\n   annotate        Read perf.data (created by perf record) and display annotated code\n   archive         Create archive with object files with build-ids found in perf.data file\n   bench           General framework for benchmark suites\n   buildid-cache   Manage build-id cache.\n   buildid-list    List the buildids in a perf.data file\n   config          Get and set variables in a configuration file.\n   data            Data file related processing\n   diff            Read perf.data files and display the differential profile\n   evlist          List the event names in a perf.data file\n   inject          Filter to augment the events stream with additional information\n   kmem            Tool to trace/measure kernel memory properties\n   kvm             Tool to trace/measure kvm guest os\n   list            List all symbolic event types\n   lock            Analyze lock events\n   mem             Profile memory accesses\n   record          Run a command and record its profile into perf.data\n   report          Read perf.data (created by perf record) and display the profile\n   sched           Tool to trace/measure scheduler properties (latencies)\n   script          Read perf.data (created by perf record) and display trace output\n   stat            Run a command and gather performance counter statistics\n   test            Runs sanity tests.\n   timechart       Tool to visualize total system behavior during a workload\n   top             System profiling tool.\n   probe           Define new dynamic tracepoints\n   trace           strace inspired tool\n\n See 'perf help COMMAND' for more information on a specific command.\n"})}),"\n",(0,t.jsx)(n.p,{children:"Apart from separate help for each subcommand, there is also documentation in the kernel source under tools/perf/Documentation. perf has evolved, with different functionality added over time, so on an older kernel you may be missing some subcommands or functionality. Also, its usage may not feel consistent as you switch between activities. It's best to think of it as a multi-tool."}),"\n",(0,t.jsx)(n.p,{children:"perf_events can instrument in three ways (now using the perf_events terminology):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"counting"})," events in-kernel context, where a summary of counts is printed by perf. This mode does not generate a perf.data file."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"sampling"})," events, which writes event data to a kernel buffer, which is read at a gentle asynchronous rate by the perf command to write to the perf.data file. This file is then read by the perf report or perf script commands."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"bpf"})," programs on events, a new feature in Linux 4.4+ kernels that can execute custom user-defined programs in kernel space, which can perform efficient filters and summaries of the data. Eg, efficiently-measured latency histograms."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Try starting by counting events using the perf stat command, to see if this is sufficient. This subcommand costs the least overhead."}),"\n",(0,t.jsx)(n.p,{children:"When using the sampling mode with perf record, you'll need to be a little careful about the overheads, as the capture files can quickly become hundreds of Mbytes. It depends on the rate of the event you are tracing: the more frequent, the higher the overhead and larger the perf.data size."}),"\n",(0,t.jsxs)(n.p,{children:["To really cut down overhead and generate more advanced summaries, write BPF programs executed by perf. See the ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#eBPF",children:"eBPF"})," section."]}),"\n",(0,t.jsx)(n.h2,{id:"47-usage-examples",children:"4.7. Usage Examples"}),"\n",(0,t.jsx)(n.p,{children:"These example sequences have been chosen to illustrate some different ways that perf is used, from gathering to reporting."}),"\n",(0,t.jsx)(n.p,{children:"Performance counter summaries, including IPC, for the gzip command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf stat gzip largefile\n"})}),"\n",(0,t.jsx)(n.p,{children:"Count all scheduler process events for 5 seconds, and count by tracepoint:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf stat -e 'sched:sched_process_*' -a sleep 5\n"})}),"\n",(0,t.jsx)(n.p,{children:"Trace all scheduler process events for 5 seconds, and count by both tracepoint and process name:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e 'sched:sched_process_*' -a sleep 5\n# perf report\n"})}),"\n",(0,t.jsx)(n.p,{children:"Trace all scheduler process events for 5 seconds, and dump per-event details:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e 'sched:sched_process_*' -a sleep 5\n# perf script\n"})}),"\n",(0,t.jsx)(n.p,{children:"Trace read() syscalls, when requested bytes is less than 10:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e 'syscalls:sys_enter_read' --filter 'count < 10' -a\n"})}),"\n",(0,t.jsx)(n.p,{children:"Sample CPU stacks at 99 Hertz, for 5 seconds:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -F 99 -ag -- sleep 5\n# perf report\n"})}),"\n",(0,t.jsx)(n.p,{children:"Dynamically instrument the kernel tcp_sendmsg() function, and trace it for 5 seconds, with stack traces:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf probe --add tcp_sendmsg\n# perf record -e probe:tcp_sendmsg -ag -- sleep 5\n# perf probe --del tcp_sendmsg\n# perf report\n"})}),"\n",(0,t.jsx)(n.p,{children:"Deleting the tracepoint (--del) wasn't necessary; I included it to show how to return the system to its original state."}),"\n",(0,t.jsx)(n.h3,{id:"caveats",children:"Caveats"}),"\n",(0,t.jsx)(n.p,{children:"The use of -p PID as a filter doesn't work properly on some older kernel versions (Linux 3.x): perf hits 100% CPU and needs to be killed. It's annoying. The workaround is to profile all CPUs (-a), and filter PIDs later."}),"\n",(0,t.jsx)(n.h2,{id:"48-special-usage",children:"4.8. Special Usage"}),"\n",(0,t.jsx)(n.p,{children:"There's a number of subcommands that provide special purpose functionality. These include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"perf c2c"})," (Linux 4.10+): cache-2-cache and cacheline false sharing analysis."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"perf kmem"}),": kernel memory allocation analysis."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"perf kvm"}),": KVM virtual guest analysis."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"perf lock"}),": lock analysis."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"perf mem"}),": memory access analysis."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"perf sched"}),": kernel scheduler statistics. ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#SchedulerAnalysis",children:"Examples"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These make use of perf's existing instrumentation capabilities, recording selected events and reporting them in custom ways."}),"\n",(0,t.jsx)(n.h2,{id:"5-events",children:"5. Events"}),"\n",(0,t.jsxs)(n.p,{children:['perf_events instruments "events", which are a unified interface for different kernel instrumentation frameworks. The following map (from my ',(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#SCALE13x",children:"SCaLE13x talk"}),") illustrates the event sources:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/perf_events/perf_events_map.png",children:(0,t.jsx)(n.img,{src:s(3370).A+"",width:"1500",height:"1050"})})}),"\n",(0,t.jsx)(n.p,{children:"The types of events are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hardware Events"}),": CPU performance monitoring counters."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Software Events"}),": These are low level events based on kernel counters. For example, CPU migrations, minor faults, major faults, etc."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Kernel Tracepoint Events"}),": This are static kernel-level instrumentation points that are hardcoded in interesting and logical places in the kernel."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Statically-Defined Tracing (USDT)"}),": These are static tracepoints for user-level programs and applications."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dynamic Tracing"}),": Software can be dynamically instrumented, creating events in any location. For kernel software, this uses the kprobes framework. For user-level software, uprobes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Timed Profiling"}),": Snapshots can be collected at an arbitrary frequency, using perf record -F ",(0,t.jsx)(n.em,{children:"Hz"}),". This is commonly used for CPU usage profiling, and works by creating custom timed interrupt events."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Details about the events can be collected, including timestamps, the code path that led to it, and other specific details. The capabilities of perf_events are enormous, and you're likely to only ever use a fraction."}),"\n",(0,t.jsx)(n.p,{children:"Currently available events can be listed using the list subcommand:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf list\nList of pre-defined events (to be used in -e):\n  cpu-cycles OR cycles                               [Hardware event]\n  instructions                                       [Hardware event]\n  cache-references                                   [Hardware event]\n  cache-misses                                       [Hardware event]\n  branch-instructions OR branches                    [Hardware event]\n  branch-misses                                      [Hardware event]\n  bus-cycles                                         [Hardware event]\n  stalled-cycles-frontend OR idle-cycles-frontend    [Hardware event]\n  stalled-cycles-backend OR idle-cycles-backend      [Hardware event]\n  ref-cycles                                         [Hardware event]\n  cpu-clock                                          [Software event]\n  task-clock                                         [Software event]\n  page-faults OR faults                              [Software event]\n  context-switches OR cs                             [Software event]\n  cpu-migrations OR migrations                       [Software event]\n  minor-faults                                       [Software event]\n  major-faults                                       [Software event]\n  alignment-faults                                   [Software event]\n  emulation-faults                                   [Software event]\n  L1-dcache-loads                                    [Hardware cache event]\n  L1-dcache-load-misses                              [Hardware cache event]\n  L1-dcache-stores                                   [Hardware cache event]\n[...]\n  rNNN                                               [Raw hardware event descriptor]\n  cpu/t1=v1[,t2=v2,t3 ...]/modifier                  [Raw hardware event descriptor]\n   (see 'man perf-list' on how to encode it)\n  mem:<addr>[:access]                                [Hardware breakpoint]\n  probe:tcp_sendmsg                                  [Tracepoint event]\n[...]\n  sched:sched_process_exec                           [Tracepoint event]\n  sched:sched_process_fork                           [Tracepoint event]\n  sched:sched_process_wait                           [Tracepoint event]\n  sched:sched_wait_task                              [Tracepoint event]\n  sched:sched_process_exit                           [Tracepoint event]\n[...]\n# perf list | wc -l\n     657\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When you use dynamic tracing, you are extending this list. The probe",":tcp","_sendmsg tracepoint in this list is an example, which I added by instrumenting tcp_sendmsg(). Profiling (sampling) events are not listed."]}),"\n",(0,t.jsx)(n.h2,{id:"51-software-events",children:"5.1. Software Events"}),"\n",(0,t.jsx)(n.p,{children:"There is a small number of fixed software events provided by perf:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf list\n\nList of pre-defined events (to be used in -e):\n\n  alignment-faults                                   [Software event]\n  bpf-output                                         [Software event]\n  context-switches OR cs                             [Software event]\n  cpu-clock                                          [Software event]\n  cpu-migrations OR migrations                       [Software event]\n  dummy                                              [Software event]\n  emulation-faults                                   [Software event]\n  major-faults                                       [Software event]\n  minor-faults                                       [Software event]\n  page-faults OR faults                              [Software event]\n  task-clock                                         [Software event]\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"These are also documented in the man page perf_event_open(2):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[...]\n                   PERF_COUNT_SW_CPU_CLOCK\n                          This reports the CPU clock, a  high-resolution  per-\n                          CPU timer.\n\n                   PERF_COUNT_SW_TASK_CLOCK\n                          This reports a clock count specific to the task that\n                          is running.\n\n                   PERF_COUNT_SW_PAGE_FAULTS\n                          This reports the number of page faults.\n\n                   PERF_COUNT_SW_CONTEXT_SWITCHES\n                          This counts context switches.  Until  Linux  2.6.34,\n                          these  were all reported as user-space events, after\n                          that they are reported as happening in the kernel.\n\n                   PERF_COUNT_SW_CPU_MIGRATIONS\n                          This reports the number of  times  the  process  has\n                          migrated to a new CPU.\n\n                   PERF_COUNT_SW_PAGE_FAULTS_MIN\n                          This  counts the number of minor page faults.  These\n                          did not require disk I/O to handle.\n[...]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The kernel also supports ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Tracepoints",children:"traecpoints"}),", which are very similar to software events, but have a different more extensible API."]}),"\n",(0,t.jsx)(n.p,{children:"Software events may have a default period. This means that when you use them for sampling, you're sampling a subset of events, not tracing every event. You can check with perf record -vv:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -vv -e context-switches /bin/true\nUsing CPUID GenuineIntel-6-55\n------------------------------------------------------------\nperf_event_attr:\n  type                             1\n  size                             112\n  config                           0x3\n  { sample_period, sample_freq }   4000\n  sample_type                      IP|TID|TIME|PERIOD\n  disabled                         1\n  inherit                          1\n  mmap                             1\n  comm                             1\n  freq                             1\n  enable_on_exec                   1\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"See the perf_event_open(2) man page for a description of these fields. This default means is that the kernel adjusts the rate of sampling so that it's capturing about 4,000 context switch events per second. If you really meant to record them all, use -c 1:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -vv -e context-switches -c 1 /bin/true\nUsing CPUID GenuineIntel-6-55\n------------------------------------------------------------\nperf_event_attr:\n  type                             1\n  size                             112\n  config                           0x3\n  { sample_period, sample_freq }   1\n  sample_type                      IP|TID|TIME\n  disabled                         1\n  inherit                          1\n  mmap                             1\n  comm                             1\n  enable_on_exec                   1\n"})}),"\n",(0,t.jsx)(n.p,{children:"Check the rate of events using perf stat first, so that you can estimate the volume of data you'll be capturing. Sampling a subset by default may be a good thing, especially for high frequency events like context switches."}),"\n",(0,t.jsx)(n.p,{children:"Many other events (like tracepoints) have a default of 1 anyway. You'll encounter a non-1 default for many software and hardware events."}),"\n",(0,t.jsx)(n.h2,{id:"52-hardware-events-pmcs",children:"5.2. Hardware Events (PMCs)"}),"\n",(0,t.jsx)(n.p,{children:"perf_events began life as a tool for instrumenting the processor's performance monitoring unit (PMU) hardware counters, also called performance monitoring counters (PMCs), or performance instrumentation counters (PICs). These instrument low-level processor activity, for example, CPU cycles, instructions retired, memory stall cycles, level 2 cache misses, etc. Some will be listed as Hardware Cache Events."}),"\n",(0,t.jsxs)(n.p,{children:["PMCs are documented in the ",(0,t.jsx)(n.em,{children:"Intel 64 and IA-32 Architectures Software Developer's Manual Volume 3B: System Programming Guide, Part 2"})," and the ",(0,t.jsx)(n.em,{children:"BIOS and Kernel Developer's Guide (BKDG) For AMD Family 10h Processors"}),". There are thousands of different PMCs available."]}),"\n",(0,t.jsx)(n.p,{children:"A typical processor will implement PMCs in the following way: only a few or several can be recorded at the same time, from the many thousands that are available. This is because they are a fixed hardware resource on the processor (a limited number of registers), and are programmed to begin counting the selected events."}),"\n",(0,t.jsxs)(n.p,{children:["For examples of using PMCs, see ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#CPUstatistics",children:"CPU Statistics"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"53-kernel-tracepoints",children:"5.3. Kernel Tracepoints"}),"\n",(0,t.jsx)(n.p,{children:'These tracepoints are hard coded in interesting and logical locations of the kernel, so that higher-level behavior can be easily traced. For example, system calls, TCP events, file system I/O, disk I/O, etc. These are grouped into libraries of tracepoints; eg, "sock:" for socket events, "sched:" for CPU scheduler events. A key value of tracepoints is that they should have a stable API, so if you write tools that use them on one kernel version, they should work on later versions as well.'}),"\n",(0,t.jsx)(n.p,{children:"Tracepoints are usually added to kernel code by placing a macro from include/trace/events/*. XXX cover implementation."}),"\n",(0,t.jsx)(n.p,{children:"Summarizing the tracepoint library names and numbers of tracepoints, on my Linux 4.10 system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf list | awk -F: '/Tracepoint event/ { lib[$1]++ } END {\n    for (l in lib) { printf \"  %-16.16s %d\\n\", l, lib[l] } }' | sort | column\n    alarmtimer     4        i2c            8        page_isolation 1        swiotlb        1\n    block          19        iommu          7        pagemap        2        syscalls       614\n    btrfs          51        irq            5        power          22        task           2\n    cgroup         9        irq_vectors    22        printk         1        thermal        7\n    clk            14        jbd2           16        random         15        thermal_power_ 2\n    cma            2        kmem           12        ras            4        timer          13\n    compaction     14        libata         6        raw_syscalls   2        tlb            1\n    cpuhp          3        mce            1        rcu            1        udp            1\n    dma_fence      8        mdio           1        regmap         15        vmscan         15\n    exceptions     2        migrate        2        regulator      7        vsyscall       1\n    ext4           95        mmc            2        rpm            4        workqueue      4\n    fib            3        module         5        sched          24        writeback      30\n    fib6           1        mpx            5        scsi           5        x86_fpu        14\n    filelock       10        msr            3        sdt_node       1        xen            35\n    filemap        2        napi           1        signal         2        xfs            495\n    ftrace         1        net            10        skb            3        xhci-hcd       9\n    gpio           2        nmi            1        sock           2\n    huge_memory    4        oom            1        spi            7\n"})}),"\n",(0,t.jsx)(n.p,{children:"These include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"block"}),": block device I/O"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ext4"}),": file system operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"kmem"}),": kernel memory allocation events"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"random"}),": kernel random number generator events"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"sched"}),": CPU scheduler events"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"syscalls"}),": system call enter and exits"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"task"}),": task events"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["It's worth checking the list of tracepoints after every kernel upgrade, to see if any are new. The value of adding them ",(0,t.jsx)(n.a,{href:"http://lwn.net/Articles/346470/",children:"has been"})," ",(0,t.jsx)(n.a,{href:"http://lwn.net/Articles/346483/",children:"debated"})," from time to time, with it wondered how many people will use them (I do). There is a balance to aim for: I'd include the smallest number of probes that sufficiently covers common needs, and anything unusual or uncommon can be left to dynamic tracing."]}),"\n",(0,t.jsxs)(n.p,{children:["For examples of using tracepoints, see ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#StaticKernelTracing",children:"Static Kernel Tracing"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"54-user-level-statically-defined-tracing-usdt",children:"5.4. User-Level Statically Defined Tracing (USDT)"}),"\n",(0,t.jsxs)(n.p,{children:["Similar to kernel tracepoints, these are hardcoded (usually by placing macros) in the application source at logical and interesting locations, and presented (event name and arguments) as a stable API. Many applications already include tracepoints, added to support ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/dtrace.html",children:"DTrace"}),". However, many of these applications do not compile them in by default on Linux. Often you need to compile the application yourself using a --with-dtrace flag."]}),"\n",(0,t.jsx)(n.p,{children:"For example, compiling USDT events with this version of Node.js:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'$ sudo apt-get install systemtap-sdt-dev       # adds "dtrace", used by node build\n$ wget https://nodejs.org/dist/v4.4.1/node-v4.4.1.tar.gz\n$ tar xvf node-v4.4.1.tar.gz \n$ cd node-v4.4.1\n$ ./configure --with-dtrace\n$ make -j 8\n'})}),"\n",(0,t.jsx)(n.p,{children:"To check that the resulting node binary has probes included:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"$ readelf -n node\n\nDisplaying notes found at file offset 0x00000254 with length 0x00000020:\n  Owner                 Data size    Description\n  GNU                  0x00000010    NT_GNU_ABI_TAG (ABI version tag)\n    OS: Linux, ABI: 2.6.32\n\nDisplaying notes found at file offset 0x00000274 with length 0x00000024:\n  Owner                 Data size    Description\n  GNU                  0x00000014    NT_GNU_BUILD_ID (unique build ID bitstring)\n    Build ID: 1e01659b0aecedadf297b2c56c4a2b536ae2308a\n\nDisplaying notes found at file offset 0x00e70994 with length 0x000003c4:\n  Owner                 Data size    Description\n  stapsdt              0x0000003c    NT_STAPSDT (SystemTap probe descriptors)\n    Provider: node\n    Name: gc__start\n    Location: 0x0000000000dc14e4, Base: 0x000000000112e064, Semaphore: 0x000000000147095c\n    Arguments: 4@%esi 4@%edx 8@%rdi\n  stapsdt              0x0000003b    NT_STAPSDT (SystemTap probe descriptors)\n    Provider: node\n    Name: gc__done\n    Location: 0x0000000000dc14f4, Base: 0x000000000112e064, Semaphore: 0x000000000147095e\n    Arguments: 4@%esi 4@%edx 8@%rdi\n  stapsdt              0x00000067    NT_STAPSDT (SystemTap probe descriptors)\n    Provider: node\n    Name: http__server__response\n    Location: 0x0000000000dc1894, Base: 0x000000000112e064, Semaphore: 0x0000000001470956\n    Arguments: 8@%rax 8@-1144(%rbp) -4@-1148(%rbp) -4@-1152(%rbp)\n  stapsdt              0x00000061    NT_STAPSDT (SystemTap probe descriptors)\n    Provider: node\n    Name: net__stream__end\n    Location: 0x0000000000dc1c44, Base: 0x000000000112e064, Semaphore: 0x0000000001470952\n    Arguments: 8@%rax 8@-1144(%rbp) -4@-1148(%rbp) -4@-1152(%rbp)\n  stapsdt              0x00000068    NT_STAPSDT (SystemTap probe descriptors)\n    Provider: node\n    Name: net__server__connection\n    Location: 0x0000000000dc1ff4, Base: 0x000000000112e064, Semaphore: 0x0000000001470950\n    Arguments: 8@%rax 8@-1144(%rbp) -4@-1148(%rbp) -4@-1152(%rbp)\n  stapsdt              0x00000060    NT_STAPSDT (SystemTap probe descriptors)\n    Provider: node\n    Name: http__client__response\n    Location: 0x0000000000dc23c5, Base: 0x000000000112e064, Semaphore: 0x000000000147095a\n    Arguments: 8@%rdx 8@-1144(%rbp) -4@%eax -4@-1152(%rbp)\n  stapsdt              0x00000089    NT_STAPSDT (SystemTap probe descriptors)\n    Provider: node\n    Name: http__client__request\n    Location: 0x0000000000dc285e, Base: 0x000000000112e064, Semaphore: 0x0000000001470958\n    Arguments: 8@%rax 8@%rdx 8@-2184(%rbp) -4@-2188(%rbp) 8@-2232(%rbp) 8@-2240(%rbp) -4@-2192(%rbp)\n  stapsdt              0x00000089    NT_STAPSDT (SystemTap probe descriptors)\n    Provider: node\n    Name: http__server__request\n    Location: 0x0000000000dc2e69, Base: 0x000000000112e064, Semaphore: 0x0000000001470954\n    Arguments: 8@%r14 8@%rax 8@-4344(%rbp) -4@-4348(%rbp) 8@-4304(%rbp) 8@-4312(%rbp) -4@-4352(%rbp)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For examples of using USDT events, see ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#StaticUserTracing",children:"Static User Tracing"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"55-dynamic-tracing",children:"5.5. Dynamic Tracing"}),"\n",(0,t.jsx)(n.p,{children:"The difference between tracepoints and dynamic tracing is shown in the following figure, which illustrates the coverage of common tracepoint libraries:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(7991).A+"",width:"1700",height:"516"})}),"\n",(0,t.jsx)(n.p,{children:"While dynamic tracing can see everything, it's also an unstable interface since it is instrumenting raw code. That means that any dynamic tracing tools you develop may break after a kernel patch or update. Try to use the static tracepoints first, since their interface should be much more stable. They can also be easier to use and understand, since they have been designed with a tracing end-user in mind."}),"\n",(0,t.jsx)(n.p,{children:"One benefit of dynamic tracing is that it can be enabled on a live system without restarting anything. You can take an already-running kernel or application and then begin dynamic instrumentation, which (safely) patches instructions in memory to add instrumentation. That means there is zero overhead or tax for this feature until you begin using it. One moment your binary is running unmodified and at full speed, and the next, it's running some extra instrumentation instructions that you dynamically added. Those instructions should eventually be removed once you've finished using your session of dynamic tracing."}),"\n",(0,t.jsx)(n.p,{children:"The overhead while dynamic tracing is in use, and extra instructions are being executed, is relative to the frequency of instrumented events multiplied by the work done on each instrumentation."}),"\n",(0,t.jsxs)(n.p,{children:["For examples of using dynamic tracing, see ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#DynamicTracingEg",children:"6.5. Dynamic Tracing"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"6-examples",children:"6. Examples"}),"\n",(0,t.jsx)(n.p,{children:"These are some examples of perf_events, collected from a variety of 3.x Linux systems."}),"\n",(0,t.jsx)(n.h2,{id:"61-cpu-statistics",children:"6.1. CPU Statistics"}),"\n",(0,t.jsx)(n.p,{children:"The perf stat command instruments and summarizes key CPU counters (PMCs). This is from perf version 3.5.7.2:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf stat gzip file1\n\n Performance counter stats for 'gzip file1':\n\n       1920.159821 task-clock                #    0.991 CPUs utilized          \n                13 context-switches          #    0.007 K/sec                  \n                 0 CPU-migrations            #    0.000 K/sec                  \n               258 page-faults               #    0.134 K/sec                  \n     5,649,595,479 cycles                    #    2.942 GHz                     [83.43%]\n     1,808,339,931 stalled-cycles-frontend   #   32.01% frontend cycles idle    [83.54%]\n     1,171,884,577 stalled-cycles-backend    #   20.74% backend  cycles idle    [66.77%]\n     8,625,207,199 instructions              #    1.53  insns per cycle        \n                                             #    0.21  stalled cycles per insn [83.51%]\n     1,488,797,176 branches                  #  775.351 M/sec                   [82.58%]\n        53,395,139 branch-misses             #    3.59% of all branches         [83.78%]\n\n       1.936842598 seconds time elapsed\n"})}),"\n",(0,t.jsx)(n.p,{children:'This includes instructions per cycle (IPC), labled "insns per cycle", or in earlier versions, "IPC". This is a commonly examined metric, either IPC or its invert, CPI. Higher IPC values mean higher instruction throughput, and lower values indicate more stall cycles. I\'d generally interpret high IPC values (eg, over 1.0) as good, indicating optimal processing of work. However, I\'d want to double check what the instructions are, in case this is due to a spin loop: a high rate of instructions, but a low rate of actual work completed.'}),"\n",(0,t.jsx)(n.p,{children:"There are some advanced metrics now included in perf stat: frontend cycles idle, backend cycles idle, and stalled cycles per insn. To really understand these, you'll need some knowledge of CPU microarchitecture."}),"\n",(0,t.jsx)(n.h3,{id:"cpu-microarchitecture",children:"CPU Microarchitecture"}),"\n",(0,t.jsxs)(n.p,{children:["The frontend and backend metrics refer to the CPU pipeline, and are also based on stall counts. The frontend processes CPU instructions, in order. It involves instruction fetch, along with branch prediction, and decode. The decoded instructions become micro-operations (uops) which the backend processes, and it may do so out of order. For a longer summary of these components, see Shannon Cepeda's great posts on ",(0,t.jsx)(n.a,{href:"http://software.intel.com/en-us/blogs/2011/11/22/pipeline-speak-learning-more-about-intel-microarchitecture-codename-sandy-bridge",children:"frontend"})," and ",(0,t.jsx)(n.a,{href:"http://software.intel.com/en-us/blogs/2011/12/01/pipeline-speak-part-2-the-second-part-of-the-sandy-bridge-pipeline",children:"backend"}),"."]}),"\n",(0,t.jsx)(n.p,{children:'The backend can also process multiple uops in parallel; for modern processors, three or four. Along with pipelining, this is how IPC can become greater than one, as more than one instruction can be completed ("retired") per CPU cycle.'}),"\n",(0,t.jsx)(n.p,{children:"Stalled cycles per instruction is similar to IPC (inverted), however, only counting stalled cycles, which will be for memory or resource bus access. This makes it easy to interpret: stalls are latency, reduce stalls. I really like it as a metric, and hope it becomes as commonplace as IPC/CPI. Lets call it SCPI."}),"\n",(0,t.jsx)(n.h3,{id:"detailed-mode",children:"Detailed Mode"}),"\n",(0,t.jsx)(n.p,{children:'There is a "detailed" mode for perf stat:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf stat -d gzip file1\n\n Performance counter stats for 'gzip file1':\n\n       1610.719530 task-clock                #    0.998 CPUs utilized          \n                20 context-switches          #    0.012 K/sec                  \n                 0 CPU-migrations            #    0.000 K/sec                  \n               258 page-faults               #    0.160 K/sec                  \n     5,491,605,997 cycles                    #    3.409 GHz                     [40.18%]\n     1,654,551,151 stalled-cycles-frontend   #   30.13% frontend cycles idle    [40.80%]\n     1,025,280,350 stalled-cycles-backend    #   18.67% backend  cycles idle    [40.34%]\n     8,644,643,951 instructions              #    1.57  insns per cycle        \n                                             #    0.19  stalled cycles per insn [50.89%]\n     1,492,911,665 branches                  #  926.860 M/sec                   [50.69%]\n        53,471,580 branch-misses             #    3.58% of all branches         [51.21%]\n     1,938,889,736 L1-dcache-loads           # 1203.741 M/sec                   [49.68%]\n       154,380,395 L1-dcache-load-misses     #    7.96% of all L1-dcache hits   [49.66%]\n                 0 LLC-loads                 #    0.000 K/sec                   [39.27%]\n                 0 LLC-load-misses           #    0.00% of all LL-cache hits    [39.61%]\n\n       1.614165346 seconds time elapsed\n"})}),"\n",(0,t.jsx)(n.p,{children:"This includes additional counters for Level 1 data cache events, and last level cache (LLC) events."}),"\n",(0,t.jsx)(n.h3,{id:"specific-counters",children:"Specific Counters"}),"\n",(0,t.jsx)(n.p,{children:"Hardware cache event counters, seen in perf list, can be instrumented. Eg:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf list | grep L1-dcache\n  L1-dcache-loads                                    [Hardware cache event]\n  L1-dcache-load-misses                              [Hardware cache event]\n  L1-dcache-stores                                   [Hardware cache event]\n  L1-dcache-store-misses                             [Hardware cache event]\n  L1-dcache-prefetches                               [Hardware cache event]\n  L1-dcache-prefetch-misses                          [Hardware cache event]\n# perf stat -e L1-dcache-loads,L1-dcache-load-misses,L1-dcache-stores gzip file1\n\n Performance counter stats for 'gzip file1':\n\n     1,947,551,657 L1-dcache-loads\n                                            \n       153,829,652 L1-dcache-misses\n         #    7.90% of all L1-dcache hits  \n     1,171,475,286 L1-dcache-stores\n                                           \n\n       1.538038091 seconds time elapsed\n"})}),"\n",(0,t.jsx)(n.p,{children:'The percentage printed is a convenient calculation that perf_events has included, based on the counters I specified. If you include the "cycles" and "instructions" counters, it will include an IPC calculation in the output.'}),"\n",(0,t.jsx)(n.p,{children:"These hardware events that can be measured are often specific to the processor model. Many may not be available from within a virtualized environment."}),"\n",(0,t.jsx)(n.h3,{id:"raw-counters",children:"Raw Counters"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"Intel 64 and IA-32 Architectures Software Developer's Manual Volume 3B: System Programming Guide, Part 2"})," and the ",(0,t.jsx)(n.em,{children:"BIOS and Kernel Developer's Guide (BKDG) For AMD Family 10h Processors"})," are full of interesting counters, but most cannot be found in perf list. If you find one you want to instrument, you can specify it as a raw event with the format: rUUEE, where UU == umask, and EE == event number. Here's an example where I've added a couple of raw counters:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf stat -e cycles,instructions,r80a2,r2b1 gzip file1\n\n Performance counter stats for 'gzip file1':\n\n     5,586,963,328 cycles                    #    0.000 GHz                    \n     8,608,237,932 instructions              #    1.54  insns per cycle        \n         9,448,159 raw 0x80a2                                                  \n    11,855,777,803 raw 0x2b1                                                   \n\n       1.588618969 seconds time elapsed\n"})}),"\n",(0,t.jsx)(n.p,{children:"If I did this right, then r80a2 has instrumented RESOURCE_STALLS.OTHER, and r2b1 has instrumented UOPS_DISPATCHED.CORE: the number of uops dispatched each cycle. It's easy to mess this up, and you'll want to double check that you are on the right page of the manual for your processor."}),"\n",(0,t.jsxs)(n.p,{children:["If you do find an awesome raw counter, please ",(0,t.jsx)(n.a,{href:"http://dir.gmane.org/gmane.linux.kernel.perf.user",children:"suggest"})," it be added as an alias in perf_events, so we all can find it in perf list."]}),"\n",(0,t.jsx)(n.h3,{id:"other-options",children:"Other Options"}),"\n",(0,t.jsx)(n.p,{children:'The perf subcommands, especially perf stat, have an extensive option set which can be listed using "-h". I\'ve included the full output for perf stat here from version 3.9.3, not as a reference, but as an illustration of the interface:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf stat -h\n\n usage: perf stat [<options>] [<command>]\n\n    -e, --event <event>   event selector. use 'perf list' to list available events\n        --filter <filter>\n                          event filter\n    -i, --no-inherit      child tasks do not inherit counters\n    -p, --pid <pid>       stat events on existing process id\n    -t, --tid <tid>       stat events on existing thread id\n    -a, --all-cpus        system-wide collection from all CPUs\n    -g, --group           put the counters into a counter group\n    -c, --scale           scale/normalize counters\n    -v, --verbose         be more verbose (show counter open errors, etc)\n    -r, --repeat <n>      repeat command and print average + stddev (max: 100)\n    -n, --null            null run - dont start any counters\n    -d, --detailed        detailed run - start a lot of events\n    -S, --sync            call sync() before starting a run\n    -B, --big-num         print large numbers with thousands' separators\n    -C, --cpu <cpu>       list of cpus to monitor in system-wide\n    -A, --no-aggr         disable CPU count aggregation\n    -x, --field-separator <separator>\n                          print counts with custom separator\n    -G, --cgroup <name>   monitor event in cgroup name only\n    -o, --output <file>   output file name\n        --append          append to the output file\n        --log-fd <n>      log output to fd, instead of stderr\n        --pre <command>   command to run prior to the measured command\n        --post <command>  command to run after to the measured command\n    -I, --interval-print <n>\n                          print counts at regular interval in ms (>= 100)\n        --aggr-socket     aggregate counts per processor socket\n"})}),"\n",(0,t.jsx)(n.p,{children:"Options such as --repeat, --sync, --pre, and --post can be quite useful when doing automated testing or micro-benchmarking."}),"\n",(0,t.jsx)(n.h2,{id:"62-timed-profiling",children:"6.2. Timed Profiling"}),"\n",(0,t.jsx)(n.p,{children:"perf_events can profile CPU usage based on sampling the instruction pointer or stack trace at a fixed interval (timed profiling)."}),"\n",(0,t.jsx)(n.p,{children:"Sampling CPU stacks at 99 Hertz (-F 99), for the entire system (-a, for all CPUs), with stack traces (-g, for call graphs), for 10 seconds:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -F 99 -a -g -- sleep 30\n[ perf record: Woken up 9 times to write data ]\n[ perf record: Captured and wrote 3.135 MB perf.data (~136971 samples) ]\n# ls -lh perf.data\n-rw------- 1 root root 3.2M Jan 26 07:26 perf.data\n"})}),"\n",(0,t.jsx)(n.p,{children:"The choice of 99 Hertz, instead of 100 Hertz, is to avoid accidentally sampling in lockstep with some periodic activity, which would produce skewed results. This is also coarse: you may want to increase that to higher rates (eg, up to 997 Hertz) for finer resolution, especially if you are sampling short bursts of activity and you'd still like enough resolution to be useful. Bear in mind that higher frequencies means higher overhead."}),"\n",(0,t.jsx)(n.p,{children:"The perf.data file can be processed in a variety of ways. On recent versions, the perf report command launches an ncurses navigator for call graph inspection. Older versions of perf (or if you use --stdio in the new version) print the call graph as a tree, annotated with percentages:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf report --stdio\n# ========\n# captured on: Mon Jan 26 07:26:40 2014\n# hostname : dev2\n# os release : 3.8.6-ubuntu-12-opt\n# perf version : 3.8.6\n# arch : x86_64\n# nrcpus online : 8\n# nrcpus avail : 8\n# cpudesc : Intel(R) Xeon(R) CPU X5675 @ 3.07GHz\n# cpuid : GenuineIntel,6,44,2\n# total memory : 8182008 kB\n# cmdline : /usr/bin/perf record -F 99 -a -g -- sleep 30 \n# event : name = cpu-clock, type = 1, config = 0x0, config1 = 0x0, config2 = ...\n# HEADER_CPU_TOPOLOGY info available, use -I to display\n# HEADER_NUMA_TOPOLOGY info available, use -I to display\n# pmu mappings: software = 1, breakpoint = 5\n# ========\n#\n# Samples: 22K of event 'cpu-clock'\n# Event count (approx.): 22751\n#\n# Overhead  Command      Shared Object                           Symbol\n# ........  .......  .................  ...............................\n#\n    94.12%       dd  [kernel.kallsyms]  [k] _raw_spin_unlock_irqrestore\n                 |\n                 --- _raw_spin_unlock_irqrestore\n                    |          \n                    |--96.67%-- extract_buf\n                    |          extract_entropy_user\n                    |          urandom_read\n                    |          vfs_read\n                    |          sys_read\n                    |          system_call_fastpath\n                    |          read\n                    |          \n                    |--1.69%-- account\n                    |          |          \n                    |          |--99.72%-- extract_entropy_user\n                    |          |          urandom_read\n                    |          |          vfs_read\n                    |          |          sys_read\n                    |          |          system_call_fastpath\n                    |          |          read\n                    |           --0.28%-- [...]\n                    |          \n                    |--1.60%-- mix_pool_bytes.constprop.17\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:'This tree starts with the on-CPU functions and works back through the ancestry. This approach is called a "callee based call graph". This can be flipped by using -G for an "inverted call graph", or by using the "caller" option to -g/--call-graph, instead of the "callee" default.'}),"\n",(0,t.jsx)(n.p,{children:'The hottest (most frequent) stack trace in this perf call graph occurred in 90.99% of samples, which is the product of the overhead percentage and top stack leaf (94.12% x 96.67%, which are relative rates). perf report can also be run with "-g graph" to show absolute overhead rates, in which case "90.99%" is directly displayed on the stack leaf:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"94.12%       dd  [kernel.kallsyms]  [k] _raw_spin_unlock_irqrestore\n                 |\n                 --- _raw_spin_unlock_irqrestore\n                    |          \n                    |--90.99%-- extract_buf\n[...]\n"})}),"\n",(0,t.jsxs)(n.p,{children:['If user-level stacks look incomplete, you can try perf record with "--call-graph dwarf" as a different technique to unwind them. See the ',(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#StackTraces",children:"Stacks"})," section."]}),"\n",(0,t.jsxs)(n.p,{children:["The output from perf report can be many pages long, which can become cumbersome to read. Try generating ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#FlameGraphs",children:"Flame Graphs"})," from the same data."]}),"\n",(0,t.jsx)(n.h2,{id:"63-event-profiling",children:"6.3. Event Profiling"}),"\n",(0,t.jsx)(n.p,{children:"Apart from sampling at a timed interval, taking samples triggered by CPU hardware counters is another form of CPU profiling, which can be used to shed more light on cache misses, memory stall cycles, and other low-level processor events. The available events can be found using perf list:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf list | grep Hardware\n  cpu-cycles OR cycles                               [Hardware event]\n  instructions                                       [Hardware event]\n  cache-references                                   [Hardware event]\n  cache-misses                                       [Hardware event]\n  branch-instructions OR branches                    [Hardware event]\n  branch-misses                                      [Hardware event]\n  bus-cycles                                         [Hardware event]\n  stalled-cycles-frontend OR idle-cycles-frontend    [Hardware event]\n  stalled-cycles-backend OR idle-cycles-backend      [Hardware event]\n  ref-cycles                                         [Hardware event]\n  L1-dcache-loads                                    [Hardware cache event]\n  L1-dcache-load-misses                              [Hardware cache event]\n  L1-dcache-stores                                   [Hardware cache event]\n  L1-dcache-store-misses                             [Hardware cache event]\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:'For many of these, gathering a stack on every occurrence would induce far too much overhead, and would slow down the system and change the performance characteristics of the target. It\'s usually sufficient to only instrument a small fraction of their occurrences, rather than all of them. This can be done by specifying a threshold for triggering event collection, using "-c" and a count.'}),"\n",(0,t.jsx)(n.p,{children:"For example, the following one-liner instruments Level 1 data cache load misses, collecting a stack trace for one in every 10,000 occurrences:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e L1-dcache-load-misses -c 10000 -ag -- sleep 5\n"})}),"\n",(0,t.jsx)(n.p,{children:'The mechanics of "-c count" are implemented by the processor, which only interrupts the kernel when the threshold has been reached.'}),"\n",(0,t.jsx)(n.p,{children:"See the earlier Raw Counters section for an example of specifying a custom counter, and the next section about skew."}),"\n",(0,t.jsx)(n.h3,{id:"skew-and-pebs",children:"Skew and PEBS"}),"\n",(0,t.jsxs)(n.p,{children:["There's a problem with event profiling that you don't really encounter with CPU profiling (timed sampling). With timed sampling, it doesn't matter if there was a small sub-microsecond delay between the interrupt and reading the instruction pointer (IP). Some CPU profilers introduce this jitter on purpose, as another way to avoid lockstep sampling. But for event profiling, it does matter: if you're trying to capture the IP on some PMC event, and there's a delay between the PMC overflow and capturing the IP, then the IP will point to the wrong address. This is skew. Another contributing problem is that micro-ops are processed in parallel and out-of-order, while the instruction pointer points to the resumption instruction, not the instruction that caused the event. I've talked about this ",(0,t.jsx)(n.a,{href:"https://www.slideshare.net/brendangregg/scale2015-linux-perfprofiling/63",children:"before"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:['The solution is "precise sampling", which on Intel is PEBS (Precise Event-Based Sampling), and on AMD it is IBS (Instruction-Based Sampling). These use CPU hardware support to capture the real state of the CPU at the time of the event. perf can use precise sampling by adding a',":p",' modifier to the PMC event name, eg, "-e instructions',":p","\". The more p's, the more accurate. Here are the docs from ",(0,t.jsx)(n.a,{href:"https://github.com/torvalds/linux/blob/master/tools/perf/Documentation/perf-list.txt",children:"tools/perf/Documentation/perf-list.txt"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"The 'p' modifier can be used for specifying how precise the instruction\naddress should be. The 'p' modifier can be specified multiple times:\n\n 0 - SAMPLE_IP can have arbitrary skid\n 1 - SAMPLE_IP must have constant skid\n 2 - SAMPLE_IP requested to have 0 skid\n 3 - SAMPLE_IP must have 0 skid\n"})}),"\n",(0,t.jsx)(n.p,{children:'In some cases, perf will default to using precise sampling without you needing to specify it. Run "perf record -vv..." to see the value of "precise_ip". Also note that only some PMCs support PEBS.'}),"\n",(0,t.jsx)(n.p,{children:"If PEBS isn't working at all for you, check dmesg:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# dmesg | grep -i pebs\n[    0.387014] Performance Events: PEBS fmt1+, SandyBridge events, 16-deep LBR, full-width counters, Intel PMU driver.\n[    0.387034] core: PEBS disabled due to CPU errata, please upgrade microcode\n"})}),"\n",(0,t.jsx)(n.p,{children:"The fix (on Intel):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# apt-get install -y intel-microcode\n[...]\nintel-microcode: microcode will be updated at next boot\nProcessing triggers for initramfs-tools (0.125ubuntu5) ...\nupdate-initramfs: Generating /boot/initrd.img-4.8.0-41-generic\n# reboot\n\n(system reboots)\n\n# dmesg | grep -i pebs\n[    0.386596] Performance Events: PEBS fmt1+, SandyBridge events, 16-deep LBR, full-width counters, Intel PMU driver.\n#\n"})}),"\n",(0,t.jsx)(n.p,{children:"XXX: Need to cover more PEBS problems and other caveats."}),"\n",(0,t.jsx)(n.h2,{id:"64-static-kernel-tracing",children:"6.4. Static Kernel Tracing"}),"\n",(0,t.jsx)(n.p,{children:"The following examples demonstrate static tracing: the instrumentation of tracepoints and other static events."}),"\n",(0,t.jsx)(n.h3,{id:"counting-syscalls",children:"Counting Syscalls"}),"\n",(0,t.jsx)(n.p,{children:"The following simple one-liner counts system calls for the executed command, and prints a summary (of non-zero counts):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf stat -e 'syscalls:sys_enter_*' gzip file1 2>&1 | awk '$1 != 0'\n\n Performance counter stats for 'gzip file1':\n\n                 1 syscalls:sys_enter_utimensat               \n                 1 syscalls:sys_enter_unlink                  \n                 5 syscalls:sys_enter_newfstat                \n             1,603 syscalls:sys_enter_read                    \n             3,201 syscalls:sys_enter_write                   \n                 5 syscalls:sys_enter_access                  \n                 1 syscalls:sys_enter_fchmod                  \n                 1 syscalls:sys_enter_fchown                  \n                 6 syscalls:sys_enter_open                    \n                 9 syscalls:sys_enter_close                   \n                 8 syscalls:sys_enter_mprotect                \n                 1 syscalls:sys_enter_brk                     \n                 1 syscalls:sys_enter_munmap                  \n                 1 syscalls:sys_enter_set_robust_list         \n                 1 syscalls:sys_enter_futex                   \n                 1 syscalls:sys_enter_getrlimit               \n                 5 syscalls:sys_enter_rt_sigprocmask          \n                14 syscalls:sys_enter_rt_sigaction            \n                 1 syscalls:sys_enter_exit_group              \n                 1 syscalls:sys_enter_set_tid_address         \n                14 syscalls:sys_enter_mmap                    \n\n       1.543990940 seconds time elapsed\n"})}),"\n",(0,t.jsx)(n.p,{children:"In this case, a gzip command was analyzed. The report shows that there were 3,201 write() syscalls, and half that number of read() syscalls. Many of the other syscalls will be due to process and library initialization."}),"\n",(0,t.jsx)(n.p,{children:"A similar report can be seen using strace -c, the system call tracer, however it may induce much higher overhead than perf, as perf buffers data in-kernel."}),"\n",(0,t.jsx)(n.h3,{id:"perf-vs-strace",children:"perf vs strace"}),"\n",(0,t.jsx)(n.p,{children:"To explain the difference a little further: the current implementation of strace uses ptrace(2) to attach to the target process and stop it during system calls, like a debugger. This is violent, and can cause serious overhead. To demonstrate this, the following syscall-heavy program was run by itself, with perf, and with strace. I've only included the line of output that shows its performance:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# dd if=/dev/zero of=/dev/null bs=512 count=10000k\n5242880000 bytes (5.2 GB) copied, 3.53031 s, 1.5 GB/s\n\n# perf stat -e 'syscalls:sys_enter_*' dd if=/dev/zero of=/dev/null bs=512 count=10000k\n5242880000 bytes (5.2 GB) copied, 9.14225 s, 573 MB/s\n\n# strace -c dd if=/dev/zero of=/dev/null bs=512 count=10000k\n5242880000 bytes (5.2 GB) copied, 218.915 s, 23.9 MB/s\n"})}),"\n",(0,t.jsxs)(n.p,{children:["With perf, the program ran 2.5x slower. But ",(0,t.jsx)(n.strong,{children:"with strace, it ran 62x slower"}),". That's likely to be a worst-case result: if syscalls are not so frequent, the difference between the tools will not be as great."]}),"\n",(0,t.jsx)(n.p,{children:"Recent version of perf have included a trace subcommand, to provide some similar functionality to strace, but with much lower overhead."}),"\n",(0,t.jsx)(n.h3,{id:"new-processes",children:"New Processes"}),"\n",(0,t.jsx)(n.p,{children:'Tracing new processes triggered by a "man ls":'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e sched:sched_process_exec -a\n^C[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.064 MB perf.data (~2788 samples) ]\n# perf report -n --sort comm --stdio\n[...]\n# Overhead       Samples  Command\n# ........  ............  .......\n#\n    11.11%             1    troff\n    11.11%             1      tbl\n    11.11%             1  preconv\n    11.11%             1    pager\n    11.11%             1    nroff\n    11.11%             1      man\n    11.11%             1   locale\n    11.11%             1   grotty\n    11.11%             1    groff\n"})}),"\n",(0,t.jsx)(n.p,{children:'Nine different commands were executed, each once. I used -n to print the "Samples" column, and "--sort comm" to customize the remaining columns.'}),"\n",(0,t.jsxs)(n.p,{children:["This works by tracing sched",":sched","_process_exec, when a process runs exec() to execute a different binary. This is often how new processes are created, but not always. An application may fork() to create a pool of worker processes, but not exec() a different binary. An application may also reexec: call exec() again, on itself, usually to clean up its address space. In that case, it's will be seen by this exec tracepoint, but it's not a new process."]}),"\n",(0,t.jsxs)(n.p,{children:["The sched",":sched","_process_fork tracepoint can be traced to only catch new processes, created via fork(). The downside is that the process identified is the parent, not the new target, as the new process has yet to exec() it's final program."]}),"\n",(0,t.jsx)(n.h3,{id:"outbound-connections",children:"Outbound Connections"}),"\n",(0,t.jsx)(n.p,{children:"There can be times when it's useful to double check what network connections are initiated by a server, from which processes, and why. You might be surprised. These connections can be important to understand, as they can be a source of latency."}),"\n",(0,t.jsxs)(n.p,{children:["For this example, I have a completely idle ubuntu server, and while tracing I'll login to it using ssh. I'm going to trace outbound connections via the connect() syscall. Given that I'm performing an ",(0,t.jsx)(n.em,{children:"inbound"})," connection over SSH, will there be any outbound connections at all?"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e syscalls:sys_enter_connect -a\n^C[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.057 MB perf.data (~2489 samples) ]\n# perf report --stdio\n# ========\n# captured on: Tue Jan 28 10:53:38 2014\n# hostname : ubuntu\n# os release : 3.5.0-23-generic\n# perf version : 3.5.7.2\n# arch : x86_64\n# nrcpus online : 2\n# nrcpus avail : 2\n# cpudesc : Intel(R) Core(TM) i7-3820QM CPU @ 2.70GHz\n# cpuid : GenuineIntel,6,58,9\n# total memory : 1011932 kB\n# cmdline : /usr/bin/perf_3.5.0-23 record -e syscalls:sys_enter_connect -a \n# event : name = syscalls:sys_enter_connect, type = 2, config = 0x38b, ...\n# HEADER_CPU_TOPOLOGY info available, use -I to display\n# HEADER_NUMA_TOPOLOGY info available, use -I to display\n# ========\n#\n# Samples: 21  of event 'syscalls:sys_enter_connect'\n# Event count (approx.): 21\n#\n# Overhead  Command       Shared Object                       Symbol\n# ........  .......  ..................  ...........................\n#\n    52.38%     sshd  libc-2.15.so        [.] __GI___connect_internal\n    19.05%   groups  libc-2.15.so        [.] __GI___connect_internal\n     9.52%     sshd  libpthread-2.15.so  [.] __connect_internal     \n     9.52%     mesg  libc-2.15.so        [.] __GI___connect_internal\n     9.52%     bash  libc-2.15.so        [.] __GI___connect_internal\n"})}),"\n",(0,t.jsx)(n.p,{children:"The report shows that sshd, groups, mesg, and bash are all performing connect() syscalls. Ring a bell?"}),"\n",(0,t.jsx)(n.p,{children:"The stack traces that led to the connect() can explain why:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e syscalls:sys_enter_connect -ag\n^C[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.057 MB perf.data (~2499 samples) ]\n# perf report --stdio\n[...]\n    55.00%     sshd  libc-2.15.so        [.] __GI___connect_internal\n               |\n               --- __GI___connect_internal\n                  |          \n                  |--27.27%-- add_one_listen_addr.isra.0\n                  |          \n                  |--27.27%-- __nscd_get_mapping\n                  |          __nscd_get_map_ref\n                  |          \n                  |--27.27%-- __nscd_open_socket\n                   --18.18%-- [...]\n    20.00%   groups  libc-2.15.so        [.] __GI___connect_internal\n             |\n             --- __GI___connect_internal\n                |          \n                |--50.00%-- __nscd_get_mapping\n                |          __nscd_get_map_ref\n                |          \n                 --50.00%-- __nscd_open_socket\n    10.00%     mesg  libc-2.15.so        [.] __GI___connect_internal\n               |\n               --- __GI___connect_internal\n                  |          \n                  |--50.00%-- __nscd_get_mapping\n                  |          __nscd_get_map_ref\n                  |          \n                   --50.00%-- __nscd_open_socket\n    10.00%     bash  libc-2.15.so        [.] __GI___connect_internal\n               |\n               --- __GI___connect_internal\n                  |          \n                  |--50.00%-- __nscd_get_mapping\n                  |          __nscd_get_map_ref\n                  |          \n                   --50.00%-- __nscd_open_socket\n     5.00%     sshd  libpthread-2.15.so  [.] __connect_internal     \n               |\n               --- __connect_internal\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ah, these are nscd calls: the name service cache daemon. If you see hexadecimal numbers and not function names, you will need to install debug info: see the earlier section on ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Symbols",children:"Symbols"}),". These nscd calls are likely triggered by calling getaddrinfo(), which server software may be using to resolve IP addresses for logging, or for matching hostnames in config files. Browsing the stack traces should identify why."]}),"\n",(0,t.jsxs)(n.p,{children:["For sshd, this was called via add_one_listen_addr(): a name that was only visible after adding the openssh-server-dbgsym package. Unfortunately, the stack trace doesn't continue after add_one_listen_add(). I can browse the OpenSSH code to figure out the reasons we're calling into add_one_listen_add(), or, I can get the stack traces to work. See the earlier section on ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#StackTraces",children:"Stack Traces"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"I took a quick look at the OpenSSH code, and it looks like this code-path is due to parsing ListenAddress from the sshd_config file, which can contain either an IP address or a hostname."}),"\n",(0,t.jsx)(n.h3,{id:"socket-buffers",children:"Socket Buffers"}),"\n",(0,t.jsx)(n.p,{children:"Tracing the consumption of socket buffers, and the stack traces, is one way to identify what is leading to socket or network I/O."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e 'skb:consume_skb' -ag\n^C[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.065 MB perf.data (~2851 samples) ]\n# perf report\n[...]\n    74.42%  swapper  [kernel.kallsyms]  [k] consume_skb\n            |\n            --- consume_skb\n                arp_process\n                arp_rcv\n                __netif_receive_skb_core\n                __netif_receive_skb\n                netif_receive_skb\n                virtnet_poll\n                net_rx_action\n                __do_softirq\n                irq_exit\n                do_IRQ\n                ret_from_intr\n                default_idle\n                cpu_idle\n                start_secondary\n\n    25.58%     sshd  [kernel.kallsyms]  [k] consume_skb\n               |\n               --- consume_skb\n                   dev_kfree_skb_any\n                   free_old_xmit_skbs.isra.24\n                   start_xmit\n                   dev_hard_start_xmit\n                   sch_direct_xmit\n                   dev_queue_xmit\n                   ip_finish_output\n                   ip_output\n                   ip_local_out\n                   ip_queue_xmit\n                   tcp_transmit_skb\n                   tcp_write_xmit\n                   __tcp_push_pending_frames\n                   tcp_sendmsg\n                   inet_sendmsg\n                   sock_aio_write\n                   do_sync_write\n                   vfs_write\n                   sys_write\n                   system_call_fastpath\n                   __write_nocancel\n"})}),"\n",(0,t.jsx)(n.p,{children:"The swapper stack shows the network receive path, triggered by an interrupt. The sshd path shows writes."}),"\n",(0,t.jsx)(n.h2,{id:"65-static-user-tracing",children:"6.5. Static User Tracing"}),"\n",(0,t.jsx)(n.p,{children:"Support was added in later 4.x series kernels. The following demonstrates Linux 4.10 (with an additional patchset), and tracing the Node.js USDT probes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf buildid-cache --add \\`which node\\`\n# perf list | grep sdt_node\n  sdt_node:gc__done                                  [SDT event]\n  sdt_node:gc__start                                 [SDT event]\n  sdt_node:http__client__request                     [SDT event]\n  sdt_node:http__client__response                    [SDT event]\n  sdt_node:http__server__request                     [SDT event]\n  sdt_node:http__server__response                    [SDT event]\n  sdt_node:net__server__connection                   [SDT event]\n  sdt_node:net__stream__end                          [SDT event]\n# perf record -e sdt_node:http__server__request -a\n^C[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.446 MB perf.data (3 samples) ]\n# perf script\n            node  7646 [002]   361.012364: sdt_node:http__server__request: (dc2e69)\n            node  7646 [002]   361.204718: sdt_node:http__server__request: (dc2e69)\n            node  7646 [002]   361.363043: sdt_node:http__server__request: (dc2e69)\n"})}),"\n",(0,t.jsx)(n.p,{children:"XXX fill me in, including how to use arguments."}),"\n",(0,t.jsxs)(n.p,{children:["If you are on an older kernel, say, Linux 4.4-4.9, you can probably get these to work with adjustments (I've even hacked them up with ",(0,t.jsx)(n.a,{href:"http://www.brendangregg.com/blog/2015-07-03/hacking-linux-usdt-ftrace.html",children:"ftrace"})," for older kernels), but since they have been in development, I haven't seen documentation outside of lkml, so you'll need to figure it out. (On this kernel range, you might find more documentation for tracing these with ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/ebpf.html#bcc",children:"bcc/eBPF"}),", including using the trace.py tool.)"]}),"\n",(0,t.jsx)(n.h2,{id:"66-dynamic-tracing",children:"6.6. Dynamic Tracing"}),"\n",(0,t.jsx)(n.p,{children:"For kernel analysis, I'm using CONFIG_KPROBES=y and CONFIG_KPROBE_EVENTS=y, to enable kernel dynamic tracing, and CONFIG_FRAME_POINTER=y, for frame pointer-based kernel stacks. For user-level analysis, CONFIG_UPROBES=y and CONFIG_UPROBE_EVENTS=y, for user-level dynamic tracing."}),"\n",(0,t.jsx)(n.h3,{id:"kernel-tcp_sendmsg",children:"Kernel: tcp_sendmsg()"}),"\n",(0,t.jsx)(n.p,{children:"This example shows instrumenting the kernel tcp_sendmsg() function on the Linux 3.9.3 kernel:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf probe --add tcp_sendmsg\nFailed to find path of kernel module.\nAdded new event:\n  probe:tcp_sendmsg    (on tcp_sendmsg)\n\nYou can now use it in all perf tools, such as:\n\n    perf record -e probe:tcp_sendmsg -aR sleep 1\n"})}),"\n",(0,t.jsx)(n.p,{children:"This adds a new tracepoint event. It suggests using the -R option, to collect raw sample records, which is already the default for tracepoints. Tracing this event for 5 seconds, recording stack traces:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e probe:tcp_sendmsg -a -g -- sleep 5\n[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.228 MB perf.data (~9974 samples) ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"And the report:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf report --stdio\n# ========\n# captured on: Fri Jan 31 20:10:14 2014\n# hostname : pgbackup\n# os release : 3.9.3-ubuntu-12-opt\n# perf version : 3.9.3\n# arch : x86_64\n# nrcpus online : 8\n# nrcpus avail : 8\n# cpudesc : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz\n# cpuid : GenuineIntel,6,45,7\n# total memory : 8179104 kB\n# cmdline : /lib/modules/3.9.3/build/tools/perf/perf record -e probe:tcp_sendmsg -a -g -- sleep 5 \n# event : name = probe:tcp_sendmsg, type = 2, config = 0x3b2, config1 = 0x0, config2 = 0x0, ...\n# HEADER_CPU_TOPOLOGY info available, use -I to display\n# HEADER_NUMA_TOPOLOGY info available, use -I to display\n# pmu mappings: software = 1, tracepoint = 2, breakpoint = 5\n# ========\n#\n# Samples: 12  of event 'probe:tcp_sendmsg'\n# Event count (approx.): 12\n#\n# Overhead  Command      Shared Object           Symbol\n# ........  .......  .................  ...............\n#\n   100.00%     sshd  [kernel.kallsyms]  [k] tcp_sendmsg\n               |\n               --- tcp_sendmsg\n                   sock_aio_write\n                   do_sync_write\n                   vfs_write\n                   sys_write\n                   system_call_fastpath\n                   __write_nocancel\n                  |          \n                  |--8.33%-- 0x50f00000001b810\n                   --91.67%-- [...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This shows the path from the write() system call to tcp_sendmsg()."}),"\n",(0,t.jsx)(n.p,{children:"You can delete these dynamic tracepoints if you want after use, using perf probe --del."}),"\n",(0,t.jsx)(n.h3,{id:"kernel-tcp_sendmsg-with-size",children:"Kernel: tcp_sendmsg() with size"}),"\n",(0,t.jsx)(n.p,{children:"If your kernel has debuginfo (CONFIG_DEBUG_INFO=y), you can fish out kernel variables from functions. This is a simple example of examining a size_t (integer), on Linux 3.13.1."}),"\n",(0,t.jsx)(n.p,{children:"Listing variables available for tcp_sendmsg():"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf probe -V tcp_sendmsg\nAvailable variables at tcp_sendmsg\n        @<tcp_sendmsg+0>\n                size_t  size\n                struct kiocb*   iocb\n                struct msghdr*  msg\n                struct sock*    sk\n"})}),"\n",(0,t.jsx)(n.p,{children:'Creating a probe for tcp_sendmsg() with the "size" variable:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf probe --add 'tcp_sendmsg size'\nAdded new event:\n  probe:tcp_sendmsg    (on tcp_sendmsg with size)\n\nYou can now use it in all perf tools, such as:\n\n    perf record -e probe:tcp_sendmsg -aR sleep 1\n"})}),"\n",(0,t.jsx)(n.p,{children:"Tracing this probe:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e probe:tcp_sendmsg -a\n^C[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.052 MB perf.data (~2252 samples) ]\n# perf script\n# ========\n# captured on: Fri Jan 31 23:49:55 2014\n# hostname : dev1\n# os release : 3.13.1-ubuntu-12-opt\n# perf version : 3.13.1\n# arch : x86_64\n# nrcpus online : 2\n# nrcpus avail : 2\n# cpudesc : Intel(R) Xeon(R) CPU E5645 @ 2.40GHz\n# cpuid : GenuineIntel,6,44,2\n# total memory : 1796024 kB\n# cmdline : /usr/bin/perf record -e probe:tcp_sendmsg -a \n# event : name = probe:tcp_sendmsg, type = 2, config = 0x1dd, config1 = 0x0, config2 = ...\n# HEADER_CPU_TOPOLOGY info available, use -I to display\n# HEADER_NUMA_TOPOLOGY info available, use -I to display\n# pmu mappings: software = 1, tracepoint = 2, breakpoint = 5\n# ========\n#\n            sshd  1301 [001]   502.424719: probe:tcp_sendmsg: (ffffffff81505d80) size=b0\n            sshd  1301 [001]   502.424814: probe:tcp_sendmsg: (ffffffff81505d80) size=40\n            sshd  2371 [000]   502.952590: probe:tcp_sendmsg: (ffffffff81505d80) size=27\n            sshd  2372 [000]   503.025023: probe:tcp_sendmsg: (ffffffff81505d80) size=3c0\n            sshd  2372 [001]   503.203776: probe:tcp_sendmsg: (ffffffff81505d80) size=98\n            sshd  2372 [001]   503.281312: probe:tcp_sendmsg: (ffffffff81505d80) size=2d0\n            sshd  2372 [001]   503.461358: probe:tcp_sendmsg: (ffffffff81505d80) size=30\n            sshd  2372 [001]   503.670239: probe:tcp_sendmsg: (ffffffff81505d80) size=40\n            sshd  2372 [001]   503.742565: probe:tcp_sendmsg: (ffffffff81505d80) size=140\n            sshd  2372 [001]   503.822005: probe:tcp_sendmsg: (ffffffff81505d80) size=20\n            sshd  2371 [000]   504.118728: probe:tcp_sendmsg: (ffffffff81505d80) size=30\n            sshd  2371 [000]   504.192575: probe:tcp_sendmsg: (ffffffff81505d80) size=70\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"The size is shown as hexadecimal."}),"\n",(0,t.jsx)(n.h3,{id:"kernel-tcp_sendmsg-line-number-and-local-variable",children:"Kernel: tcp_sendmsg() line number and local variable"}),"\n",(0,t.jsx)(n.p,{children:"With debuginfo, perf_events can create tracepoints for lines within kernel functions. Listing available line probes for tcp_sendmsg():"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf probe -L tcp_sendmsg\n<tcp_sendmsg@/mnt/src/linux-3.14.5/net/ipv4/tcp.c:0>\n      0  int tcp_sendmsg(struct kiocb *iocb, struct sock *sk, struct msghdr *msg,\n                        size_t size)\n      2  {\n                struct iovec *iov;\n                struct tcp_sock *tp = tcp_sk(sk);\n                struct sk_buff *skb;\n      6         int iovlen, flags, err, copied = 0;\n      7         int mss_now = 0, size_goal, copied_syn = 0, offset = 0;\n                bool sg;\n                long timeo;\n[...]\n     79                 while (seglen > 0) {\n                                int copy = 0;\n     81                         int max = size_goal;\n         \n                                skb = tcp_write_queue_tail(sk);\n     84                         if (tcp_send_head(sk)) {\n     85                                 if (skb->ip_summed == CHECKSUM_NONE)\n                                                max = mss_now;\n     87                                 copy = max - skb->len;\n                                }\n         \n     90                         if (copy <= 0) {\n         new_segment:\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is Linux 3.14.5; your kernel version may look different. Lets check what variables are available on line 81:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf probe -V tcp_sendmsg:81\nAvailable variables at tcp_sendmsg:81\n        @<tcp_sendmsg+537>\n                bool    sg\n                int     copied\n                int     copied_syn\n                int     flags\n                int     mss_now\n                int     offset\n                int     size_goal\n                long int        timeo\n                size_t  seglen\n                struct iovec*   iov\n                struct sock*    sk\n                unsigned char*  from\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now lets trace line 81, with the seglen variable that is checked in the loop:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf probe --add 'tcp_sendmsg:81 seglen'\nAdded new event:\n  probe:tcp_sendmsg    (on tcp_sendmsg:81 with seglen)\n\nYou can now use it in all perf tools, such as:\n\n    perf record -e probe:tcp_sendmsg -aR sleep 1\n\n# perf record -e probe:tcp_sendmsg -a\n^C[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.188 MB perf.data (~8200 samples) ]\n# perf script\n            sshd  4652 [001] 2082360.931086: probe:tcp_sendmsg: (ffffffff81642ca9) seglen=0x80\n   app_plugin.pl  2400 [001] 2082360.970489: probe:tcp_sendmsg: (ffffffff81642ca9) seglen=0x20\n        postgres  2422 [000] 2082360.970703: probe:tcp_sendmsg: (ffffffff81642ca9) seglen=0x52\n   app_plugin.pl  2400 [000] 2082360.970890: probe:tcp_sendmsg: (ffffffff81642ca9) seglen=0x7b\n        postgres  2422 [001] 2082360.971099: probe:tcp_sendmsg: (ffffffff81642ca9) seglen=0xb\n   app_plugin.pl  2400 [000] 2082360.971140: probe:tcp_sendmsg: (ffffffff81642ca9) seglen=0x55\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is pretty amazing. Remember that you can also include in-kernel filtering using --filter, to match only the data you want."}),"\n",(0,t.jsx)(n.h3,{id:"user-malloc",children:"User: malloc()"}),"\n",(0,t.jsx)(n.p,{children:"While this is an interesting example, I want to say right off the bat that malloc() calls are very frequent, so you will need to consider the overheads of tracing calls like this."}),"\n",(0,t.jsx)(n.p,{children:"Adding a libc malloc() probe:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf probe -x /lib/x86_64-linux-gnu/libc-2.15.so --add malloc\nAdded new event:\n  probe_libc:malloc    (on 0x82f20)\n\nYou can now use it in all perf tools, such as:\n\n    perf record -e probe_libc:malloc -aR sleep 1\n"})}),"\n",(0,t.jsx)(n.p,{children:"Tracing it system-wide:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e probe_libc:malloc -a\n^C[ perf record: Woken up 12 times to write data ]\n[ perf record: Captured and wrote 3.522 MB perf.data (~153866 samples) ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"The report:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf report -n\n[...]\n# Samples: 45K of event 'probe_libc:malloc'\n# Event count (approx.): 45158\n#\n# Overhead       Samples          Command  Shared Object      Symbol\n# ........  ............  ...............  .............  ..........\n#\n    42.72%         19292       apt-config  libc-2.15.so   [.] malloc\n    19.71%          8902             grep  libc-2.15.so   [.] malloc\n     7.88%          3557             sshd  libc-2.15.so   [.] malloc\n     6.25%          2824              sed  libc-2.15.so   [.] malloc\n     6.06%          2738            which  libc-2.15.so   [.] malloc\n     4.12%          1862  update-motd-upd  libc-2.15.so   [.] malloc\n     3.72%          1680             stat  libc-2.15.so   [.] malloc\n     1.68%           758            login  libc-2.15.so   [.] malloc\n     1.21%           546        run-parts  libc-2.15.so   [.] malloc\n     1.21%           545               ls  libc-2.15.so   [.] malloc\n     0.80%           360        dircolors  libc-2.15.so   [.] malloc\n     0.56%           252               tr  libc-2.15.so   [.] malloc\n     0.54%           242              top  libc-2.15.so   [.] malloc\n     0.49%           222       irqbalance  libc-2.15.so   [.] malloc\n     0.44%           200             dpkg  libc-2.15.so   [.] malloc\n     0.38%           173         lesspipe  libc-2.15.so   [.] malloc\n     0.29%           130  update-motd-fsc  libc-2.15.so   [.] malloc\n     0.25%           112            uname  libc-2.15.so   [.] malloc\n     0.24%           108              cut  libc-2.15.so   [.] malloc\n     0.23%           104           groups  libc-2.15.so   [.] malloc\n     0.21%            94  release-upgrade  libc-2.15.so   [.] malloc\n     0.18%            82        00-header  libc-2.15.so   [.] malloc\n     0.14%            62             mesg  libc-2.15.so   [.] malloc\n     0.09%            42  update-motd-reb  libc-2.15.so   [.] malloc\n     0.09%            40             date  libc-2.15.so   [.] malloc\n     0.08%            35             bash  libc-2.15.so   [.] malloc\n     0.08%            35         basename  libc-2.15.so   [.] malloc\n     0.08%            34          dirname  libc-2.15.so   [.] malloc\n     0.06%            29               sh  libc-2.15.so   [.] malloc\n     0.06%            26        99-footer  libc-2.15.so   [.] malloc\n     0.05%            24              cat  libc-2.15.so   [.] malloc\n     0.04%            18             expr  libc-2.15.so   [.] malloc\n     0.04%            17         rsyslogd  libc-2.15.so   [.] malloc\n     0.03%            12             stty  libc-2.15.so   [.] malloc\n     0.00%             1             cron  libc-2.15.so   [.] malloc\n"})}),"\n",(0,t.jsx)(n.p,{children:"This shows the most malloc() calls were by apt-config, while I was tracing."}),"\n",(0,t.jsx)(n.h3,{id:"user-malloc-with-size",children:"User: malloc() with size"}),"\n",(0,t.jsx)(n.p,{children:"As of the Linux 3.13.1 kernel, this is not supported yet:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf probe -x /lib/x86_64-linux-gnu/libc-2.15.so --add 'malloc size'\nDebuginfo-analysis is not yet supported with -x/--exec option.\n  Error: Failed to add events. (-38)\n"})}),"\n",(0,t.jsx)(n.p,{children:"As a workaround, you can access the registers (on Linux 3.7+). For example, on x86_64:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf probe -x /lib64/libc-2.17.so '--add=malloc size=%di'\n       probe_libc:malloc    (on 0x800c0 with size=%di)\n"})}),"\n",(0,t.jsxs)(n.p,{children:['These registers ("%di" etc) are dependent on your processor architecture. To figure out which ones to use, see the ',(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI",children:"X86 calling conventions"})," on Wikipedia, or page 24 of the ",(0,t.jsx)(n.a,{href:"http://x86-64.org/documentation/abi.pdf",children:"AMD64 ABI"})," (PDF). (Thanks Jose E. Nunez for digging out these references.)"]}),"\n",(0,t.jsx)(n.h2,{id:"67-scheduler-analysis",children:"6.7. Scheduler Analysis"}),"\n",(0,t.jsx)(n.p,{children:"The perf sched subcommand provides a number of tools for analyzing kernel CPU scheduler behavior. You can use this to identify and quantify issues of scheduler latency."}),"\n",(0,t.jsx)(n.p,{children:"The current overhead of this tool (as of up to Linux 4.10) may be noticeable, as it instruments and dumps scheduler events to the perf.data file for later analysis. For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf sched record -- sleep 1\n[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 1.886 MB perf.data (13502 samples) ]\n"})}),"\n",(0,t.jsx)(n.p,{children:"That's 1.9 Mbytes for one second, including 13,502 samples. The size and rate will be relative to your workload and number of CPUs (this example is an 8 CPU server running a software build). How this is written to the file system has been optimized: it only woke up one time to read the event buffers and write them to disk, which greatly reduces overhead. That said, there are still significant overheads with instrumenting all scheduler events and writing event data to the file system. These events:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf script --header\n# ========\n# captured on: Sun Feb 26 19:40:00 2017\n# hostname : bgregg-xenial\n# os release : 4.10-virtual\n# perf version : 4.10\n# arch : x86_64\n# nrcpus online : 8\n# nrcpus avail : 8\n# cpudesc : Intel(R) Xeon(R) CPU E5-2680 v2 @ 2.80GHz\n# cpuid : GenuineIntel,6,62,4\n# total memory : 15401700 kB\n# cmdline : /usr/bin/perf sched record -- sleep 1 \n# event : name = sched:sched_switch, , id = { 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759 }, type = 2, size = 11...\n# event : name = sched:sched_stat_wait, , id = { 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767 }, type = 2, size =...\n# event : name = sched:sched_stat_sleep, , id = { 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775 }, type = 2, size ...\n# event : name = sched:sched_stat_iowait, , id = { 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783 }, type = 2, size...\n# event : name = sched:sched_stat_runtime, , id = { 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791 }, type = 2, siz...\n# event : name = sched:sched_process_fork, , id = { 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799 }, type = 2, siz...\n# event : name = sched:sched_wakeup, , id = { 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807 }, type = 2, size = 11...\n# event : name = sched:sched_wakeup_new, , id = { 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815 }, type = 2, size ...\n# event : name = sched:sched_migrate_task, , id = { 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823 }, type = 2, siz...\n# HEADER_CPU_TOPOLOGY info available, use -I to display\n# HEADER_NUMA_TOPOLOGY info available, use -I to display\n# pmu mappings: breakpoint = 5, power = 7, software = 1, tracepoint = 2, msr = 6\n# HEADER_CACHE info available, use -I to display\n# missing features: HEADER_BRANCH_STACK HEADER_GROUP_DESC HEADER_AUXTRACE HEADER_STAT \n# ========\n#\n    perf 16984 [005] 991962.879966:       sched:sched_wakeup: comm=perf pid=16999 prio=120 target_cpu=005\n[...]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If overhead is a problem, you can use my ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/ebpf.html#bcc",children:"eBPF/bcc Tools"})," including runqlat and runqlen which use in-kernel summaries of scheduler events, reducing overhead further. An advantage of perf sched dumping all events is that you aren't limited to the summary. If you caught an intermittent event, you can analyze those recorded events in custom ways until you understood the issue, rather than needing to catch it a second time."]}),"\n",(0,t.jsx)(n.p,{children:"The captured trace file can be reported in a number of ways, summarized by the help message:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf sched -h\n\n Usage: perf sched [] {record|latency|map|replay|script|timehist}\n\n    -D, --dump-raw-trace  dump raw trace in ASCII\n    -f, --force           don't complain, do it\n    -i, --input     input file name\n    -v, --verbose         be more verbose (show symbol address, etc)\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"perf sched latency"})," will summarize scheduler latencies by task, including average and maximum delay:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf sched latency\n\n -----------------------------------------------------------------------------------------------------------------\n  Task                  |   Runtime ms  | Switches | Average delay ms | Maximum delay ms | Maximum delay at       |\n -----------------------------------------------------------------------------------------------------------------\n  cat:(6)               |     12.002 ms |        6 | avg:   17.541 ms | max:   29.702 ms | max at: 991962.948070 s\n  ar:17043              |      3.191 ms |        1 | avg:   13.638 ms | max:   13.638 ms | max at: 991963.048070 s\n  rm:(10)               |     20.955 ms |       10 | avg:   11.212 ms | max:   19.598 ms | max at: 991963.404069 s\n  objdump:(6)           |     35.870 ms |        8 | avg:   10.969 ms | max:   16.509 ms | max at: 991963.424443 s\n  :17008:17008          |    462.213 ms |       50 | avg:   10.464 ms | max:   35.999 ms | max at: 991963.120069 s\n  grep:(7)              |     21.655 ms |       11 | avg:    9.465 ms | max:   24.502 ms | max at: 991963.464082 s\n  fixdep:(6)            |     81.066 ms |        8 | avg:    9.023 ms | max:   19.521 ms | max at: 991963.120068 s\n  mv:(10)               |     30.249 ms |       14 | avg:    8.380 ms | max:   21.688 ms | max at: 991963.200073 s\n  ld:(3)                |     14.353 ms |        6 | avg:    7.376 ms | max:   15.498 ms | max at: 991963.452070 s\n  recordmcount:(7)      |     14.629 ms |        9 | avg:    7.155 ms | max:   18.964 ms | max at: 991963.292100 s\n  svstat:17067          |      1.862 ms |        1 | avg:    6.142 ms | max:    6.142 ms | max at: 991963.280069 s\n  cc1:(21)              |   6013.457 ms |     1138 | avg:    5.305 ms | max:   44.001 ms | max at: 991963.436070 s\n  gcc:(18)              |     43.596 ms |       40 | avg:    3.905 ms | max:   26.994 ms | max at: 991963.380069 s\n  ps:17073              |     27.158 ms |        4 | avg:    3.751 ms | max:    8.000 ms | max at: 991963.332070 s\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"To shed some light as to how this is instrumented and calculated, I'll show the events that led to the top event's \"Maximum delay at\" of 29.702 ms. Here are the raw events from perf sched script:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"sh 17028 [001] 991962.918368:   sched:sched_wakeup_new: comm=sh pid=17030 prio=120 target_cpu=002\n[...]\n     cc1 16819 [002] 991962.948070:       sched:sched_switch: prev_comm=cc1 prev_pid=16819 prev_prio=120\n                                                            prev_state=R ==> next_comm=sh next_pid=17030 next_prio=120\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:'The time from the wakeup (991962.918368, which is in seconds) to the context switch (991962.948070) is 29.702 ms. This process is listed as "sh" (shell) in the raw events, but execs "cat" soon after, so is shown as "cat" in the perf sched latency output.'}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"perf sched map"})," shows all CPUs and context-switch events, with columns representing what each CPU was doing and when. It's the kind of data you see visualized in scheduler analysis GUIs (including perf timechart, with the layout rotated 90 degrees). Example output:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf sched map\n                      *A0           991962.879971 secs A0 => perf:16999\n                       A0     *B0   991962.880070 secs B0 => cc1:16863\n          *C0          A0      B0   991962.880070 secs C0 => :17023:17023\n  *D0      C0          A0      B0   991962.880078 secs D0 => ksoftirqd/0:6\n   D0      C0 *E0      A0      B0   991962.880081 secs E0 => ksoftirqd/3:28\n   D0      C0 *F0      A0      B0   991962.880093 secs F0 => :17022:17022\n  *G0      C0  F0      A0      B0   991962.880108 secs G0 => :17016:17016\n   G0      C0  F0     *H0      B0   991962.880256 secs H0 => migration/5:39\n   G0      C0  F0     *I0      B0   991962.880276 secs I0 => perf:16984\n   G0      C0  F0     *J0      B0   991962.880687 secs J0 => cc1:16996\n   G0      C0 *K0      J0      B0   991962.881839 secs K0 => cc1:16945\n   G0      C0  K0      J0 *L0  B0   991962.881841 secs L0 => :17020:17020\n   G0      C0  K0      J0 *M0  B0   991962.882289 secs M0 => make:16637\n   G0      C0  K0      J0 *N0  B0   991962.883102 secs N0 => make:16545\n   G0     *O0  K0      J0  N0  B0   991962.883880 secs O0 => cc1:16819\n   G0 *A0  O0  K0      J0  N0  B0   991962.884069 secs \n   G0  A0  O0  K0 *P0  J0  N0  B0   991962.884076 secs P0 => rcu_sched:7\n   G0  A0  O0  K0 *Q0  J0  N0  B0   991962.884084 secs Q0 => cc1:16831\n   G0  A0  O0  K0  Q0  J0 *R0  B0   991962.884843 secs R0 => cc1:16825\n   G0 *S0  O0  K0  Q0  J0  R0  B0   991962.885636 secs S0 => cc1:16900\n   G0  S0  O0 *T0  Q0  J0  R0  B0   991962.886893 secs T0 => :17014:17014\n   G0  S0  O0 *K0  Q0  J0  R0  B0   991962.886917 secs \n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is an 8 CPU system, and you can see the 8 columns for each CPU starting from the left. Some CPU columns begin blank, as we've yet to trace an event on that CPU at the start of the profile. They quickly become populated."}),"\n",(0,t.jsx)(n.p,{children:'The two character codes you see ("A0", "C0") are identifiers for tasks, which are mapped on the right ("=>"). This is more compact than using process (task) IDs. The "*" shows which CPU had the context switch event, and the new event that was running. For example, the very last line shows that at 991962.886917 (seconds) CPU 4 context-switched to K0 (a "cc1" process, PID 16945).'}),"\n",(0,t.jsx)(n.p,{children:"That example was from a busy system. Here's an idle system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf sched map\n                      *A0           993552.887633 secs A0 => perf:26596\n  *.                   A0           993552.887781 secs .  => swapper:0\n   .                  *B0           993552.887843 secs B0 => migration/5:39\n   .                  *.            993552.887858 secs \n   .                   .  *A0       993552.887861 secs \n   .                  *C0  A0       993552.887903 secs C0 => bash:26622\n   .                  *.   A0       993552.888020 secs \n   .          *D0      .   A0       993552.888074 secs D0 => rcu_sched:7\n   .          *.       .   A0       993552.888082 secs \n   .           .      *C0  A0       993552.888143 secs \n   .      *.   .       C0  A0       993552.888173 secs \n   .       .   .      *B0  A0       993552.888439 secs \n   .       .   .      *.   A0       993552.888454 secs \n   .      *C0  .       .   A0       993552.888457 secs \n   .       C0  .       .  *.        993552.889257 secs \n   .      *.   .       .   .        993552.889764 secs \n   .       .  *E0      .   .        993552.889767 secs E0 => bash:7902\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:'Idle CPUs are shown as ".".'}),"\n",(0,t.jsx)(n.p,{children:"Remember to examine the timestamp column to make sense of this visualization (GUIs use that as a dimension, which is easier to comprehend, but here the numbers are just listed). It's also only showing context switch events, and not scheduler latency. The newer timehist command has a visualization (-V) that can include wakeup events."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"perf sched timehist"})," was added in Linux 4.10, and shows the scheduler latency by event, including the time the task was waiting to be woken up (wait time) and the scheduler latency after wakeup to running (sch delay). It's the scheduler latency that we're more interested in tuning. Example output:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf sched timehist\nSamples do not have callchains.\n           time    cpu  task name                       wait time  sch delay   run time\n                        [tid/pid]                          (msec)     (msec)     (msec)\n--------------- ------  ------------------------------  ---------  ---------  ---------\n  991962.879971 [0005]  perf[16984]                         0.000      0.000      0.000 \n  991962.880070 [0007]  :17008[17008]                       0.000      0.000      0.000 \n  991962.880070 [0002]  cc1[16880]                          0.000      0.000      0.000 \n  991962.880078 [0000]  cc1[16881]                          0.000      0.000      0.000 \n  991962.880081 [0003]  cc1[16945]                          0.000      0.000      0.000 \n  991962.880093 [0003]  ksoftirqd/3[28]                     0.000      0.007      0.012 \n  991962.880108 [0000]  ksoftirqd/0[6]                      0.000      0.007      0.030 \n  991962.880256 [0005]  perf[16999]                         0.000      0.005      0.285 \n  991962.880276 [0005]  migration/5[39]                     0.000      0.007      0.019 \n  991962.880687 [0005]  perf[16984]                         0.304      0.000      0.411 \n  991962.881839 [0003]  cat[17022]                          0.000      0.000      1.746 \n  991962.881841 [0006]  cc1[16825]                          0.000      0.000      0.000 \n[...]\n  991963.885740 [0001]  :17008[17008]                      25.613      0.000      0.057 \n  991963.886009 [0001]  sleep[16999]                     1000.104      0.006      0.269 \n  991963.886018 [0005]  cc1[17083]                         19.998      0.000      9.948\n"})}),"\n",(0,t.jsx)(n.p,{children:"This output includes the sleep command run to set the duration of perf itself to one second. Note that sleep 's wait time is 1000.104 milliseconds because I had run \"sleep 1\": that's the time it was asleep waiting its timer wakeup event. Its scheduler latency was only 0.006 milliseconds, and its time on-CPU was 0.269 milliseconds."}),"\n",(0,t.jsx)(n.p,{children:"There are a number of options to timehist, including -V to add a CPU visualization column, -M to add migration events, and -w for wakeup events. For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf sched timehist -MVw\nSamples do not have callchains.\n           time    cpu  012345678  task name           wait time  sch delay   run time\n                                   [tid/pid]              (msec)     (msec)     (msec)\n--------------- ------  ---------  ------------------  ---------  ---------  ---------\n  991962.879966 [0005]             perf[16984]                                          awakened: perf[16999]\n  991962.879971 [0005]       s     perf[16984]             0.000      0.000      0.000                                 \n  991962.880070 [0007]         s   :17008[17008]           0.000      0.000      0.000                                 \n  991962.880070 [0002]    s        cc1[16880]              0.000      0.000      0.000                                 \n  991962.880071 [0000]             cc1[16881]                                           awakened: ksoftirqd/0[6]\n  991962.880073 [0003]             cc1[16945]                                           awakened: ksoftirqd/3[28]\n  991962.880078 [0000]  s          cc1[16881]              0.000      0.000      0.000                                 \n  991962.880081 [0003]     s       cc1[16945]              0.000      0.000      0.000                                 \n  991962.880093 [0003]     s       ksoftirqd/3[28]         0.000      0.007      0.012                                 \n  991962.880108 [0000]  s          ksoftirqd/0[6]          0.000      0.007      0.030                                 \n  991962.880249 [0005]             perf[16999]                                          awakened: migration/5[39]\n  991962.880256 [0005]       s     perf[16999]             0.000      0.005      0.285                                 \n  991962.880264 [0005]        m      migration/5[39]                                      migrated: perf[16999] cpu 5 => 1\n  991962.880276 [0005]       s     migration/5[39]         0.000      0.007      0.019                                 \n  991962.880682 [0005]        m      perf[16984]                                          migrated: cc1[16996] cpu 0 => 5\n  991962.880687 [0005]       s     perf[16984]             0.304      0.000      0.411                                 \n  991962.881834 [0003]             cat[17022]                                           awakened: :17020\n[...]\n  991963.885734 [0001]             :17008[17008]                                        awakened: sleep[16999]\n  991963.885740 [0001]   s         :17008[17008]          25.613      0.000      0.057                           \n  991963.886005 [0001]             sleep[16999]                                         awakened: perf[16984]\n  991963.886009 [0001]   s         sleep[16999]         1000.104      0.006      0.269\n  991963.886018 [0005]       s     cc1[17083]             19.998      0.000      9.948\n"})}),"\n",(0,t.jsx)(n.p,{children:'The CPU visualization column ("012345678") has "s" for context-switch events, and "m" for migration events, showing the CPU of the event. If you run perf sched record -g, then the stack traces are appended on the right in a single line (not shown here).'}),"\n",(0,t.jsx)(n.p,{children:'The last events in that output include those related to the "sleep 1" command used to time perf. The wakeup happened at 991963.885734, and at 991963.885740 (6 microseconds later) CPU 1 begins to context-switch to the sleep process. The column for that event still shows ":17008[17008]" for what was on-CPU, but the target of the context switch (sleep) is not shown. It is in the raw events:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:":17008 17008 [001] 991963.885740:       sched:sched_switch: prev_comm=cc1 prev_pid=17008 prev_prio=120\n                                                             prev_state=R ==> next_comm=sleep next_pid=16999 next_prio=120\n"})}),"\n",(0,t.jsx)(n.p,{children:'The 991963.886005 event shows that the perf command received a wakeup while sleep was running (almost certainly sleep waking up its parent process because it terminated), and then we have the context switch on 991963.886009 where sleep stops running, and a summary is printed out: 1000.104 ms waiting (the "sleep 1"), with 0.006 ms scheduler latency, and 0.269 ms of CPU runtime.'}),"\n",(0,t.jsx)(n.p,{children:"Here I've decorated the timehist output with the details of the context switch destination in red:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"991963.885734 [0001]             :17008[17008]                                        awakened: sleep[16999]\n  991963.885740 [0001]   s         :17008[17008]          25.613      0.000      0.057  next: sleep[16999]\n  991963.886005 [0001]             sleep[16999]                                         awakened: perf[16984]\n  991963.886009 [0001]   s         sleep[16999]         1000.104      0.006      0.269  next: cc1[17008]\n  991963.886018 [0005]       s     cc1[17083]             19.998      0.000      9.948  next: perf[16984]\n"})}),"\n",(0,t.jsx)(n.p,{children:'When sleep finished, a waiting "cc1" process then executed. perf ran on the following context switch, and is the last event in the profile (perf terminated). I\'ve added this as a -n/--next option to perf (should arrive in Linux 4.11 or 4.12).'}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"perf sched script"})," dumps all events (similar to perf script):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf sched script\n\n    perf 16984 [005] 991962.879960: sched:sched_stat_runtime: comm=perf pid=16984 runtime=3901506 [ns] vruntime=165...\n    perf 16984 [005] 991962.879966:       sched:sched_wakeup: comm=perf pid=16999 prio=120 target_cpu=005\n    perf 16984 [005] 991962.879971:       sched:sched_switch: prev_comm=perf prev_pid=16984 prev_prio=120 prev_stat...\n    perf 16999 [005] 991962.880058: sched:sched_stat_runtime: comm=perf pid=16999 runtime=98309 [ns] vruntime=16405...\n     cc1 16881 [000] 991962.880058: sched:sched_stat_runtime: comm=cc1 pid=16881 runtime=3999231 [ns] vruntime=7897...\n  :17024 17024 [004] 991962.880058: sched:sched_stat_runtime: comm=cc1 pid=17024 runtime=3866637 [ns] vruntime=7810...\n     cc1 16900 [001] 991962.880058: sched:sched_stat_runtime: comm=cc1 pid=16900 runtime=3006028 [ns] vruntime=7772...\n     cc1 16825 [006] 991962.880058: sched:sched_stat_runtime: comm=cc1 pid=16825 runtime=3999423 [ns] vruntime=7876...\n"})}),"\n",(0,t.jsxs)(n.p,{children:['Each of these events ("sched',":sched",'_stat_runtime" etc) are tracepoints you can instrument directly using perf record.']}),"\n",(0,t.jsx)(n.p,{children:"As I've shown earlier, this raw output can be useful for digging further than the summary commands."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"perf sched replay"})," will take the recorded scheduler events, and then simulate the workload by spawning threads with similar runtimes and context switches. Useful for testing and developing scheduler changes and configuration. Don't put too much faith in this (and other) workload replayers: they can be a useful load generator, but it's difficult to simulate the real workload completely. Here I'm running replay with -r -1, to repeat the workload:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf sched replay -r -1\nrun measurement overhead: 84 nsecs\nsleep measurement overhead: 146710 nsecs\nthe run test took 1000005 nsecs\nthe sleep test took 1107773 nsecs\nnr_run_events:        4175\nnr_sleep_events:      4710\nnr_wakeup_events:     2138\ntask      0 (             swapper:         0), nr_events: 13\ntask      1 (             swapper:         1), nr_events: 1\ntask      2 (             swapper:         2), nr_events: 1\ntask      3 (            kthreadd:         4), nr_events: 1\ntask      4 (            kthreadd:         6), nr_events: 29\n[...]\ntask    530 (                  sh:     17145), nr_events: 4\ntask    531 (                  sh:     17146), nr_events: 7\ntask    532 (                  sh:     17147), nr_events: 4\ntask    533 (                make:     17148), nr_events: 10\ntask    534 (                  sh:     17149), nr_events: 1\n------------------------------------------------------------\n#1  : 965.996, ravg: 966.00, cpu: 798.24 / 798.24\n#2  : 902.647, ravg: 966.00, cpu: 1157.53 / 798.24\n#3  : 945.482, ravg: 966.00, cpu: 925.25 / 798.24\n#4  : 943.541, ravg: 966.00, cpu: 761.72 / 798.24\n#5  : 914.643, ravg: 966.00, cpu: 1604.32 / 798.24\n[...]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"68-ebpf",children:"6.8. eBPF"}),"\n",(0,t.jsx)(n.p,{children:'As of Linux 4.4, perf has some enhanced BPF support (aka eBPF or just "BPF"), with more in later kernels. BPF makes perf tracing programmatic, and takes perf from being a counting & sampling-with-post-processing tracer, to a fully in-kernel programmable tracer.'}),"\n",(0,t.jsxs)(n.p,{children:["eBPF is currently a little restricted and difficult to use from perf. It's getting better all the time. A different and currently easier way to access eBPF is via the bcc Python interface, which is described on my ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/ebpf.html",children:"eBPF Tools"})," page. On this page, I'll discuss perf."]}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Linux 4.4 at least. Newer versions have more perf/BPF features, so the newer the better. Also clang (eg, apt-get install clang)."}),"\n",(0,t.jsx)(n.h3,{id:"kmem_cache_alloc-from-example",children:"kmem_cache_alloc from Example"}),"\n",(0,t.jsx)(n.p,{children:"This program traces the kernel kmem_cache_alloc() function, only if its calling function matches a specified range, filtered in kernel context. You can imagine doing this for efficiency: instead of tracing all allocations, which can be very frequent and add significant overhead, you filter for just a range of kernel calling functions of interest, such as a kernel module. I'll loosely match tcp functions as an example, which are in memory at these addresses:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# grep tcp /proc/kallsyms | more\n[...]\nffffffff817c1bb0 t tcp_get_info_chrono_stats\nffffffff817c1c60 T tcp_init_sock\nffffffff817c1e30 t tcp_splice_data_recv\nffffffff817c1e70 t tcp_push\nffffffff817c20a0 t tcp_send_mss\nffffffff817c2170 t tcp_recv_skb\nffffffff817c2250 t tcp_cleanup_rbuf\n[...]\nffffffff818524f0 T tcp6_proc_exit\nffffffff81852510 T tcpv6_exit\nffffffff818648a0 t tcp6_gro_complete\nffffffff81864910 t tcp6_gro_receive\nffffffff81864ae0 t tcp6_gso_segment\nffffffff8187bd89 t tcp_v4_inbound_md5_hash\n"})}),"\n",(0,t.jsx)(n.p,{children:"I'll assume these functions are contiguous, so that by tracing the range 0xffffffff817c1bb0 to 0xffffffff8187bd89, I'm matching much of tcp."}),"\n",(0,t.jsx)(n.p,{children:"Here is my BPF program, kca_from.c:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'#include <uapi/linux/bpf.h>\n#include <uapi/linux/ptrace.h>\n\n#define SEC(NAME) __attribute__((section(NAME), used))\n\n/*\n * Edit the following to match the instruction address range you want to\n * sample. Eg, look in /proc/kallsyms. The addresses will change for each\n * kernel version and build.\n */\n#define RANGE_START  0xffffffff817c1bb0\n#define RANGE_END    0xffffffff8187bd89\n\nstruct bpf_map_def {\n    unsigned int type;\n    unsigned int key_size;\n    unsigned int value_size;\n    unsigned int max_entries;\n};\n\nstatic int (*probe_read)(void *dst, int size, void *src) =\n    (void *)BPF_FUNC_probe_read;\nstatic int (*get_smp_processor_id)(void) =\n    (void *)BPF_FUNC_get_smp_processor_id;\nstatic int (*perf_event_output)(void *, struct bpf_map_def *, int, void *,\n    unsigned long) = (void *)BPF_FUNC_perf_event_output;\n\nstruct bpf_map_def SEC("maps") channel = {\n    .type = BPF_MAP_TYPE_PERF_EVENT_ARRAY,\n    .key_size = sizeof(int),\n    .value_size = sizeof(u32),\n    .max_entries = __NR_CPUS__,\n};\n\nSEC("func=kmem_cache_alloc")\nint func(struct pt_regs *ctx)\n{\n    u64 ret = 0;\n    // x86_64 specific:\n    probe_read(&ret, sizeof(ret), (void *)(ctx->bp+8));\n    if (ret >= RANGE_START && ret < RANGE_END) {\n        perf_event_output(ctx, &channel, get_smp_processor_id(), \n            &ret, sizeof(ret));\n    }\n    return 0;\n}\n\nchar _license[] SEC("license") = "GPL";\nint _version SEC("version") = LINUX_VERSION_CODE;\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now I'll execute it, then dump the events:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e bpf-output/no-inherit,name=evt/ -e ./kca_from.c/map:channel.event=evt/ -a -- sleep 1\nbpf: builtin compilation failed: -95, try external compiler\n[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.214 MB perf.data (3 samples) ]\n\n# perf script\n testserver00001 14337 [003] 481432.395181:          0     evt:  ffffffff81210f51 kmem_cache_alloc (/lib/modules/...)\n      BPF output: 0000: 0f b4 7c 81 ff ff ff ff  ..|.....\n                  0008: 00 00 00 00              ....    \n\n    redis-server  1871 [005] 481432.395258:          0     evt:  ffffffff81210f51 kmem_cache_alloc (/lib/modules/...)\n      BPF output: 0000: 14 55 7c 81 ff ff ff ff  .U|.....\n                  0008: 00 00 00 00              ....    \n\n    redis-server  1871 [005] 481432.395456:          0     evt:  ffffffff81210f51 kmem_cache_alloc (/lib/modules/...)\n      BPF output: 0000: fe dc 7d 81 ff ff ff ff  ..}.....\n                  0008: 00 00 00 00              ....\n"})}),"\n",(0,t.jsx)(n.p,{children:'It worked: the "BPF output" records contain addresses in our range: 0xffffffff817cb40f, and so on. kmem_cache_alloc() is a frequently called function, so that it only matched a few entries in one second of tracing is an indication it is working (I can also relax that range to confirm it).'}),"\n",(0,t.jsx)(n.p,{children:"Adding stack traces with -g:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e bpf-output/no-inherit,name=evt/ -e ./kca_from.c/map:channel.event=evt/ -a -g -- sleep 1\nbpf: builtin compilation failed: -95, try external compiler\n[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.215 MB perf.data (3 samples) ]\n\n# perf script\ntestserver00001 16744 [002] 481518.262579:          0                 evt: \n                  410f51 kmem_cache_alloc (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9cb40f tcp_conn_request (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9da243 tcp_v4_conn_request (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9d0936 tcp_rcv_state_process (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9db102 tcp_v4_do_rcv (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9dcabf tcp_v4_rcv (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b4af4 ip_local_deliver_finish (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b4dff ip_local_deliver (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b477b ip_rcv_finish (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b50fb ip_rcv (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  97119e __netif_receive_skb_core (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  971708 __netif_receive_skb (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9725df process_backlog (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  971c8e net_rx_action (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  a8e58d __do_softirq (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  a8c9ac do_softirq_own_stack (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  28a061 do_softirq.part.18 (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  28a0ed __local_bh_enable_ip (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b8ff3 ip_finish_output2 (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b9f43 ip_finish_output (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9ba9f6 ip_output (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9ba155 ip_local_out (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9ba48a ip_queue_xmit (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9d3823 tcp_transmit_skb (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9d5345 tcp_connect (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9da764 tcp_v4_connect (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9f1abc __inet_stream_connect (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9f1d38 inet_stream_connect (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  952fd9 SYSC_connect (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  953c1e sys_connect (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  a8b9fb entry_SYSCALL_64_fastpath (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                   10800 __GI___libc_connect (/lib/x86_64-linux-gnu/libpthread-2.23.so)\n\n      BPF output: 0000: 0f b4 7c 81 ff ff ff ff  ..|.....\n                  0008: 00 00 00 00              ....    \n\nredis-server  1871 [003] 481518.262670:          0                 evt: \n                  410f51 kmem_cache_alloc (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9c5514 tcp_poll (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9515ba sock_poll (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  485699 sys_epoll_ctl (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  a8b9fb entry_SYSCALL_64_fastpath (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  106dca epoll_ctl (/lib/x86_64-linux-gnu/libc-2.23.so)\n\n      BPF output: 0000: 14 55 7c 81 ff ff ff ff  .U|.....\n                  0008: 00 00 00 00              ....    \n\nredis-server  1871 [003] 481518.262870:          0                 evt: \n                  410f51 kmem_cache_alloc (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9ddcfe tcp_time_wait (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9cefff tcp_fin (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9cf630 tcp_data_queue (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9d0abd tcp_rcv_state_process (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9db102 tcp_v4_do_rcv (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9dca8b tcp_v4_rcv (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b4af4 ip_local_deliver_finish (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b4dff ip_local_deliver (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b477b ip_rcv_finish (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b50fb ip_rcv (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  97119e __netif_receive_skb_core (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  971708 __netif_receive_skb (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9725df process_backlog (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  971c8e net_rx_action (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  a8e58d __do_softirq (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  a8c9ac do_softirq_own_stack (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  28a061 do_softirq.part.18 (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  28a0ed __local_bh_enable_ip (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b8ff3 ip_finish_output2 (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9b9f43 ip_finish_output (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9ba9f6 ip_output (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9ba155 ip_local_out (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9ba48a ip_queue_xmit (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9d3823 tcp_transmit_skb (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9d3e24 tcp_write_xmit (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9d4c31 __tcp_push_pending_frames (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9d6881 tcp_send_fin (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9c70b7 tcp_close (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  9f161c inet_release (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  95181f sock_release (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  951892 sock_close (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  43b2f7 __fput (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  43b46e ____fput (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  2a3cfe task_work_run (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  2032ba exit_to_usermode_loop (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  203b29 syscall_return_slowpath (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                  a8ba88 entry_SYSCALL_64_fastpath (/lib/modules/4.10.0-rc8-virtual/build/vmlinux)\n                   105cd __GI___libc_close (/lib/x86_64-linux-gnu/libpthread-2.23.so)\n\n      BPF output: 0000: fe dc 7d 81 ff ff ff ff  ..}.....\n                  0008: 00 00 00 00              ....\n"})}),"\n",(0,t.jsx)(n.p,{children:"This confirms the parent functions that were matched by the range."}),"\n",(0,t.jsx)(n.h3,{id:"more-examples",children:"More Examples"}),"\n",(0,t.jsx)(n.p,{children:"XXX fill me in."}),"\n",(0,t.jsx)(n.h2,{id:"7-visualizations",children:"7. Visualizations"}),"\n",(0,t.jsx)(n.p,{children:"perf_events has a builtin visualization: timecharts, as well as text-style visualization via its text user interface (TUI) and tree reports. The following two sections show visualizations of my own: flame graphs and heat maps. The software I'm using is open source and on github, and produces these from perf_events collected data."}),"\n",(0,t.jsx)(n.h2,{id:"71-flame-graphs",children:"7.1. Flame Graphs"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/flamegraphs.html",children:"Flame Graphs"})," can be produced from perf_events profiling data using the ",(0,t.jsx)(n.a,{href:"https://github.com/brendangregg/FlameGraph",children:"FlameGraph tools"})," software. This visualizes the same data you see in perf report, and works with any perf.data file that was captured with stack traces (-g)."]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["This example CPU flame graph shows a network workload for the 3.2.9-1 Linux kernel, running as a KVM instance (",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/FlameGraphs/cpu-linux-tcpsend.svg",children:"SVG"}),", ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/FlameGraphs/cpu-linux-tcpsend.png",children:"PNG"}),"):"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(1300).A+"",width:"2400",height:"1380"})}),"\n",(0,t.jsxs)(n.p,{children:["Flame Graphs show the sample population across the x-axis, and stack depth on the y-axis. Each function (stack frame) is drawn as a rectangle, with the width relative to the number of samples. See the ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/FlameGraphs/cpuflamegraphs",children:"CPU Flame Graphs"})," page for the full description of how these work."]}),"\n",(0,t.jsx)(n.p,{children:"You can use the mouse to explore where kernel CPU time is spent, quickly quantifying code-paths and determining where performance tuning efforts are best spent. This example shows that most time was spent in the vp_notify() code-path, spending 70.52% of all on-CPU samples performing iowrite16(), which is handled by the KVM hypervisor. This information has been extremely useful for directing KVM performance efforts."}),"\n",(0,t.jsx)(n.p,{children:"A similar network workload on a bare metal Linux system looks quite different, as networking isn't processed via the virtio-net driver, for a start."}),"\n",(0,t.jsx)(n.h3,{id:"generation",children:"Generation"}),"\n",(0,t.jsxs)(n.p,{children:["The example flame graph was generated using perf_events and the ",(0,t.jsx)(n.a,{href:"https://github.com/brendangregg/FlameGraph",children:"FlameGraph tools"})," (this is the old-fashioned method for Linux 2.6.X onwards; see the later Newer perf section):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# git clone https://github.com/brendangregg/FlameGraph  # or download it from github\n# cd FlameGraph\n# perf record -F 99 -ag -- sleep 60\n# perf script | ./stackcollapse-perf.pl > out.perf-folded\n# cat out.perf-folded | ./flamegraph.pl > perf-kernel.svg\n"})}),"\n",(0,t.jsx)(n.p,{children:"The first perf command profiles CPU stacks, as explained earlier. I adjusted the rate to 99 Hertz here; I actually generated the flame graph from a 1000 Hertz profile, but I'd only use that if you had a reason to go faster, which costs more in overhead. The samples are saved in a perf.data file, which can be viewed using perf report:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf report --stdio\n[...]\n# Overhead          Command          Shared Object                               Symbol\n# ........  ...............  .....................  ...................................\n#\n    72.18%            iperf  [kernel.kallsyms]      [k] iowrite16\n                      |\n                      --- iowrite16\n                         |          \n                         |--99.53%-- vp_notify\n                         |          virtqueue_kick\n                         |          start_xmit\n                         |          dev_hard_start_xmit\n                         |          sch_direct_xmit\n                         |          dev_queue_xmit\n                         |          ip_finish_output\n                         |          ip_output\n                         |          ip_local_out\n                         |          ip_queue_xmit\n                         |          tcp_transmit_skb\n                         |          tcp_write_xmit\n                         |          |          \n                         |          |--98.16%-- tcp_push_one\n                         |          |          tcp_sendmsg\n                         |          |          inet_sendmsg\n                         |          |          sock_aio_write\n                         |          |          do_sync_write\n                         |          |          vfs_write\n                         |          |          sys_write\n                         |          |          system_call\n                         |          |          0x369e40e5cd\n                         |          |          \n                         |           --1.84%-- __tcp_push_pending_frames\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:'This tree follows the flame graph when reading it top-down. When using -g/--call-graph (for "caller", instead of the "callee" default), it generates a tree that follows the flame graph when read bottom-up. The hottest stack trace in the flame graph (@70.52%) can be seen in this perf call graph as the product of the top three nodes (72.18% x 99.53% x 98.16%).'}),"\n",(0,t.jsx)(n.p,{children:"The perf report tree (and the ncurses navigator) do an excellent job at presenting this information as text. However, with text there are limitations. The output often does not fit in one screen (you could say it doesn't need to, if the bulk of the samples are identified on the first page). Also, identifying the hottest code paths requires reading the percentages. With the flame graph, all the data is on screen at once, and the hottest code-paths are immediately obvious as the widest functions."}),"\n",(0,t.jsx)(n.p,{children:'For generating the flame graph, the perf script command dumps the stack samples, which are then aggregated by stackcollapse-perf.pl and folded into single lines per-stack. That output is then converted by flamegraph.pl into the SVG. I included a gratuitous "cat" command to make it clear that flamegraph.pl can process the output of a pipe, which could include Unix commands to filter or preprocess (grep, sed, awk).'}),"\n",(0,t.jsx)(n.h3,{id:"piping",children:"Piping"}),"\n",(0,t.jsx)(n.p,{children:"A flame graph can be generated directly by piping all the steps:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf script | ./stackcollapse-perf.pl | ./flamegraph.pl > perf-kernel.svg\n"})}),"\n",(0,t.jsx)(n.p,{children:"In practice I don't do this, as I often re-run flamegraph.pl multiple times, and this one-liner would execute everything multiple times. The output of perf script can be dozens of Mbytes, taking many seconds to process. By writing stackcollapse-perf.pl to a file, you've cached the slowest step, and can also edit the file (vi) to delete unimportant stacks, such as CPU idle threads."}),"\n",(0,t.jsx)(n.h3,{id:"filtering",children:"Filtering"}),"\n",(0,t.jsx)(n.p,{children:"The one-line-per-stack output of stackcollapse-perf.pl is also convenient for grep(1). E.g.:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf script | ./stackcollapse-perf.pl > out.perf-folded\n\n# grep -v cpu_idle out.perf-folded | ./flamegraph.pl > nonidle.svg\n\n# grep ext4 out.perf-folded | ./flamegraph.pl > ext4internals.svg\n\n# egrep 'system_call.*sys_(read|write)' out.perf-folded | ./flamegraph.pl > rw.svg\n"})}),"\n",(0,t.jsx)(n.p,{children:"I frequently elide the cpu_idle threads in this way, to focus on the real threads that are consuming CPU resources. If I miss this step, the cpu_idle threads can often dominate the flame graph, squeezing the interesting code paths."}),"\n",(0,t.jsx)(n.p,{children:'Note that it would be a little more efficient to process the output of perf report instead of perf script; better still, perf report could have a report style (eg, "-g folded") that output folded stacks directly, obviating the need for stackcollapse-perf.pl. There could even be a perf mode that output the SVG directly (which wouldn\'t be the first one; see perf-timechart), although, that would miss the value of being able to grep the folded stacks (which I use frequently).'}),"\n",(0,t.jsxs)(n.p,{children:["There are more examples of perf_events CPU flame graphs on the ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html#Examples",children:"CPU flame graph"})," page, including a ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html#perf",children:"summary"})," of these instructions. I have also shared an example of using perf for a ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/FlameGraphs/offcpuflamegraphs.html#BlockIO",children:"Block Device I/O Flame Graph"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"newer-perf",children:"Newer perf"}),"\n",(0,t.jsx)(n.p,{children:"perf has added features to aid flame graph generation. XXX"}),"\n",(0,t.jsx)(n.h2,{id:"72-heat-maps",children:"7.2. Heat Maps"}),"\n",(0,t.jsx)(n.p,{children:"Since perf_events can record high resolution timestamps (microseconds) for events, some latency measurements can be derived from trace data."}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["The following heat map visualizes disk I/O latency data collected from perf_events (",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/perf_events/perf_block_latencyheatmap.svg",children:"SVG"}),", ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/perf_events/perf_block_latencyheatmap.png",children:"PNG"}),"):"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(1895).A+"",width:"1944",height:"968"})}),"\n",(0,t.jsx)(n.p,{children:"Mouse-over blocks to explore the latency distribution over time. The x-axis is the passage of time, the y-axis latency, and the z-axis (color) is the number of I/O at that time and latency range. The distribution is bimodal, with the dark line at the bottom showing that many disk I/O completed with sub-millisecond latency: cache hits. There is a cloud of disk I/O from about 3 ms to 25 ms, which would be caused by random disk I/O (and queueing). Both these modes averaged to the 9 ms we saw earlier."}),"\n",(0,t.jsx)(n.p,{children:"The following iostat output was collected at the same time as the heat map data was collected (shows a typical one second summary):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# iostat -x 1\n[...]\nDevice: rrqm/s wrqm/s    r/s   w/s   rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm  %util\nvda       0.00   0.00   0.00  0.00    0.00  0.00     0.00     0.00  0.00    0.00    0.00  0.00   0.00\nvdb       0.00   0.00 334.00  0.00 2672.00  0.00    16.00     2.97  9.01    9.01    0.00  2.99 100.00\n"})}),"\n",(0,t.jsx)(n.p,{children:"This workload has an average I/O time (await) of 9 milliseconds, which sounds like a fairly random workload on 7200 RPM disks. The problem is that we don't know the distribution from the iostat output, or any similar latency average. There could be latency outliers present, which is not visible in the average, and yet are causing problems. The heat map did show I/O up to 50 ms, which you might not have expected from that iostat output. There could also be multiple modes, as we saw in the heat map, which are also not visible in an average."}),"\n",(0,t.jsx)(n.h3,{id:"gathering",children:"Gathering"}),"\n",(0,t.jsx)(n.p,{children:"I used perf_events to record the block request (disk I/O) issue and completion static tracepoints:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf record -e block:block_rq_issue -e block:block_rq_complete -a sleep 120\n[ perf record: Woken up 36 times to write data ]\n[ perf record: Captured and wrote 8.885 MB perf.data (~388174 samples) ]\n# perf script\n[...]\n     randread.pl  2522 [000]  6011.824759: block:block_rq_issue: 254,16 R 0 () 7322849 + 16 [randread.pl]\n     randread.pl  2520 [000]  6011.824866: block:block_rq_issue: 254,16 R 0 () 26144801 + 16 [randread.pl]\n         swapper     0 [000]  6011.828913: block:block_rq_complete: 254,16 R () 31262577 + 16 [0]\n     randread.pl  2521 [000]  6011.828970: block:block_rq_issue: 254,16 R 0 () 70295937 + 16 [randread.pl]\n         swapper     0 [000]  6011.835862: block:block_rq_complete: 254,16 R () 26144801 + 16 [0]\n     randread.pl  2520 [000]  6011.835932: block:block_rq_issue: 254,16 R 0 () 5495681 + 16 [randread.pl]\n         swapper     0 [000]  6011.837988: block:block_rq_complete: 254,16 R () 7322849 + 16 [0]\n     randread.pl  2522 [000]  6011.838051: block:block_rq_issue: 254,16 R 0 () 108589633 + 16 [randread.pl]\n         swapper     0 [000]  6011.850615: block:block_rq_complete: 254,16 R () 108589633 + 16 [0]\n[...]\n"})}),"\n",(0,t.jsx)(n.p,{children:"The full output from perf script is about 70,000 lines. I've included some here so that you can see the kind of data available."}),"\n",(0,t.jsx)(n.h3,{id:"processing",children:"Processing"}),"\n",(0,t.jsx)(n.p,{children:"To calculate latency for each I/O, I'll need to pair up the issue and completion events, so that I can calculate the timestamp delta. The columns look straightforward (and are in include/trace/events/block.h), with the 4th field the timestamp in seconds (with microsecond resolution), the 6th field the disk device ID (major, minor), and a later field (which varies based on the tracepoint) has the disk offset. I'll use the disk device ID and offset as the unique identifier, assuming the kernel will not issue concurrent I/O to the exact same location."}),"\n",(0,t.jsx)(n.p,{children:"I'll use awk to do these calculations and print the completion times and latency:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'# perf script | awk \'{ gsub(/:/, "") } $5 ~ /issue/ { ts[$6, $10] = $4 }\n    $5 ~ /complete/ { if (l = ts[$6, $9]) { printf "%.f %.f\\n", $4 * 1000000,\n    ($4 - l) * 1000000; ts[$6, $10] = 0 } }\' > out.lat_us\n# more out.lat_us\n6011793689 8437\n6011797306 3488\n6011798851 1283\n6011806422 11248\n6011824680 18210\n6011824693 21908\n[...]\n'})}),"\n",(0,t.jsx)(n.p,{children:"I converted both columns to be microseconds, to make the next step easier."}),"\n",(0,t.jsx)(n.h3,{id:"generation-1",children:"Generation"}),"\n",(0,t.jsxs)(n.p,{children:["Now I can use my trace2heatmap.pl program (",(0,t.jsx)(n.a,{href:"https://github.com/brendangregg/HeatMap",children:"github"}),"), to generate the interactive SVG heatmap from the trace data (and uses microseconds by default):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# ./trace2heatmap.pl --unitstime=us --unitslat=us --maxlat=50000 out.lat_us > out.svg\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When I generated the heatmap, I truncated the y scale to 50 ms. You can adjust it to suit your investigation, increasing it to see more of the latency outliers, or decreasing it to reveal more resolution for the lower latencies: for example, with a ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/perf_events/perf_block_latencyheatmap2.svg",children:"250 us limit"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"overheads",children:"Overheads"}),"\n",(0,t.jsx)(n.p,{children:"While this can be useful to do, be mindful of overheads. In my case, I had a low rate of disk I/O (~300 IOPS), which generated an 8 Mbyte trace file after 2 minutes. If your disk IOPS were 100x that, your trace file will also be 100x, and the overheads for gathering and processing will add up."}),"\n",(0,t.jsxs)(n.p,{children:["For more about latency heatmaps, see my ",(0,t.jsx)(n.a,{href:"http://www.slideshare.net/brendangregg/lisa2010-visualizations",children:"LISA 2010"})," presentation slides, and my ",(0,t.jsx)(n.a,{href:"http://cacm.acm.org/magazines/2010/7/95062-visualizing-system-latency/fulltext",children:"CACM 2010"})," article, both about heat maps. Also see my ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-07-01/perf-heat-maps.html",children:"Perf Heat Maps"})," blog post."]}),"\n",(0,t.jsx)(n.h2,{id:"8-targets",children:"8. Targets"}),"\n",(0,t.jsx)(n.p,{children:"Notes on specific targets."}),"\n",(0,t.jsx)(n.p,{children:"Under construction."}),"\n",(0,t.jsx)(n.h2,{id:"81-java",children:"8.1. Java"}),"\n",(0,t.jsx)(n.h2,{id:"82-nodejs",children:"8.2. Node.js"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Node.js V8 JIT internals with annotation support ",(0,t.jsx)(n.a,{href:"https://twitter.com/brendangregg/status/755838455549001728",children:"https://twitter.com/brendangregg/status/755838455549001728"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"9-more",children:"9. More"}),"\n",(0,t.jsx)(n.p,{children:"There's more capabilities to perf_events than I've demonstrated here. I'll add examples of the other subcommands when I get a chance."}),"\n",(0,t.jsxs)(n.p,{children:["Here's a preview of perf trace, which was added in ",(0,t.jsx)(n.a,{href:"http://kernelnewbies.org/Linux_3.7",children:"3.7"}),", demonstrated on 3.13.1:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# perf trace ls\n     0.109 ( 0.000 ms):  ... [continued]: read()) = 1\n     0.430 ( 0.000 ms):  ... [continued]: execve()) = -2\n     0.565 ( 0.051 ms): execve(arg0: 140734989338352, arg1: 140734989358048, arg2: 40612288, arg3: 1407...\n     0.697 ( 0.051 ms): execve(arg0: 140734989338353, arg1: 140734989358048, arg2: 40612288, arg3: 1407...\n     0.797 ( 0.046 ms): execve(arg0: 140734989338358, arg1: 140734989358048, arg2: 40612288, arg3: 1407...\n     0.915 ( 0.045 ms): execve(arg0: 140734989338359, arg1: 140734989358048, arg2: 40612288, arg3: 1407...\n     1.030 ( 0.044 ms): execve(arg0: 140734989338362, arg1: 140734989358048, arg2: 40612288, arg3: 1407...\n     1.414 ( 0.311 ms): execve(arg0: 140734989338363, arg1: 140734989358048, arg2: 40612288, arg3: 1407...\n     2.156 ( 1.053 ms):  ... [continued]: brk()) = 0xac9000\n     2.319 ( 1.215 ms):  ... [continued]: access()) = -1 ENOENT No such file or directory\n     2.479 ( 1.376 ms):  ... [continued]: mmap()) = 0xb3a84000\n     2.634 ( 0.052 ms): access(arg0: 139967406289504, arg1: 4, arg2: 139967408408688, arg3: 13996740839...\n     2.787 ( 0.205 ms):  ... [continued]: open()) = 3\n     2.919 ( 0.337 ms):  ... [continued]: fstat()) = 0\n     3.049 ( 0.057 ms): mmap(arg0: 0, arg1: 22200, arg2: 1, arg3: 2, arg4: 3, arg5: 0         ) = 0xb3a...\n     3.177 ( 0.184 ms):  ... [continued]: close()) = 0\n     3.298 ( 0.043 ms): access(arg0: 139967406278152, arg1: 0, arg2: 6, arg3: 7146772199173811245, arg4...\n     3.432 ( 0.049 ms): open(arg0: 139967408376811, arg1: 524288, arg2: 0, arg3: 139967408376810, arg4:...\n     3.560 ( 0.045 ms): read(arg0: 3, arg1: 140737350651528, arg2: 832, arg3: 139967408376810, arg4: 14...\n     3.684 ( 0.042 ms): fstat(arg0: 3, arg1: 140737350651216, arg2: 140737350651216, arg3: 354389249727...\n     3.814 ( 0.054 ms): mmap(arg0: 0, arg1: 2221680, arg2: 5, arg3: 2050, arg4: 3, arg5: 0    ) = 0xb36...\n[...]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["An advantage is that this is buffered tracing, which costs much less overhead than strace, as I described ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#perf_vs_strace",children:"earlier"}),". The perf trace output seen from this 3.13.1 kernel does, however, looks suspicious for a number of reasons. I think this is still an in-development feature. It reminds me of my ",(0,t.jsx)(n.a,{href:"http://www.brendangregg.com/dtrace.html#dtruss",children:"dtruss"})," tool, which has a similar role, before I added code to print each system call in a custom and appropriate way."]}),"\n",(0,t.jsx)(n.h2,{id:"10-building",children:"10. Building"}),"\n",(0,t.jsx)(n.p,{children:"The steps to build perf_events depends on your kernel version and Linux distribution. In summary:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Get the Linux kernel source that matches your currently running kernel (eg, from the linux-source package, or ",(0,t.jsx)(n.a,{href:"http://kernel.org/",children:"kernel.org"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"Unpack the kernel source."}),"\n",(0,t.jsx)(n.li,{children:"cd tools/perf"}),"\n",(0,t.jsx)(n.li,{children:"make"}),"\n",(0,t.jsx)(n.li,{children:"Fix all errors, and most warnings, from (4)."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The first error may be that you are missing make, or a compiler (gcc). Once you have those, you may then see various warnings about missing libraries, which disable perf features. I'd install as many as possible, and take note of the ones you are missing."}),"\n",(0,t.jsxs)(n.p,{children:["These perf build warnings are ",(0,t.jsx)(n.em,{children:"really helpful"}),", and are generated by its Makefile. Here's the makefile from 3.9.3:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# grep found Makefile\nmsg := $(warning No libelf found, disables 'probe' tool, please install elfutils-libelf-devel/libelf-dev);\nmsg := $(error No gnu/libc-version.h found, please install glibc-dev[el]/glibc-static);\nmsg := $(warning No libdw.h found or old libdw.h found or elfutils is older than 0.138, disables dwarf support.\n Please install new elfutils-devel/libdw-dev);\nmsg := $(warning No libunwind found, disabling post unwind support. Please install libunwind-dev[el] >= 0.99);\nmsg := $(warning No libaudit.h found, disables 'trace' tool, please install audit-libs-devel or libaudit-dev);\nmsg := $(warning newt not found, disables TUI support. Please install newt-devel or libnewt-dev);\nmsg := $(warning GTK2 not found, disables GTK2 support. Please install gtk2-devel or libgtk2.0-dev);\n$(if $(1),$(warning No $(1) was found))\nmsg := $(warning No bfd.h/libbfd found, install binutils-dev[el]/zlib-static to gain symbol demangling)\nmsg := $(warning No numa.h found, disables 'perf bench numa mem' benchmark, please install numa-libs-devel or\n libnuma-dev);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Take the time to read them. This list is likely to grow as new features are added to perf_events."}),"\n",(0,t.jsx)(n.p,{children:"The following notes show what I've specifically done for kernel versions and distributions, in case it is helpful."}),"\n",(0,t.jsx)(n.h3,{id:"packages-ubuntu-386",children:"Packages: Ubuntu, 3.8.6"}),"\n",(0,t.jsx)(n.p,{children:"Packages required for key functionality: gcc make bison flex elfutils libelf-dev libdw-dev libaudit-dev. You may also consider python-dev (for python scripting) and binutils-dev (for symbol demangling), which are larger packages."}),"\n",(0,t.jsx)(n.h3,{id:"kernel-config-386",children:"Kernel Config: 3.8.6"}),"\n",(0,t.jsx)(n.p,{children:"Here are some kernel CONFIG options for perf_events functionality:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# for perf_events:\nCONFIG_PERF_EVENTS=y\n# for stack traces:\nCONFIG_FRAME_POINTER=y\n# kernel symbols:\nCONFIG_KALLSYMS=y\n# tracepoints:\nCONFIG_TRACEPOINTS=y\n# kernel function trace:\nCONFIG_FTRACE=y\n# kernel-level dynamic tracing:\nCONFIG_KPROBES=y\nCONFIG_KPROBE_EVENTS=y\n# user-level dynamic tracing:\nCONFIG_UPROBES=y\nCONFIG_UPROBE_EVENTS=y\n# full kernel debug info:\nCONFIG_DEBUG_INFO=y\n# kernel lock tracing:\nCONFIG_LOCKDEP=y\n# kernel lock tracing:\nCONFIG_LOCK_STAT=y\n# kernel dynamic tracepoint variables:\nCONFIG_DEBUG_INFO=y\n"})}),"\n",(0,t.jsx)(n.p,{children:"You may need to build your own kernel to enable these. The exact set you need depends on your needs and kernel version, and list is likely to grow as new features are added to perf_events."}),"\n",(0,t.jsx)(n.h2,{id:"101-static-builds",children:"10.1. Static Builds"}),"\n",(0,t.jsx)(n.p,{children:"I've sometimes done this so that I have a single perf binary that can be copied into Docker containers for execution. Steps, given the Linux source:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd tools/perf\nvi Makefile.perf\n  LDFLAGS=-static\nmake clean; make\n"})}),"\n",(0,t.jsx)(n.h2,{id:"11-troubleshooting",children:"11. Troubleshooting"}),"\n",(0,t.jsxs)(n.p,{children:["If you see hexadecimal numbers instead of symbols, or have truncated stack traces, see the ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Prerequisites",children:"Prerequisites"})," section."]}),"\n",(0,t.jsx)(n.p,{children:"Here are some rough notes from other issues I've encountered."}),"\n",(0,t.jsx)(n.p,{children:"This sometimes works (3.5.7.2) and sometimes throws the following error (3.9.3):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"ubuntu# perf stat -e 'syscalls:sys_enter_*' -a sleep 5\nError:\nToo many events are opened.\nTry again after reducing the number of events.\n"})}),"\n",(0,t.jsx)(n.p,{children:"This can be fixed by increasing the file descriptor limit using ulimit -n."}),"\n",(0,t.jsx)(n.p,{children:"Type 3 errors:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"ubuntu# perf report\n0xab7e48 [0x30]: failed to process type: 3\n# ========\n# captured on: Tue Jan 28 21:08:31 2014\n# hostname : pgbackup\n# os release : 3.9.3-ubuntu-12-opt\n# perf version : 3.9.3\n# arch : x86_64\n# nrcpus online : 8\n# nrcpus avail : 8\n# cpudesc : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz\n# cpuid : GenuineIntel,6,45,7\n# total memory : 8179104 kB\n# cmdline : /lib/modules/3.9.3-ubuntu-12-opt/build/tools/perf/perf record\n -e sched:sched_process_exec -a \n# event : name = sched:sched_process_exec, type = 2, config = 0x125, config1 = 0x0,\n config2 = 0x0, excl_usr = 0, excl_kern = 0, excl_host = 0, excl_guest = 1, precise_ip = 0\n# HEADER_CPU_TOPOLOGY info available, use -I to display\n# HEADER_NUMA_TOPOLOGY info available, use -I to display\n# pmu mappings: software = 1, tracepoint = 2, breakpoint = 5\n# ========\n#\nWarning: Timestamp below last timeslice flush\n"})}),"\n",(0,t.jsx)(n.h2,{id:"12-other-tools",children:"12. Other Tools"}),"\n",(0,t.jsxs)(n.p,{children:["perf_events has the capabilities from many other tools rolled into one: strace(1), for tracing system calls, tcpdump(8), for tracing network packets, and blktrace(1), for tracing block device I/O (disk I/O), and other targets including file system and scheduler events. Tracing all events from one tool is not only convenient, it also allows direct correlations, including timestamps, between different instrumentation sources. Unlike these other tools, some assembly is required, which may not be for everyone (as explained in ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/#Audience",children:"Audience"}),")."]}),"\n",(0,t.jsx)(n.h2,{id:"13-resources",children:"13. Resources"}),"\n",(0,t.jsx)(n.p,{children:"Resources for further study."}),"\n",(0,t.jsx)(n.h2,{id:"131-posts",children:"13.1. Posts"}),"\n",(0,t.jsx)(n.p,{children:"I've been writing blog posts on specific perf_events topics. My suggested reading order is from oldest to newest (top down):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["22 Jun 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-06-22/perf-cpu-sample.html",children:"perf CPU Sampling"})]}),"\n",(0,t.jsxs)(n.li,{children:["29 Jun 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-06-29/perf-static-tracepoints.html",children:"perf Static Tracepoints"})]}),"\n",(0,t.jsxs)(n.li,{children:["01 Jul 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-07-01/perf-heat-maps.html",children:"perf Heat Maps"})]}),"\n",(0,t.jsxs)(n.li,{children:["03 Jul 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-07-03/perf-counting.html",children:"perf Counting"})]}),"\n",(0,t.jsxs)(n.li,{children:["10 Jul 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-07-10/perf-hacktogram.html",children:"perf Hacktogram"})]}),"\n",(0,t.jsxs)(n.li,{children:["11 Sep 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-09-11/perf-kernel-line-tracing.html",children:"Linux perf Rides the Rocket: perf Kernel Line Tracing"})]}),"\n",(0,t.jsxs)(n.li,{children:["17 Sep 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-09-17/node-flame-graphs-on-linux.html",children:"node.js Flame Graphs on Linux"})]}),"\n",(0,t.jsxs)(n.li,{children:["26 Feb 2015: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2015-02-26/linux-perf-off-cpu-flame-graph.html",children:"Linux perf_events Off-CPU Time Flame Graph"})]}),"\n",(0,t.jsxs)(n.li,{children:["27 Feb 2015: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2015-02-27/linux-profiling-at-netflix.html",children:"Linux Profiling at Netflix"})]}),"\n",(0,t.jsxs)(n.li,{children:["24 Jul 2015: ",(0,t.jsx)(n.a,{href:"http://techblog.netflix.com/2015/07/java-in-flames.html",children:"Java Mixed-Mode Flame Graphs"})," (",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/Articles/Netflix_Java_in_Flames.pdf",children:"PDF"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["30 Apr 2016: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2016-04-30/linux-perf-folded.html",children:"Linux 4.5 perf folded format"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"And posts on ftrace:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["13 Jul 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-07-13/linux-ftrace-function-counting.html",children:"Linux ftrace Function Counting"})]}),"\n",(0,t.jsxs)(n.li,{children:["16 Jul 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-07-16/iosnoop-for-linux.html",children:"iosnoop for Linux"})]}),"\n",(0,t.jsxs)(n.li,{children:["23 Jul 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-07-23/linux-iosnoop-latency-heat-maps.html",children:"Linux iosnoop Latency Heat Maps"})]}),"\n",(0,t.jsxs)(n.li,{children:["25 Jul 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-07-25/opensnoop-for-linux.html",children:"opensnoop for Linux"})]}),"\n",(0,t.jsxs)(n.li,{children:["28 Jul 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-07-28/execsnoop-for-linux.html",children:"execsnoop for Linux: See Short-Lived Processes"})]}),"\n",(0,t.jsxs)(n.li,{children:["30 Aug 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-08-30/ftrace-the-hidden-light-switch.html",children:"ftrace: The Hidden Light Switch"})]}),"\n",(0,t.jsxs)(n.li,{children:["06 Sep 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-09-06/linux-ftrace-tcp-retransmit-tracing.html",children:"tcpretrans: Tracing TCP retransmits"})]}),"\n",(0,t.jsxs)(n.li,{children:["31 Dec 2014: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2014-12-31/linux-page-cache-hit-ratio.html",children:"Linux Page Cache Hit Ratio"})]}),"\n",(0,t.jsxs)(n.li,{children:["28 Jun 2015: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2015-06-28/linux-ftrace-uprobe.html",children:"uprobe: User-Level Dynamic Tracing"})]}),"\n",(0,t.jsxs)(n.li,{children:["03 Jul 2015: ",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2015-07-03/hacking-linux-usdt-ftrace.html",children:"Hacking Linux USDT"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"132-links",children:"13.2. Links"}),"\n",(0,t.jsx)(n.p,{children:"perf_events:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/brendangregg/perf-tools",children:"perf-tools"})," (github), a collection of my performance analysis tools based on Linux perf_events and ftrace."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://perf.wiki.kernel.org/index.php/Main_Page",children:"perf Main Page"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["The excellent ",(0,t.jsx)(n.a,{href:"https://perf.wiki.kernel.org/index.php/Tutorial",children:"perf Tutorial"}),", which focuses more on CPU hardware counters."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.a,{href:"http://web.eece.maine.edu/~vweaver/projects/perf_events/",children:"Unofficial Linux Perf Events Web-Page"})," by Vince Weaver."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.a,{href:"http://dir.gmane.org/gmane.linux.kernel.perf.user",children:"perf user"})," mailing list."]}),"\n",(0,t.jsxs)(n.li,{children:["Mischa Jonker's presentation ",(0,t.jsx)(n.a,{href:"http://events.linuxfoundation.org/sites/events/files/slides/ELCE%20-%20fighting%20latency.pdf",children:"Fighting latency: How to optimize your system using perf"})," (PDF) (2013)."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.a,{href:"http://skreened.com/rexlambo/omg-so-perf",children:"OMG SO PERF T-shirt"})," (site has coarse language)."]}),"\n",(0,t.jsxs)(n.li,{children:["Shannon Cepeda's great posts on pipeline speak: ",(0,t.jsx)(n.a,{href:"http://software.intel.com/en-us/blogs/2011/11/22/pipeline-speak-learning-more-about-intel-microarchitecture-codename-sandy-bridge",children:"frontend"})," and ",(0,t.jsx)(n.a,{href:"http://software.intel.com/en-us/blogs/2011/12/01/pipeline-speak-part-2-the-second-part-of-the-sandy-bridge-pipeline",children:"backend."})]}),"\n",(0,t.jsxs)(n.li,{children:["Jiri Olsa's ",(0,t.jsx)(n.a,{href:"https://lkml.org/lkml/2012/4/17/165",children:"dwarf mode callchain"})," patch."]}),"\n",(0,t.jsxs)(n.li,{children:["Linux kernel source: ",(0,t.jsx)(n.a,{href:"http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/tools/perf/Documentation/examples.txt",children:"tools/perf/Documentation/examples.txt"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Linux kernel source: ",(0,t.jsx)(n.a,{href:"http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/tools/perf/Documentation/perf-record.txt",children:"tools/perf/Documentation/perf-record.txt"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"... and other documentation under tools/perf/Documentation."}),"\n",(0,t.jsxs)(n.li,{children:["A good case study for ",(0,t.jsx)(n.a,{href:"https://alexandrnikitin.github.io/blog/transparent-hugepages-measuring-the-performance-impact/",children:"Transparent Hugepages: measuring the performance impact"})," using perf and PMCs."]}),"\n",(0,t.jsxs)(n.li,{children:["Julia Evans created a ",(0,t.jsx)(n.a,{href:"https://twitter.com/b0rk/status/945900285460926464",children:"perf cheatsheet"})," based on my one-liners (2017)."]}),"\n",(0,t.jsxs)(n.li,{children:["Denis Bakhvalov has a great post on ",(0,t.jsx)(n.a,{href:"https://easyperf.net/blog/2018/06/08/Advanced-profiling-topics-PEBS-and-LBR",children:"PEBS and LBR internals"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"ftrace:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/brendangregg/perf-tools",children:"perf-tools"})," (github), a collection of my performance analysis tools based on Linux perf_events and ftrace."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://lwn.net/Articles/608497/",children:"Ftrace: The hidden light switch"}),", by myself for lwn.net, Aug 2014."]}),"\n",(0,t.jsxs)(n.li,{children:["Linux kernel source: ",(0,t.jsx)(n.a,{href:"http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/trace/ftrace.txt",children:"Documentation/trace/ftrace.txt"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["lwn.net ",(0,t.jsx)(n.a,{href:"http://lwn.net/Articles/370423/",children:"Secrets of the Ftrace function tracer"}),", by Steven Rostedt, Jan 2010."]}),"\n",(0,t.jsxs)(n.li,{children:["lwn.net ",(0,t.jsx)(n.a,{href:"http://lwn.net/Articles/365835/",children:"Debugging the kernel using Ftrace - part 1"}),", by Steven Rostedt, Dec 2009."]}),"\n",(0,t.jsxs)(n.li,{children:["lwn.net ",(0,t.jsx)(n.a,{href:"http://lwn.net/Articles/366796/",children:"Debugging the kernel using Ftrace - part 2"}),", by Steven Rostedt, Dec 2009."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"14-email",children:"14. Email"}),"\n",(0,t.jsxs)(n.p,{children:["Have a question? If you work at Netflix, contact me. If not, please use the ",(0,t.jsx)(n.a,{href:"http://dir.gmane.org/gmane.linux.kernel.perf.user",children:"perf user"})," mailing list, which I and other perf users are on."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Site Navigation"}),"\n",(0,t.jsx)(n.p,{children:"Brendan's site:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/overview.html",children:"Start Here"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/index.html",children:"Homepage"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/index.html",children:"Blog"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/systems-performance-2nd-edition-book.html",children:"Sys Perf book"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/bpf-performance-tools-book.html",children:"BPF Perf book"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/linuxperf.html",children:"Linux Perf"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/ebpf.html",children:"eBPF Tools"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/perf.html",children:"perf Examples"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/methodology.html",children:"Perf Methods"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/usemethod.html",children:"USE Method"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/tsamethod.html",children:"TSA Method"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/offcpuanalysis.html",children:"Off-CPU Analysis"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/activebenchmarking.html",children:"Active Bench."}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/wss.html",children:"WSS Estimation"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/flamegraphs.html",children:"Flame Graphs"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/flamescope.html",children:"Flame Scope"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/heatmaps.html",children:"Heat Maps"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/frequencytrails.html",children:"Frequency Trails"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/colonygraphs.html",children:"Colony Graphs"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/dtrace.html",children:"DTrace Tools"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/dtracetoolkit.html",children:"DTraceToolkit"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/dtkshdemos.html",children:"DtkshDemos"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/guessinggame.html",children:"Guessing Game"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/specials.html",children:"Specials"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/books.html",children:"Books"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/sites.html",children:"Other Sites"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/systems-performance-2nd-edition-book.html",children:(0,t.jsx)(n.img,{src:s(4913).A+"",width:"360",height:"470"})}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/systems-performance-2nd-edition-book.html",children:"Systems Performance 2nd Ed."})})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/bpf-performance-tools-book.html",children:(0,t.jsx)(n.img,{src:s(8867).A+"",width:"360",height:"468"})}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/bpf-performance-tools-book.html",children:"BPF Performance Tools book"})})]}),"\n",(0,t.jsx)(n.p,{children:"Recent posts:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["22 May 2025 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2025-05-22/3-years-of-extremely-remote-work.html",children:"3 Years of Extremely Remote Work"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["01 May 2025 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2025-05-01/doom-gpu-flame-graphs.html",children:"Doom GPU Flame Graphs"})]}),"\n",(0,t.jsxs)(n.li,{children:["29 Oct 2024 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2024-10-29/ai-flame-graphs.html",children:"AI Flame Graphs"})]}),"\n",(0,t.jsxs)(n.li,{children:["22 Jul 2024 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2024-07-22/no-more-blue-fridays.html",children:"No More Blue Fridays"})]}),"\n",(0,t.jsxs)(n.li,{children:["24 Mar 2024 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2024-03-24/linux-crisis-tools.html",children:"Linux Crisis Tools"})]}),"\n",(0,t.jsxs)(n.li,{children:["17 Mar 2024 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2024-03-17/the-return-of-the-frame-pointers.html",children:"The Return of the Frame Pointers"})]}),"\n",(0,t.jsxs)(n.li,{children:["10 Mar 2024 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2024-03-10/ebpf-documentary.html",children:"eBPF Documentary"})]}),"\n",(0,t.jsxs)(n.li,{children:["28 Apr 2023 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2023-04-28/ebpf-security-issues.html",children:"eBPF Observability Tools Are Not Security Tools"})]}),"\n",(0,t.jsxs)(n.li,{children:["01 Mar 2023 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2023-03-01/computer-performance-future-2022.html",children:"USENIX SREcon APAC 2022: Computing Performance: What's on the Horizon"})]}),"\n",(0,t.jsxs)(n.li,{children:["17 Feb 2023 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2023-02-17/srecon-apac-2023.html",children:"USENIX SREcon APAC 2023: CFP"})]}),"\n",(0,t.jsxs)(n.li,{children:["02 May 2022 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2022-05-02/brendan-at-intel.html",children:"Brendan@Intel.com"})]}),"\n",(0,t.jsxs)(n.li,{children:["15 Apr 2022 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2022-04-15/netflix-farewell-1.html",children:"Netflix End of Series 1"})]}),"\n",(0,t.jsxs)(n.li,{children:["09 Apr 2022 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2022-04-09/tensorflow-library-performance.html",children:"TensorFlow Library Performance"})]}),"\n",(0,t.jsxs)(n.li,{children:["19 Mar 2022 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2022-03-19/why-dont-you-use.html",children:"Why Don't You Use..."})]}),"\n",(0,t.jsxs)(n.li,{children:["26 Sep 2021 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2021-09-26/the-speed-of-time.html",children:"The Speed of Time"})]}),"\n",(0,t.jsxs)(n.li,{children:["06 Sep 2021 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2021-09-06/zfs-is-mysteriously-eating-my-cpu.html",children:"ZFS Is Mysteriously Eating My CPU"})]}),"\n",(0,t.jsxs)(n.li,{children:["30 Aug 2021 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2021-08-30/high-rate-of-paging.html",children:"Analyzing a High Rate of Paging"})]}),"\n",(0,t.jsxs)(n.li,{children:["27 Aug 2021 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2021-08-27/slack-crashes-secret-stderr.html",children:"Slack's Secret STDERR Messages"})]}),"\n",(0,t.jsxs)(n.li,{children:["05 Jul 2021 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2021-07-05/computing-performance-on-the-horizon.html",children:"USENIX LISA2021 Computing Performance: On the Horizon"})]}),"\n",(0,t.jsxs)(n.li,{children:["03 Jul 2021 \xbb",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/2021-07-03/how-to-add-bpf-observability.html",children:"How To Add eBPF Observability To Your Product"}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/index.html",children:"Blog index"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/about.html",children:"About"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://www.brendangregg.com/blog/rss.xml",children:"RSS"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Last Updated: 29-Jul-2020",(0,t.jsx)(n.br,{}),"\n","Copyright 2020 Brendan Gregg"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);