"use strict";(self.webpackChunkpub=self.webpackChunkpub||[]).push([[6415],{2491:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"git","title":"Three way merge by git","description":"git","source":"@site/docs/git.md","sourceDirName":".","slug":"/git","permalink":"/docs/git","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Three way merge by git","updated":"2021-01-11T10:30:49.000Z","created":"2021-01-19T01:48:47.000Z"},"sidebar":"refSidebar","previous":{"title":"Difference tool configuration in git","permalink":"/docs/git-diff-tool"},"next":{"title":"GPT-4.1 Prompting Guide","permalink":"/docs/gpt4-1_prompting_guide"}}');var t=r(4848),o=r(8453);const s={title:"Three way merge by git",updated:new Date("2021-01-11T10:30:49.000Z"),created:new Date("2021-01-19T01:48:47.000Z")},a="git",c={},l=[{value:"Determine if Git working directory is clean from a script",id:"determine-if-git-working-directory-is-clean-from-a-script",level:2},{value:"Compares files in the working tree and the index",id:"compares-files-in-the-working-tree-and-the-index",level:2},{value:"Migrate history to or from git-lfs",id:"migrate-history-to-or-from-git-lfs",level:2},{value:"Finds best common ancestor(s) between two commits to use in a three-way merge.",id:"finds-best-common-ancestors-between-two-commits-to-use-in-a-three-way-merge",level:2},{value:"Github Copilot",id:"github-copilot",level:2},{value:"Three way merge by git",id:"three-way-merge-by-git",level:2},{value:"1. get parent of two branch",id:"1-get-parent-of-two-branch",level:2},{value:"2. clone 4 dirs",id:"2-clone-4-dirs",level:2},{value:"3. merge from src_branch to target_branch",id:"3-merge-from-src_branch-to-target_branch",level:2},{value:"4. FolderMerge by Beyond Compare",id:"4-foldermerge-by-beyond-compare",level:2},{value:"git-diff-tool",id:"git-diff-tool",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"git"}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"git",children:"git"})}),"\n",(0,t.jsx)(n.h2,{id:""}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git filter-branch --index-filter "git rm --cached --ignore-unmatch *.lib *.dll *.exe *.ttf *.bmp *.sdf *.ipch *.ncb" --prune-empty -f HEAD --all\nrm -Rf refs/original\nrm -Rf logs/\ngit gc\ngit repack\ngit repack -adf\ngit prune-packed\ngit prune\n'})}),"\n",(0,t.jsx)(n.h2,{id:"determine-if-git-working-directory-is-clean-from-a-script",children:"Determine if Git working directory is clean from a script"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"#! /bin/bash\n\nfor D in $PWD/$1/*/ ; do\n  cd $D\n  git diff-files --exit-code &> /dev/null\n  if [ $? -ne 0 ] ; then\n    # Working directory clean\n    echo $D\n    git status -s\n  #else\n    # Uncommitted changes\n  fi\n  cd $PWD\ndone\n"})}),"\n",(0,t.jsx)(n.h2,{id:"compares-files-in-the-working-tree-and-the-index",children:"Compares files in the working tree and the index"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git diff-files --exit-code\n"})}),"\n",(0,t.jsx)(n.h2,{id:"migrate-history-to-or-from-git-lfs",children:"Migrate history to or from git-lfs"}),"\n",(0,t.jsxs)(n.p,{children:["First, run ",(0,t.jsx)(n.code,{children:"git lfs migrate info"})," to list the file types taking up the most\nspace in your repository."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ git lfs migrate info\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now, you can run ",(0,t.jsx)(n.code,{children:"git lfs migrate import"})," to convert some file types to LFS:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'$ git lfs migrate import --include="*.mp3,*.psd"\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can also migrate the entire history of your repository:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Check for large files in your local master branch\n$ git lfs migrate info --include-ref=master\n\n# Check for large files in every branch\n$ git lfs migrate info --everything\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The same flags will work in ",(0,t.jsx)(n.code,{children:"import"})," mode:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'# Convert all zip files in your master branch\n$ git lfs migrate import --include-ref=master --include="*.zip"\n\n# Convert all zip files in every local branch\n$ git lfs migrate import --everything --include="*.zip"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"finds-best-common-ancestors-between-two-commits-to-use-in-a-three-way-merge",children:"Finds best common ancestor(s) between two commits to use in a three-way merge."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"git merge-base [-a|--all] <commit> <commit>\u2026\u200b\n"})}),"\n",(0,t.jsx)(n.h2,{id:"github-copilot",children:"Github Copilot"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"curl --verbose https://copilot-proxy.githubusercontent.com/_ping\n"})}),"\n",(0,t.jsx)(n.h2,{id:"three-way-merge-by-git",children:"Three way merge by git"}),"\n",(0,t.jsx)(n.h2,{id:"1-get-parent-of-two-branch",children:"1. get parent of two branch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git merge-base origin/src_branch origin/target_branch\n"})}),"\n",(0,t.jsx)(n.h2,{id:"2-clone-4-dirs",children:"2. clone 4 dirs"}),"\n",(0,t.jsx)(n.p,{children:"base\nsrc_branch\ntarget_branch\nout"}),"\n",(0,t.jsx)(n.h2,{id:"3-merge-from-src_branch-to-target_branch",children:"3. merge from src_branch to target_branch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd out\ngit checkout target_branch\ngit pull origin src_branch -X theirs\n"})}),"\n",(0,t.jsx)(n.h2,{id:"4-foldermerge-by-beyond-compare",children:"4. FolderMerge by Beyond Compare"}),"\n",(0,t.jsx)(n.p,{children:"left folder is target_branch"}),"\n",(0,t.jsx)(n.h2,{id:"git-diff-tool",children:(0,t.jsx)(n.a,{href:"/docs/git-diff-tool",children:"git-diff-tool"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var i=r(6540);const t={},o=i.createContext(t);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);